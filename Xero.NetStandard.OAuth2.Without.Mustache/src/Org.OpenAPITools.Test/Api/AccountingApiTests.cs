/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AccountingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountingApiTests : IDisposable
    {
        private AccountingApi instance;

        public AccountingApiTests()
        {
            instance = new AccountingApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountingApi
            //Assert.IsType<AccountingApi>(instance);
        }

        /// <summary>
        /// Test CreateAccount
        /// </summary>
        [Fact]
        public void CreateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Account account = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateAccount(xeroTenantId, account, idempotencyKey);
            //Assert.IsType<Accounts>(response);
        }

        /// <summary>
        /// Test CreateAccountAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateAccountAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateBankTransactionAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateBankTransactionAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateBankTransactionHistoryRecord
        /// </summary>
        [Fact]
        public void CreateBankTransactionHistoryRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBankTransactionHistoryRecord(xeroTenantId, bankTransactionID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateBankTransactions
        /// </summary>
        [Fact]
        public void CreateBankTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BankTransactions bankTransactions = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBankTransactions(xeroTenantId, bankTransactions, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<BankTransactions>(response);
        }

        /// <summary>
        /// Test CreateBankTransfer
        /// </summary>
        [Fact]
        public void CreateBankTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BankTransfers bankTransfers = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBankTransfer(xeroTenantId, bankTransfers, idempotencyKey);
            //Assert.IsType<BankTransfers>(response);
        }

        /// <summary>
        /// Test CreateBankTransferAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateBankTransferAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateBankTransferHistoryRecord
        /// </summary>
        [Fact]
        public void CreateBankTransferHistoryRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBankTransferHistoryRecord(xeroTenantId, bankTransferID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateBatchPayment
        /// </summary>
        [Fact]
        public void CreateBatchPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BatchPayments batchPayments = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBatchPayment(xeroTenantId, batchPayments, summarizeErrors, idempotencyKey);
            //Assert.IsType<BatchPayments>(response);
        }

        /// <summary>
        /// Test CreateBatchPaymentHistoryRecord
        /// </summary>
        [Fact]
        public void CreateBatchPaymentHistoryRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid batchPaymentID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBatchPaymentHistoryRecord(xeroTenantId, batchPaymentID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateBrandingThemePaymentServices
        /// </summary>
        [Fact]
        public void CreateBrandingThemePaymentServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid brandingThemeID = null;
            //PaymentServices paymentServices = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateBrandingThemePaymentServices(xeroTenantId, brandingThemeID, paymentServices, idempotencyKey);
            //Assert.IsType<PaymentServices>(response);
        }

        /// <summary>
        /// Test CreateContactAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateContactAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateContactAttachmentByFileName(xeroTenantId, contactID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateContactGroup
        /// </summary>
        [Fact]
        public void CreateContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ContactGroups contactGroups = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateContactGroup(xeroTenantId, contactGroups, idempotencyKey);
            //Assert.IsType<ContactGroups>(response);
        }

        /// <summary>
        /// Test CreateContactGroupContacts
        /// </summary>
        [Fact]
        public void CreateContactGroupContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //Contacts contacts = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateContactGroupContacts(xeroTenantId, contactGroupID, contacts, idempotencyKey);
            //Assert.IsType<Contacts>(response);
        }

        /// <summary>
        /// Test CreateContactHistory
        /// </summary>
        [Fact]
        public void CreateContactHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateContactHistory(xeroTenantId, contactID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateContacts
        /// </summary>
        [Fact]
        public void CreateContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Contacts contacts = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateContacts(xeroTenantId, contacts, summarizeErrors, idempotencyKey);
            //Assert.IsType<Contacts>(response);
        }

        /// <summary>
        /// Test CreateCreditNoteAllocation
        /// </summary>
        [Fact]
        public void CreateCreditNoteAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //Allocations allocations = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateCreditNoteAllocation(xeroTenantId, creditNoteID, allocations, summarizeErrors, idempotencyKey);
            //Assert.IsType<Allocations>(response);
        }

        /// <summary>
        /// Test CreateCreditNoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateCreditNoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //string fileName = null;
            //byte[] body = null;
            //bool? includeOnline = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body, includeOnline, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateCreditNoteHistory
        /// </summary>
        [Fact]
        public void CreateCreditNoteHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateCreditNoteHistory(xeroTenantId, creditNoteID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateCreditNotes
        /// </summary>
        [Fact]
        public void CreateCreditNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //CreditNotes creditNotes = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateCreditNotes(xeroTenantId, creditNotes, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<CreditNotes>(response);
        }

        /// <summary>
        /// Test CreateCurrency
        /// </summary>
        [Fact]
        public void CreateCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Currency currency = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateCurrency(xeroTenantId, currency, idempotencyKey);
            //Assert.IsType<Currencies>(response);
        }

        /// <summary>
        /// Test CreateEmployees
        /// </summary>
        [Fact]
        public void CreateEmployeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Employees employees = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateEmployees(xeroTenantId, employees, summarizeErrors, idempotencyKey);
            //Assert.IsType<Employees>(response);
        }

        /// <summary>
        /// Test CreateExpenseClaimHistory
        /// </summary>
        [Fact]
        public void CreateExpenseClaimHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateExpenseClaimHistory(xeroTenantId, expenseClaimID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateExpenseClaims
        /// </summary>
        [Fact]
        public void CreateExpenseClaimsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ExpenseClaims expenseClaims = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateExpenseClaims(xeroTenantId, expenseClaims, idempotencyKey);
            //Assert.IsType<ExpenseClaims>(response);
        }

        /// <summary>
        /// Test CreateInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //bool? includeOnline = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body, includeOnline, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateInvoiceHistory
        /// </summary>
        [Fact]
        public void CreateInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateInvoiceHistory(xeroTenantId, invoiceID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateInvoices
        /// </summary>
        [Fact]
        public void CreateInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Invoices invoices = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateInvoices(xeroTenantId, invoices, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<Invoices>(response);
        }

        /// <summary>
        /// Test CreateItemHistory
        /// </summary>
        [Fact]
        public void CreateItemHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateItemHistory(xeroTenantId, itemID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateItems
        /// </summary>
        [Fact]
        public void CreateItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Items items = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateItems(xeroTenantId, items, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<Items>(response);
        }

        /// <summary>
        /// Test CreateLinkedTransaction
        /// </summary>
        [Fact]
        public void CreateLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //LinkedTransaction linkedTransaction = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateLinkedTransaction(xeroTenantId, linkedTransaction, idempotencyKey);
            //Assert.IsType<LinkedTransactions>(response);
        }

        /// <summary>
        /// Test CreateManualJournalAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateManualJournalAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateManualJournalHistoryRecord
        /// </summary>
        [Fact]
        public void CreateManualJournalHistoryRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateManualJournalHistoryRecord(xeroTenantId, manualJournalID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateManualJournals
        /// </summary>
        [Fact]
        public void CreateManualJournalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ManualJournals manualJournals = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateManualJournals(xeroTenantId, manualJournals, summarizeErrors, idempotencyKey);
            //Assert.IsType<ManualJournals>(response);
        }

        /// <summary>
        /// Test CreateOverpaymentAllocations
        /// </summary>
        [Fact]
        public void CreateOverpaymentAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //Allocations allocations = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateOverpaymentAllocations(xeroTenantId, overpaymentID, allocations, summarizeErrors, idempotencyKey);
            //Assert.IsType<Allocations>(response);
        }

        /// <summary>
        /// Test CreateOverpaymentHistory
        /// </summary>
        [Fact]
        public void CreateOverpaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateOverpaymentHistory(xeroTenantId, overpaymentID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreatePayment
        /// </summary>
        [Fact]
        public void CreatePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Payment payment = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePayment(xeroTenantId, payment, idempotencyKey);
            //Assert.IsType<Payments>(response);
        }

        /// <summary>
        /// Test CreatePaymentHistory
        /// </summary>
        [Fact]
        public void CreatePaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePaymentHistory(xeroTenantId, paymentID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreatePaymentService
        /// </summary>
        [Fact]
        public void CreatePaymentServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //PaymentServices paymentServices = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePaymentService(xeroTenantId, paymentServices, idempotencyKey);
            //Assert.IsType<PaymentServices>(response);
        }

        /// <summary>
        /// Test CreatePayments
        /// </summary>
        [Fact]
        public void CreatePaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Payments payments = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePayments(xeroTenantId, payments, summarizeErrors, idempotencyKey);
            //Assert.IsType<Payments>(response);
        }

        /// <summary>
        /// Test CreatePrepaymentAllocations
        /// </summary>
        [Fact]
        public void CreatePrepaymentAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //Allocations allocations = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePrepaymentAllocations(xeroTenantId, prepaymentID, allocations, summarizeErrors, idempotencyKey);
            //Assert.IsType<Allocations>(response);
        }

        /// <summary>
        /// Test CreatePrepaymentHistory
        /// </summary>
        [Fact]
        public void CreatePrepaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePrepaymentHistory(xeroTenantId, prepaymentID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreatePurchaseOrderAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreatePurchaseOrderAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreatePurchaseOrderHistory
        /// </summary>
        [Fact]
        public void CreatePurchaseOrderHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePurchaseOrderHistory(xeroTenantId, purchaseOrderID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreatePurchaseOrders
        /// </summary>
        [Fact]
        public void CreatePurchaseOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //PurchaseOrders purchaseOrders = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreatePurchaseOrders(xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey);
            //Assert.IsType<PurchaseOrders>(response);
        }

        /// <summary>
        /// Test CreateQuoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateQuoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateQuoteHistory
        /// </summary>
        [Fact]
        public void CreateQuoteHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateQuoteHistory(xeroTenantId, quoteID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateQuotes
        /// </summary>
        [Fact]
        public void CreateQuotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Quotes quotes = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateQuotes(xeroTenantId, quotes, summarizeErrors, idempotencyKey);
            //Assert.IsType<Quotes>(response);
        }

        /// <summary>
        /// Test CreateReceipt
        /// </summary>
        [Fact]
        public void CreateReceiptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Receipts receipts = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateReceipt(xeroTenantId, receipts, unitdp, idempotencyKey);
            //Assert.IsType<Receipts>(response);
        }

        /// <summary>
        /// Test CreateReceiptAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateReceiptAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateReceiptHistory
        /// </summary>
        [Fact]
        public void CreateReceiptHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateReceiptHistory(xeroTenantId, receiptID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateRepeatingInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void CreateRepeatingInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test CreateRepeatingInvoiceHistory
        /// </summary>
        [Fact]
        public void CreateRepeatingInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //HistoryRecords historyRecords = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID, historyRecords, idempotencyKey);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test CreateRepeatingInvoices
        /// </summary>
        [Fact]
        public void CreateRepeatingInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //RepeatingInvoices repeatingInvoices = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateRepeatingInvoices(xeroTenantId, repeatingInvoices, summarizeErrors, idempotencyKey);
            //Assert.IsType<RepeatingInvoices>(response);
        }

        /// <summary>
        /// Test CreateTaxRates
        /// </summary>
        [Fact]
        public void CreateTaxRatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //TaxRates taxRates = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateTaxRates(xeroTenantId, taxRates, idempotencyKey);
            //Assert.IsType<TaxRates>(response);
        }

        /// <summary>
        /// Test CreateTrackingCategory
        /// </summary>
        [Fact]
        public void CreateTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //TrackingCategory trackingCategory = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateTrackingCategory(xeroTenantId, trackingCategory, idempotencyKey);
            //Assert.IsType<TrackingCategories>(response);
        }

        /// <summary>
        /// Test CreateTrackingOptions
        /// </summary>
        [Fact]
        public void CreateTrackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //TrackingOption trackingOption = null;
            //string? idempotencyKey = null;
            //var response = instance.CreateTrackingOptions(xeroTenantId, trackingCategoryID, trackingOption, idempotencyKey);
            //Assert.IsType<TrackingOptions>(response);
        }

        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Fact]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //var response = instance.DeleteAccount(xeroTenantId, accountID);
            //Assert.IsType<Accounts>(response);
        }

        /// <summary>
        /// Test DeleteBatchPayment
        /// </summary>
        [Fact]
        public void DeleteBatchPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BatchPaymentDelete batchPaymentDelete = null;
            //string? idempotencyKey = null;
            //var response = instance.DeleteBatchPayment(xeroTenantId, batchPaymentDelete, idempotencyKey);
            //Assert.IsType<BatchPayments>(response);
        }

        /// <summary>
        /// Test DeleteBatchPaymentByUrlParam
        /// </summary>
        [Fact]
        public void DeleteBatchPaymentByUrlParamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid batchPaymentID = null;
            //BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam = null;
            //string? idempotencyKey = null;
            //var response = instance.DeleteBatchPaymentByUrlParam(xeroTenantId, batchPaymentID, batchPaymentDeleteByUrlParam, idempotencyKey);
            //Assert.IsType<BatchPayments>(response);
        }

        /// <summary>
        /// Test DeleteContactGroupContact
        /// </summary>
        [Fact]
        public void DeleteContactGroupContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //Guid contactID = null;
            //instance.DeleteContactGroupContact(xeroTenantId, contactGroupID, contactID);
        }

        /// <summary>
        /// Test DeleteContactGroupContacts
        /// </summary>
        [Fact]
        public void DeleteContactGroupContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //instance.DeleteContactGroupContacts(xeroTenantId, contactGroupID);
        }

        /// <summary>
        /// Test DeleteCreditNoteAllocations
        /// </summary>
        [Fact]
        public void DeleteCreditNoteAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //Guid allocationID = null;
            //var response = instance.DeleteCreditNoteAllocations(xeroTenantId, creditNoteID, allocationID);
            //Assert.IsType<Allocation>(response);
        }

        /// <summary>
        /// Test DeleteItem
        /// </summary>
        [Fact]
        public void DeleteItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //instance.DeleteItem(xeroTenantId, itemID);
        }

        /// <summary>
        /// Test DeleteLinkedTransaction
        /// </summary>
        [Fact]
        public void DeleteLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid linkedTransactionID = null;
            //instance.DeleteLinkedTransaction(xeroTenantId, linkedTransactionID);
        }

        /// <summary>
        /// Test DeleteOverpaymentAllocations
        /// </summary>
        [Fact]
        public void DeleteOverpaymentAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //Guid allocationID = null;
            //var response = instance.DeleteOverpaymentAllocations(xeroTenantId, overpaymentID, allocationID);
            //Assert.IsType<Allocation>(response);
        }

        /// <summary>
        /// Test DeletePayment
        /// </summary>
        [Fact]
        public void DeletePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //PaymentDelete paymentDelete = null;
            //string? idempotencyKey = null;
            //var response = instance.DeletePayment(xeroTenantId, paymentID, paymentDelete, idempotencyKey);
            //Assert.IsType<Payments>(response);
        }

        /// <summary>
        /// Test DeletePrepaymentAllocations
        /// </summary>
        [Fact]
        public void DeletePrepaymentAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //Guid allocationID = null;
            //var response = instance.DeletePrepaymentAllocations(xeroTenantId, prepaymentID, allocationID);
            //Assert.IsType<Allocation>(response);
        }

        /// <summary>
        /// Test DeleteTrackingCategory
        /// </summary>
        [Fact]
        public void DeleteTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //var response = instance.DeleteTrackingCategory(xeroTenantId, trackingCategoryID);
            //Assert.IsType<TrackingCategories>(response);
        }

        /// <summary>
        /// Test DeleteTrackingOptions
        /// </summary>
        [Fact]
        public void DeleteTrackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //Guid trackingOptionID = null;
            //var response = instance.DeleteTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID);
            //Assert.IsType<TrackingOptions>(response);
        }

        /// <summary>
        /// Test EmailInvoice
        /// </summary>
        [Fact]
        public void EmailInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //RequestEmpty requestEmpty = null;
            //string? idempotencyKey = null;
            //instance.EmailInvoice(xeroTenantId, invoiceID, requestEmpty, idempotencyKey);
        }

        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Fact]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //var response = instance.GetAccount(xeroTenantId, accountID);
            //Assert.IsType<Accounts>(response);
        }

        /// <summary>
        /// Test GetAccountAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetAccountAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetAccountAttachmentByFileName(xeroTenantId, accountID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetAccountAttachmentById
        /// </summary>
        [Fact]
        public void GetAccountAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetAccountAttachmentById(xeroTenantId, accountID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetAccountAttachments
        /// </summary>
        [Fact]
        public void GetAccountAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //var response = instance.GetAccountAttachments(xeroTenantId, accountID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetAccounts
        /// </summary>
        [Fact]
        public void GetAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetAccounts(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<Accounts>(response);
        }

        /// <summary>
        /// Test GetBankTransaction
        /// </summary>
        [Fact]
        public void GetBankTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //int? unitdp = null;
            //var response = instance.GetBankTransaction(xeroTenantId, bankTransactionID, unitdp);
            //Assert.IsType<BankTransactions>(response);
        }

        /// <summary>
        /// Test GetBankTransactionAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetBankTransactionAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetBankTransactionAttachmentById
        /// </summary>
        [Fact]
        public void GetBankTransactionAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetBankTransactionAttachmentById(xeroTenantId, bankTransactionID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetBankTransactionAttachments
        /// </summary>
        [Fact]
        public void GetBankTransactionAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //var response = instance.GetBankTransactionAttachments(xeroTenantId, bankTransactionID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetBankTransactions
        /// </summary>
        [Fact]
        public void GetBankTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? page = null;
            //int? unitdp = null;
            //int? pageSize = null;
            //var response = instance.GetBankTransactions(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            //Assert.IsType<BankTransactions>(response);
        }

        /// <summary>
        /// Test GetBankTransactionsHistory
        /// </summary>
        [Fact]
        public void GetBankTransactionsHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //var response = instance.GetBankTransactionsHistory(xeroTenantId, bankTransactionID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetBankTransfer
        /// </summary>
        [Fact]
        public void GetBankTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //var response = instance.GetBankTransfer(xeroTenantId, bankTransferID);
            //Assert.IsType<BankTransfers>(response);
        }

        /// <summary>
        /// Test GetBankTransferAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetBankTransferAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetBankTransferAttachmentById
        /// </summary>
        [Fact]
        public void GetBankTransferAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetBankTransferAttachmentById(xeroTenantId, bankTransferID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetBankTransferAttachments
        /// </summary>
        [Fact]
        public void GetBankTransferAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //var response = instance.GetBankTransferAttachments(xeroTenantId, bankTransferID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetBankTransferHistory
        /// </summary>
        [Fact]
        public void GetBankTransferHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //var response = instance.GetBankTransferHistory(xeroTenantId, bankTransferID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetBankTransfers
        /// </summary>
        [Fact]
        public void GetBankTransfersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetBankTransfers(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<BankTransfers>(response);
        }

        /// <summary>
        /// Test GetBatchPayment
        /// </summary>
        [Fact]
        public void GetBatchPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid batchPaymentID = null;
            //var response = instance.GetBatchPayment(xeroTenantId, batchPaymentID);
            //Assert.IsType<BatchPayments>(response);
        }

        /// <summary>
        /// Test GetBatchPaymentHistory
        /// </summary>
        [Fact]
        public void GetBatchPaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid batchPaymentID = null;
            //var response = instance.GetBatchPaymentHistory(xeroTenantId, batchPaymentID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetBatchPayments
        /// </summary>
        [Fact]
        public void GetBatchPaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetBatchPayments(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<BatchPayments>(response);
        }

        /// <summary>
        /// Test GetBrandingTheme
        /// </summary>
        [Fact]
        public void GetBrandingThemeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid brandingThemeID = null;
            //var response = instance.GetBrandingTheme(xeroTenantId, brandingThemeID);
            //Assert.IsType<BrandingThemes>(response);
        }

        /// <summary>
        /// Test GetBrandingThemePaymentServices
        /// </summary>
        [Fact]
        public void GetBrandingThemePaymentServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid brandingThemeID = null;
            //var response = instance.GetBrandingThemePaymentServices(xeroTenantId, brandingThemeID);
            //Assert.IsType<PaymentServices>(response);
        }

        /// <summary>
        /// Test GetBrandingThemes
        /// </summary>
        [Fact]
        public void GetBrandingThemesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetBrandingThemes(xeroTenantId);
            //Assert.IsType<BrandingThemes>(response);
        }

        /// <summary>
        /// Test GetBudget
        /// </summary>
        [Fact]
        public void GetBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid budgetID = null;
            //DateOnly? dateTo = null;
            //DateOnly? dateFrom = null;
            //var response = instance.GetBudget(xeroTenantId, budgetID, dateTo, dateFrom);
            //Assert.IsType<Budgets>(response);
        }

        /// <summary>
        /// Test GetBudgets
        /// </summary>
        [Fact]
        public void GetBudgetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //List<Guid>? iDs = null;
            //DateOnly? dateTo = null;
            //DateOnly? dateFrom = null;
            //var response = instance.GetBudgets(xeroTenantId, iDs, dateTo, dateFrom);
            //Assert.IsType<Budgets>(response);
        }

        /// <summary>
        /// Test GetContact
        /// </summary>
        [Fact]
        public void GetContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContact(xeroTenantId, contactID);
            //Assert.IsType<Contacts>(response);
        }

        /// <summary>
        /// Test GetContactAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetContactAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetContactAttachmentByFileName(xeroTenantId, contactID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetContactAttachmentById
        /// </summary>
        [Fact]
        public void GetContactAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetContactAttachmentById(xeroTenantId, contactID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetContactAttachments
        /// </summary>
        [Fact]
        public void GetContactAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContactAttachments(xeroTenantId, contactID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetContactByContactNumber
        /// </summary>
        [Fact]
        public void GetContactByContactNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string contactNumber = null;
            //var response = instance.GetContactByContactNumber(xeroTenantId, contactNumber);
            //Assert.IsType<Contacts>(response);
        }

        /// <summary>
        /// Test GetContactCISSettings
        /// </summary>
        [Fact]
        public void GetContactCISSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContactCISSettings(xeroTenantId, contactID);
            //Assert.IsType<CISSettings>(response);
        }

        /// <summary>
        /// Test GetContactGroup
        /// </summary>
        [Fact]
        public void GetContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //var response = instance.GetContactGroup(xeroTenantId, contactGroupID);
            //Assert.IsType<ContactGroups>(response);
        }

        /// <summary>
        /// Test GetContactGroups
        /// </summary>
        [Fact]
        public void GetContactGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetContactGroups(xeroTenantId, where, order);
            //Assert.IsType<ContactGroups>(response);
        }

        /// <summary>
        /// Test GetContactHistory
        /// </summary>
        [Fact]
        public void GetContactHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //var response = instance.GetContactHistory(xeroTenantId, contactID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetContacts
        /// </summary>
        [Fact]
        public void GetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //List<Guid>? iDs = null;
            //int? page = null;
            //bool? includeArchived = null;
            //bool? summaryOnly = null;
            //string? searchTerm = null;
            //int? pageSize = null;
            //var response = instance.GetContacts(xeroTenantId, ifModifiedSince, where, order, iDs, page, includeArchived, summaryOnly, searchTerm, pageSize);
            //Assert.IsType<Contacts>(response);
        }

        /// <summary>
        /// Test GetCreditNote
        /// </summary>
        [Fact]
        public void GetCreditNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //int? unitdp = null;
            //var response = instance.GetCreditNote(xeroTenantId, creditNoteID, unitdp);
            //Assert.IsType<CreditNotes>(response);
        }

        /// <summary>
        /// Test GetCreditNoteAsPdf
        /// </summary>
        [Fact]
        public void GetCreditNoteAsPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //var response = instance.GetCreditNoteAsPdf(xeroTenantId, creditNoteID);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetCreditNoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetCreditNoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetCreditNoteAttachmentById
        /// </summary>
        [Fact]
        public void GetCreditNoteAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetCreditNoteAttachmentById(xeroTenantId, creditNoteID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetCreditNoteAttachments
        /// </summary>
        [Fact]
        public void GetCreditNoteAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //var response = instance.GetCreditNoteAttachments(xeroTenantId, creditNoteID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetCreditNoteHistory
        /// </summary>
        [Fact]
        public void GetCreditNoteHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //var response = instance.GetCreditNoteHistory(xeroTenantId, creditNoteID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetCreditNotes
        /// </summary>
        [Fact]
        public void GetCreditNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? page = null;
            //int? unitdp = null;
            //int? pageSize = null;
            //var response = instance.GetCreditNotes(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            //Assert.IsType<CreditNotes>(response);
        }

        /// <summary>
        /// Test GetCurrencies
        /// </summary>
        [Fact]
        public void GetCurrenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetCurrencies(xeroTenantId, where, order);
            //Assert.IsType<Currencies>(response);
        }

        /// <summary>
        /// Test GetEmployee
        /// </summary>
        [Fact]
        public void GetEmployeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid employeeID = null;
            //var response = instance.GetEmployee(xeroTenantId, employeeID);
            //Assert.IsType<Employees>(response);
        }

        /// <summary>
        /// Test GetEmployees
        /// </summary>
        [Fact]
        public void GetEmployeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetEmployees(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<Employees>(response);
        }

        /// <summary>
        /// Test GetExpenseClaim
        /// </summary>
        [Fact]
        public void GetExpenseClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //var response = instance.GetExpenseClaim(xeroTenantId, expenseClaimID);
            //Assert.IsType<ExpenseClaims>(response);
        }

        /// <summary>
        /// Test GetExpenseClaimHistory
        /// </summary>
        [Fact]
        public void GetExpenseClaimHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //var response = instance.GetExpenseClaimHistory(xeroTenantId, expenseClaimID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetExpenseClaims
        /// </summary>
        [Fact]
        public void GetExpenseClaimsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetExpenseClaims(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<ExpenseClaims>(response);
        }

        /// <summary>
        /// Test GetInvoice
        /// </summary>
        [Fact]
        public void GetInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //int? unitdp = null;
            //var response = instance.GetInvoice(xeroTenantId, invoiceID, unitdp);
            //Assert.IsType<Invoices>(response);
        }

        /// <summary>
        /// Test GetInvoiceAsPdf
        /// </summary>
        [Fact]
        public void GetInvoiceAsPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetInvoiceAsPdf(xeroTenantId, invoiceID);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetInvoiceAttachmentById
        /// </summary>
        [Fact]
        public void GetInvoiceAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetInvoiceAttachmentById(xeroTenantId, invoiceID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetInvoiceAttachments
        /// </summary>
        [Fact]
        public void GetInvoiceAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetInvoiceAttachments(xeroTenantId, invoiceID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetInvoiceHistory
        /// </summary>
        [Fact]
        public void GetInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetInvoiceHistory(xeroTenantId, invoiceID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetInvoiceReminders
        /// </summary>
        [Fact]
        public void GetInvoiceRemindersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetInvoiceReminders(xeroTenantId);
            //Assert.IsType<InvoiceReminders>(response);
        }

        /// <summary>
        /// Test GetInvoices
        /// </summary>
        [Fact]
        public void GetInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //List<Guid>? iDs = null;
            //List<string>? invoiceNumbers = null;
            //List<Guid>? contactIDs = null;
            //List<string>? statuses = null;
            //int? page = null;
            //bool? includeArchived = null;
            //bool? createdByMyApp = null;
            //int? unitdp = null;
            //bool? summaryOnly = null;
            //int? pageSize = null;
            //string? searchTerm = null;
            //var response = instance.GetInvoices(xeroTenantId, ifModifiedSince, where, order, iDs, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp, summaryOnly, pageSize, searchTerm);
            //Assert.IsType<Invoices>(response);
        }

        /// <summary>
        /// Test GetItem
        /// </summary>
        [Fact]
        public void GetItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //int? unitdp = null;
            //var response = instance.GetItem(xeroTenantId, itemID, unitdp);
            //Assert.IsType<Items>(response);
        }

        /// <summary>
        /// Test GetItemHistory
        /// </summary>
        [Fact]
        public void GetItemHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //var response = instance.GetItemHistory(xeroTenantId, itemID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetItems
        /// </summary>
        [Fact]
        public void GetItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? unitdp = null;
            //var response = instance.GetItems(xeroTenantId, ifModifiedSince, where, order, unitdp);
            //Assert.IsType<Items>(response);
        }

        /// <summary>
        /// Test GetJournal
        /// </summary>
        [Fact]
        public void GetJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid journalID = null;
            //var response = instance.GetJournal(xeroTenantId, journalID);
            //Assert.IsType<Journals>(response);
        }

        /// <summary>
        /// Test GetJournalByNumber
        /// </summary>
        [Fact]
        public void GetJournalByNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //int journalNumber = null;
            //var response = instance.GetJournalByNumber(xeroTenantId, journalNumber);
            //Assert.IsType<Journals>(response);
        }

        /// <summary>
        /// Test GetJournals
        /// </summary>
        [Fact]
        public void GetJournalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //int? offset = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetJournals(xeroTenantId, ifModifiedSince, offset, paymentsOnly);
            //Assert.IsType<Journals>(response);
        }

        /// <summary>
        /// Test GetLinkedTransaction
        /// </summary>
        [Fact]
        public void GetLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid linkedTransactionID = null;
            //var response = instance.GetLinkedTransaction(xeroTenantId, linkedTransactionID);
            //Assert.IsType<LinkedTransactions>(response);
        }

        /// <summary>
        /// Test GetLinkedTransactions
        /// </summary>
        [Fact]
        public void GetLinkedTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //int? page = null;
            //Guid? linkedTransactionID = null;
            //Guid? sourceTransactionID = null;
            //Guid? contactID = null;
            //string? status = null;
            //Guid? targetTransactionID = null;
            //var response = instance.GetLinkedTransactions(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID);
            //Assert.IsType<LinkedTransactions>(response);
        }

        /// <summary>
        /// Test GetManualJournal
        /// </summary>
        [Fact]
        public void GetManualJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //var response = instance.GetManualJournal(xeroTenantId, manualJournalID);
            //Assert.IsType<ManualJournals>(response);
        }

        /// <summary>
        /// Test GetManualJournalAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetManualJournalAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetManualJournalAttachmentById
        /// </summary>
        [Fact]
        public void GetManualJournalAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetManualJournalAttachmentById(xeroTenantId, manualJournalID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetManualJournalAttachments
        /// </summary>
        [Fact]
        public void GetManualJournalAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //var response = instance.GetManualJournalAttachments(xeroTenantId, manualJournalID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetManualJournals
        /// </summary>
        [Fact]
        public void GetManualJournalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.GetManualJournals(xeroTenantId, ifModifiedSince, where, order, page, pageSize);
            //Assert.IsType<ManualJournals>(response);
        }

        /// <summary>
        /// Test GetManualJournalsHistory
        /// </summary>
        [Fact]
        public void GetManualJournalsHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //var response = instance.GetManualJournalsHistory(xeroTenantId, manualJournalID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetOnlineInvoice
        /// </summary>
        [Fact]
        public void GetOnlineInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //var response = instance.GetOnlineInvoice(xeroTenantId, invoiceID);
            //Assert.IsType<OnlineInvoices>(response);
        }

        /// <summary>
        /// Test GetOrganisationActions
        /// </summary>
        [Fact]
        public void GetOrganisationActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetOrganisationActions(xeroTenantId);
            //Assert.IsType<Actions>(response);
        }

        /// <summary>
        /// Test GetOrganisationCISSettings
        /// </summary>
        [Fact]
        public void GetOrganisationCISSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid organisationID = null;
            //var response = instance.GetOrganisationCISSettings(xeroTenantId, organisationID);
            //Assert.IsType<CISOrgSettings>(response);
        }

        /// <summary>
        /// Test GetOrganisations
        /// </summary>
        [Fact]
        public void GetOrganisationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetOrganisations(xeroTenantId);
            //Assert.IsType<Organisations>(response);
        }

        /// <summary>
        /// Test GetOverpayment
        /// </summary>
        [Fact]
        public void GetOverpaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //var response = instance.GetOverpayment(xeroTenantId, overpaymentID);
            //Assert.IsType<Overpayments>(response);
        }

        /// <summary>
        /// Test GetOverpaymentHistory
        /// </summary>
        [Fact]
        public void GetOverpaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid overpaymentID = null;
            //var response = instance.GetOverpaymentHistory(xeroTenantId, overpaymentID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetOverpayments
        /// </summary>
        [Fact]
        public void GetOverpaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? page = null;
            //int? unitdp = null;
            //int? pageSize = null;
            //var response = instance.GetOverpayments(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            //Assert.IsType<Overpayments>(response);
        }

        /// <summary>
        /// Test GetPayment
        /// </summary>
        [Fact]
        public void GetPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //var response = instance.GetPayment(xeroTenantId, paymentID);
            //Assert.IsType<Payments>(response);
        }

        /// <summary>
        /// Test GetPaymentHistory
        /// </summary>
        [Fact]
        public void GetPaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid paymentID = null;
            //var response = instance.GetPaymentHistory(xeroTenantId, paymentID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetPaymentServices
        /// </summary>
        [Fact]
        public void GetPaymentServicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetPaymentServices(xeroTenantId);
            //Assert.IsType<PaymentServices>(response);
        }

        /// <summary>
        /// Test GetPayments
        /// </summary>
        [Fact]
        public void GetPaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.GetPayments(xeroTenantId, ifModifiedSince, where, order, page, pageSize);
            //Assert.IsType<Payments>(response);
        }

        /// <summary>
        /// Test GetPrepayment
        /// </summary>
        [Fact]
        public void GetPrepaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //var response = instance.GetPrepayment(xeroTenantId, prepaymentID);
            //Assert.IsType<Prepayments>(response);
        }

        /// <summary>
        /// Test GetPrepaymentHistory
        /// </summary>
        [Fact]
        public void GetPrepaymentHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid prepaymentID = null;
            //var response = instance.GetPrepaymentHistory(xeroTenantId, prepaymentID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetPrepayments
        /// </summary>
        [Fact]
        public void GetPrepaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? page = null;
            //int? unitdp = null;
            //int? pageSize = null;
            //var response = instance.GetPrepayments(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            //Assert.IsType<Prepayments>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrder
        /// </summary>
        [Fact]
        public void GetPurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //var response = instance.GetPurchaseOrder(xeroTenantId, purchaseOrderID);
            //Assert.IsType<PurchaseOrders>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrderAsPdf
        /// </summary>
        [Fact]
        public void GetPurchaseOrderAsPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //var response = instance.GetPurchaseOrderAsPdf(xeroTenantId, purchaseOrderID);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrderAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetPurchaseOrderAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetPurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrderAttachmentById
        /// </summary>
        [Fact]
        public void GetPurchaseOrderAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetPurchaseOrderAttachmentById(xeroTenantId, purchaseOrderID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrderAttachments
        /// </summary>
        [Fact]
        public void GetPurchaseOrderAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //var response = instance.GetPurchaseOrderAttachments(xeroTenantId, purchaseOrderID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrderByNumber
        /// </summary>
        [Fact]
        public void GetPurchaseOrderByNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string purchaseOrderNumber = null;
            //var response = instance.GetPurchaseOrderByNumber(xeroTenantId, purchaseOrderNumber);
            //Assert.IsType<PurchaseOrders>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrderHistory
        /// </summary>
        [Fact]
        public void GetPurchaseOrderHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //var response = instance.GetPurchaseOrderHistory(xeroTenantId, purchaseOrderID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetPurchaseOrders
        /// </summary>
        [Fact]
        public void GetPurchaseOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? status = null;
            //string? dateFrom = null;
            //string? dateTo = null;
            //string? order = null;
            //int? page = null;
            //int? pageSize = null;
            //var response = instance.GetPurchaseOrders(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page, pageSize);
            //Assert.IsType<PurchaseOrders>(response);
        }

        /// <summary>
        /// Test GetQuote
        /// </summary>
        [Fact]
        public void GetQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //var response = instance.GetQuote(xeroTenantId, quoteID);
            //Assert.IsType<Quotes>(response);
        }

        /// <summary>
        /// Test GetQuoteAsPdf
        /// </summary>
        [Fact]
        public void GetQuoteAsPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //var response = instance.GetQuoteAsPdf(xeroTenantId, quoteID);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetQuoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetQuoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetQuoteAttachmentById
        /// </summary>
        [Fact]
        public void GetQuoteAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetQuoteAttachmentById(xeroTenantId, quoteID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetQuoteAttachments
        /// </summary>
        [Fact]
        public void GetQuoteAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //var response = instance.GetQuoteAttachments(xeroTenantId, quoteID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetQuoteHistory
        /// </summary>
        [Fact]
        public void GetQuoteHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //var response = instance.GetQuoteHistory(xeroTenantId, quoteID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetQuotes
        /// </summary>
        [Fact]
        public void GetQuotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //DateOnly? dateFrom = null;
            //DateOnly? dateTo = null;
            //DateOnly? expiryDateFrom = null;
            //DateOnly? expiryDateTo = null;
            //Guid? contactID = null;
            //string? status = null;
            //int? page = null;
            //string? order = null;
            //string? quoteNumber = null;
            //var response = instance.GetQuotes(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber);
            //Assert.IsType<Quotes>(response);
        }

        /// <summary>
        /// Test GetReceipt
        /// </summary>
        [Fact]
        public void GetReceiptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //int? unitdp = null;
            //var response = instance.GetReceipt(xeroTenantId, receiptID, unitdp);
            //Assert.IsType<Receipts>(response);
        }

        /// <summary>
        /// Test GetReceiptAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetReceiptAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetReceiptAttachmentById
        /// </summary>
        [Fact]
        public void GetReceiptAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetReceiptAttachmentById(xeroTenantId, receiptID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetReceiptAttachments
        /// </summary>
        [Fact]
        public void GetReceiptAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //var response = instance.GetReceiptAttachments(xeroTenantId, receiptID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetReceiptHistory
        /// </summary>
        [Fact]
        public void GetReceiptHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //var response = instance.GetReceiptHistory(xeroTenantId, receiptID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetReceipts
        /// </summary>
        [Fact]
        public void GetReceiptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //int? unitdp = null;
            //var response = instance.GetReceipts(xeroTenantId, ifModifiedSince, where, order, unitdp);
            //Assert.IsType<Receipts>(response);
        }

        /// <summary>
        /// Test GetRepeatingInvoice
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //var response = instance.GetRepeatingInvoice(xeroTenantId, repeatingInvoiceID);
            //Assert.IsType<RepeatingInvoices>(response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //string fileName = null;
            //string contentType = null;
            //var response = instance.GetRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceAttachmentById
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceAttachmentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //Guid attachmentID = null;
            //string contentType = null;
            //var response = instance.GetRepeatingInvoiceAttachmentById(xeroTenantId, repeatingInvoiceID, attachmentID, contentType);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceAttachments
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //var response = instance.GetRepeatingInvoiceAttachments(xeroTenantId, repeatingInvoiceID);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test GetRepeatingInvoiceHistory
        /// </summary>
        [Fact]
        public void GetRepeatingInvoiceHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //var response = instance.GetRepeatingInvoiceHistory(xeroTenantId, repeatingInvoiceID);
            //Assert.IsType<HistoryRecords>(response);
        }

        /// <summary>
        /// Test GetRepeatingInvoices
        /// </summary>
        [Fact]
        public void GetRepeatingInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetRepeatingInvoices(xeroTenantId, where, order);
            //Assert.IsType<RepeatingInvoices>(response);
        }

        /// <summary>
        /// Test GetReportAgedPayablesByContact
        /// </summary>
        [Fact]
        public void GetReportAgedPayablesByContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactId = null;
            //DateOnly? date = null;
            //DateOnly? fromDate = null;
            //DateOnly? toDate = null;
            //var response = instance.GetReportAgedPayablesByContact(xeroTenantId, contactId, date, fromDate, toDate);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportAgedReceivablesByContact
        /// </summary>
        [Fact]
        public void GetReportAgedReceivablesByContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactId = null;
            //DateOnly? date = null;
            //DateOnly? fromDate = null;
            //DateOnly? toDate = null;
            //var response = instance.GetReportAgedReceivablesByContact(xeroTenantId, contactId, date, fromDate, toDate);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportBalanceSheet
        /// </summary>
        [Fact]
        public void GetReportBalanceSheetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateOnly? date = null;
            //int? periods = null;
            //string? timeframe = null;
            //string? trackingOptionID1 = null;
            //string? trackingOptionID2 = null;
            //bool? standardLayout = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetReportBalanceSheet(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportBankSummary
        /// </summary>
        [Fact]
        public void GetReportBankSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateOnly? fromDate = null;
            //DateOnly? toDate = null;
            //var response = instance.GetReportBankSummary(xeroTenantId, fromDate, toDate);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportBudgetSummary
        /// </summary>
        [Fact]
        public void GetReportBudgetSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateOnly? date = null;
            //int? periods = null;
            //int? timeframe = null;
            //var response = instance.GetReportBudgetSummary(xeroTenantId, date, periods, timeframe);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportExecutiveSummary
        /// </summary>
        [Fact]
        public void GetReportExecutiveSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateOnly? date = null;
            //var response = instance.GetReportExecutiveSummary(xeroTenantId, date);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportFromId
        /// </summary>
        [Fact]
        public void GetReportFromIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string reportID = null;
            //var response = instance.GetReportFromId(xeroTenantId, reportID);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportProfitAndLoss
        /// </summary>
        [Fact]
        public void GetReportProfitAndLossTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateOnly? fromDate = null;
            //DateOnly? toDate = null;
            //int? periods = null;
            //string? timeframe = null;
            //string? trackingCategoryID = null;
            //string? trackingCategoryID2 = null;
            //string? trackingOptionID = null;
            //string? trackingOptionID2 = null;
            //bool? standardLayout = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetReportProfitAndLoss(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportTenNinetyNine
        /// </summary>
        [Fact]
        public void GetReportTenNinetyNineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string? reportYear = null;
            //var response = instance.GetReportTenNinetyNine(xeroTenantId, reportYear);
            //Assert.IsType<Reports>(response);
        }

        /// <summary>
        /// Test GetReportTrialBalance
        /// </summary>
        [Fact]
        public void GetReportTrialBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateOnly? date = null;
            //bool? paymentsOnly = null;
            //var response = instance.GetReportTrialBalance(xeroTenantId, date, paymentsOnly);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetReportsList
        /// </summary>
        [Fact]
        public void GetReportsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //var response = instance.GetReportsList(xeroTenantId);
            //Assert.IsType<ReportWithRows>(response);
        }

        /// <summary>
        /// Test GetTaxRateByTaxType
        /// </summary>
        [Fact]
        public void GetTaxRateByTaxTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string taxType = null;
            //var response = instance.GetTaxRateByTaxType(xeroTenantId, taxType);
            //Assert.IsType<TaxRates>(response);
        }

        /// <summary>
        /// Test GetTaxRates
        /// </summary>
        [Fact]
        public void GetTaxRatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetTaxRates(xeroTenantId, where, order);
            //Assert.IsType<TaxRates>(response);
        }

        /// <summary>
        /// Test GetTrackingCategories
        /// </summary>
        [Fact]
        public void GetTrackingCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //string? where = null;
            //string? order = null;
            //bool? includeArchived = null;
            //var response = instance.GetTrackingCategories(xeroTenantId, where, order, includeArchived);
            //Assert.IsType<TrackingCategories>(response);
        }

        /// <summary>
        /// Test GetTrackingCategory
        /// </summary>
        [Fact]
        public void GetTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //var response = instance.GetTrackingCategory(xeroTenantId, trackingCategoryID);
            //Assert.IsType<TrackingCategories>(response);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid userID = null;
            //var response = instance.GetUser(xeroTenantId, userID);
            //Assert.IsType<Users>(response);
        }

        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Fact]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //DateTime? ifModifiedSince = null;
            //string? where = null;
            //string? order = null;
            //var response = instance.GetUsers(xeroTenantId, ifModifiedSince, where, order);
            //Assert.IsType<Users>(response);
        }

        /// <summary>
        /// Test PostSetup
        /// </summary>
        [Fact]
        public void PostSetupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Setup setup = null;
            //string? idempotencyKey = null;
            //var response = instance.PostSetup(xeroTenantId, setup, idempotencyKey);
            //Assert.IsType<ImportSummaryObject>(response);
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //Accounts accounts = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateAccount(xeroTenantId, accountID, accounts, idempotencyKey);
            //Assert.IsType<Accounts>(response);
        }

        /// <summary>
        /// Test UpdateAccountAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateAccountAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid accountID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateAccountAttachmentByFileName(xeroTenantId, accountID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateBankTransaction
        /// </summary>
        [Fact]
        public void UpdateBankTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //BankTransactions bankTransactions = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateBankTransaction(xeroTenantId, bankTransactionID, bankTransactions, unitdp, idempotencyKey);
            //Assert.IsType<BankTransactions>(response);
        }

        /// <summary>
        /// Test UpdateBankTransactionAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateBankTransactionAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransactionID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateBankTransactionAttachmentByFileName(xeroTenantId, bankTransactionID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateBankTransferAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateBankTransferAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid bankTransferID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateBankTransferAttachmentByFileName(xeroTenantId, bankTransferID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateContact
        /// </summary>
        [Fact]
        public void UpdateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //Contacts contacts = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateContact(xeroTenantId, contactID, contacts, idempotencyKey);
            //Assert.IsType<Contacts>(response);
        }

        /// <summary>
        /// Test UpdateContactAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateContactAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateContactAttachmentByFileName(xeroTenantId, contactID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateContactGroup
        /// </summary>
        [Fact]
        public void UpdateContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid contactGroupID = null;
            //ContactGroups contactGroups = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateContactGroup(xeroTenantId, contactGroupID, contactGroups, idempotencyKey);
            //Assert.IsType<ContactGroups>(response);
        }

        /// <summary>
        /// Test UpdateCreditNote
        /// </summary>
        [Fact]
        public void UpdateCreditNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //CreditNotes creditNotes = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateCreditNote(xeroTenantId, creditNoteID, creditNotes, unitdp, idempotencyKey);
            //Assert.IsType<CreditNotes>(response);
        }

        /// <summary>
        /// Test UpdateCreditNoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateCreditNoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid creditNoteID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateCreditNoteAttachmentByFileName(xeroTenantId, creditNoteID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateExpenseClaim
        /// </summary>
        [Fact]
        public void UpdateExpenseClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid expenseClaimID = null;
            //ExpenseClaims expenseClaims = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateExpenseClaim(xeroTenantId, expenseClaimID, expenseClaims, idempotencyKey);
            //Assert.IsType<ExpenseClaims>(response);
        }

        /// <summary>
        /// Test UpdateInvoice
        /// </summary>
        [Fact]
        public void UpdateInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //Invoices invoices = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateInvoice(xeroTenantId, invoiceID, invoices, unitdp, idempotencyKey);
            //Assert.IsType<Invoices>(response);
        }

        /// <summary>
        /// Test UpdateInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid invoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateInvoiceAttachmentByFileName(xeroTenantId, invoiceID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateItem
        /// </summary>
        [Fact]
        public void UpdateItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid itemID = null;
            //Items items = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateItem(xeroTenantId, itemID, items, unitdp, idempotencyKey);
            //Assert.IsType<Items>(response);
        }

        /// <summary>
        /// Test UpdateLinkedTransaction
        /// </summary>
        [Fact]
        public void UpdateLinkedTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid linkedTransactionID = null;
            //LinkedTransactions linkedTransactions = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateLinkedTransaction(xeroTenantId, linkedTransactionID, linkedTransactions, idempotencyKey);
            //Assert.IsType<LinkedTransactions>(response);
        }

        /// <summary>
        /// Test UpdateManualJournal
        /// </summary>
        [Fact]
        public void UpdateManualJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //ManualJournals manualJournals = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateManualJournal(xeroTenantId, manualJournalID, manualJournals, idempotencyKey);
            //Assert.IsType<ManualJournals>(response);
        }

        /// <summary>
        /// Test UpdateManualJournalAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateManualJournalAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid manualJournalID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateManualJournalAttachmentByFileName(xeroTenantId, manualJournalID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateBankTransactions
        /// </summary>
        [Fact]
        public void UpdateOrCreateBankTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //BankTransactions bankTransactions = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateBankTransactions(xeroTenantId, bankTransactions, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<BankTransactions>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateContacts
        /// </summary>
        [Fact]
        public void UpdateOrCreateContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Contacts contacts = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateContacts(xeroTenantId, contacts, summarizeErrors, idempotencyKey);
            //Assert.IsType<Contacts>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateCreditNotes
        /// </summary>
        [Fact]
        public void UpdateOrCreateCreditNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //CreditNotes creditNotes = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateCreditNotes(xeroTenantId, creditNotes, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<CreditNotes>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateEmployees
        /// </summary>
        [Fact]
        public void UpdateOrCreateEmployeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Employees employees = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateEmployees(xeroTenantId, employees, summarizeErrors, idempotencyKey);
            //Assert.IsType<Employees>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateInvoices
        /// </summary>
        [Fact]
        public void UpdateOrCreateInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Invoices invoices = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateInvoices(xeroTenantId, invoices, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<Invoices>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateItems
        /// </summary>
        [Fact]
        public void UpdateOrCreateItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Items items = null;
            //bool? summarizeErrors = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateItems(xeroTenantId, items, summarizeErrors, unitdp, idempotencyKey);
            //Assert.IsType<Items>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateManualJournals
        /// </summary>
        [Fact]
        public void UpdateOrCreateManualJournalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //ManualJournals manualJournals = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateManualJournals(xeroTenantId, manualJournals, summarizeErrors, idempotencyKey);
            //Assert.IsType<ManualJournals>(response);
        }

        /// <summary>
        /// Test UpdateOrCreatePurchaseOrders
        /// </summary>
        [Fact]
        public void UpdateOrCreatePurchaseOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //PurchaseOrders purchaseOrders = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreatePurchaseOrders(xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey);
            //Assert.IsType<PurchaseOrders>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateQuotes
        /// </summary>
        [Fact]
        public void UpdateOrCreateQuotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Quotes quotes = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateQuotes(xeroTenantId, quotes, summarizeErrors, idempotencyKey);
            //Assert.IsType<Quotes>(response);
        }

        /// <summary>
        /// Test UpdateOrCreateRepeatingInvoices
        /// </summary>
        [Fact]
        public void UpdateOrCreateRepeatingInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //RepeatingInvoices repeatingInvoices = null;
            //bool? summarizeErrors = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateOrCreateRepeatingInvoices(xeroTenantId, repeatingInvoices, summarizeErrors, idempotencyKey);
            //Assert.IsType<RepeatingInvoices>(response);
        }

        /// <summary>
        /// Test UpdatePurchaseOrder
        /// </summary>
        [Fact]
        public void UpdatePurchaseOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //PurchaseOrders purchaseOrders = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdatePurchaseOrder(xeroTenantId, purchaseOrderID, purchaseOrders, idempotencyKey);
            //Assert.IsType<PurchaseOrders>(response);
        }

        /// <summary>
        /// Test UpdatePurchaseOrderAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdatePurchaseOrderAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid purchaseOrderID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdatePurchaseOrderAttachmentByFileName(xeroTenantId, purchaseOrderID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateQuote
        /// </summary>
        [Fact]
        public void UpdateQuoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //Quotes quotes = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateQuote(xeroTenantId, quoteID, quotes, idempotencyKey);
            //Assert.IsType<Quotes>(response);
        }

        /// <summary>
        /// Test UpdateQuoteAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateQuoteAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid quoteID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateQuoteAttachmentByFileName(xeroTenantId, quoteID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateReceipt
        /// </summary>
        [Fact]
        public void UpdateReceiptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //Receipts receipts = null;
            //int? unitdp = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateReceipt(xeroTenantId, receiptID, receipts, unitdp, idempotencyKey);
            //Assert.IsType<Receipts>(response);
        }

        /// <summary>
        /// Test UpdateReceiptAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateReceiptAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid receiptID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateReceiptAttachmentByFileName(xeroTenantId, receiptID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateRepeatingInvoice
        /// </summary>
        [Fact]
        public void UpdateRepeatingInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //RepeatingInvoices repeatingInvoices = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateRepeatingInvoice(xeroTenantId, repeatingInvoiceID, repeatingInvoices, idempotencyKey);
            //Assert.IsType<RepeatingInvoices>(response);
        }

        /// <summary>
        /// Test UpdateRepeatingInvoiceAttachmentByFileName
        /// </summary>
        [Fact]
        public void UpdateRepeatingInvoiceAttachmentByFileNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid repeatingInvoiceID = null;
            //string fileName = null;
            //byte[] body = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateRepeatingInvoiceAttachmentByFileName(xeroTenantId, repeatingInvoiceID, fileName, body, idempotencyKey);
            //Assert.IsType<Attachments>(response);
        }

        /// <summary>
        /// Test UpdateTaxRate
        /// </summary>
        [Fact]
        public void UpdateTaxRateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //TaxRates taxRates = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateTaxRate(xeroTenantId, taxRates, idempotencyKey);
            //Assert.IsType<TaxRates>(response);
        }

        /// <summary>
        /// Test UpdateTrackingCategory
        /// </summary>
        [Fact]
        public void UpdateTrackingCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //TrackingCategory trackingCategory = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateTrackingCategory(xeroTenantId, trackingCategoryID, trackingCategory, idempotencyKey);
            //Assert.IsType<TrackingCategories>(response);
        }

        /// <summary>
        /// Test UpdateTrackingOptions
        /// </summary>
        [Fact]
        public void UpdateTrackingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xeroTenantId = null;
            //Guid trackingCategoryID = null;
            //Guid trackingOptionID = null;
            //TrackingOption trackingOption = null;
            //string? idempotencyKey = null;
            //var response = instance.UpdateTrackingOptions(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, idempotencyKey);
            //Assert.IsType<TrackingOptions>(response);
        }
    }
}
