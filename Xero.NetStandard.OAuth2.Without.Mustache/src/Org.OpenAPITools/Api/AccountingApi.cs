/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new chart of accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        Accounts CreateAccount(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a new chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        ApiResponse<Accounts> CreateAccountWithHttpInfo(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates an attachment on a specific account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateAccountAttachmentByFileName(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates an attachment on a specific account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateAccountAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateBankTransactionAttachmentByFileName(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateBankTransactionAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific bank transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateBankTransactionHistoryRecord(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateBankTransactionHistoryRecordWithHttpInfo(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or more spent or received money transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        BankTransactions CreateBankTransactions(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or more spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        ApiResponse<BankTransactions> CreateBankTransactionsWithHttpInfo(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a bank transfer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransfers</returns>
        BankTransfers CreateBankTransfer(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransfers</returns>
        ApiResponse<BankTransfers> CreateBankTransferWithHttpInfo(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateBankTransferAttachmentByFileName(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateBankTransferAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific bank transfer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateBankTransferHistoryRecord(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateBankTransferHistoryRecordWithHttpInfo(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or many batch payments for invoices
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        BatchPayments CreateBatchPayment(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or many batch payments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        ApiResponse<BatchPayments> CreateBatchPaymentWithHttpInfo(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific batch payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateBatchPaymentHistoryRecord(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific batch payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateBatchPaymentHistoryRecordWithHttpInfo(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a new custom payment service for a specific branding theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        PaymentServices CreateBrandingThemePaymentServices(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a new custom payment service for a specific branding theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        ApiResponse<PaymentServices> CreateBrandingThemePaymentServicesWithHttpInfo(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateContactAttachmentByFileName(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateContactAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a contact group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        ContactGroups CreateContactGroup(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        ApiResponse<ContactGroups> CreateContactGroupWithHttpInfo(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates contacts to a specific contact group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        Contacts CreateContactGroupContacts(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates contacts to a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> CreateContactGroupContactsWithHttpInfo(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a new history record for a specific contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateContactHistory(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a new history record for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateContactHistoryWithHttpInfo(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        Contacts CreateContacts(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> CreateContactsWithHttpInfo(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates allocation for a specific credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocations</returns>
        Allocations CreateCreditNoteAllocation(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates allocation for a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocations</returns>
        ApiResponse<Allocations> CreateCreditNoteAllocationWithHttpInfo(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates an attachment for a specific credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateCreditNoteAttachmentByFileName(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates an attachment for a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateCreditNoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateCreditNoteHistory(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateCreditNoteHistoryWithHttpInfo(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a new credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        CreditNotes CreateCreditNotes(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a new credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        ApiResponse<CreditNotes> CreateCreditNotesWithHttpInfo(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a new currency for a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Currencies</returns>
        Currencies CreateCurrency(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create a new currency for a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Currencies</returns>
        ApiResponse<Currencies> CreateCurrencyWithHttpInfo(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates new employees used in Xero payrun
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        Employees CreateEmployees(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        ApiResponse<Employees> CreateEmployeesWithHttpInfo(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific expense claim
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateExpenseClaimHistory(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateExpenseClaimHistoryWithHttpInfo(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates expense claims
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        ExpenseClaims CreateExpenseClaims(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        ApiResponse<ExpenseClaims> CreateExpenseClaimsWithHttpInfo(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateInvoiceAttachmentByFileName(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateInvoiceHistory(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or more sales invoices or purchase bills
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        Invoices CreateInvoices(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or more sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        ApiResponse<Invoices> CreateInvoicesWithHttpInfo(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateItemHistory(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateItemHistoryWithHttpInfo(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or more items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        Items CreateItems(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or more items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        ApiResponse<Items> CreateItemsWithHttpInfo(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates linked transactions (billable expenses)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        LinkedTransactions CreateLinkedTransaction(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        ApiResponse<LinkedTransactions> CreateLinkedTransactionWithHttpInfo(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateManualJournalAttachmentByFileName(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateManualJournalAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific manual journal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateManualJournalHistoryRecord(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateManualJournalHistoryRecordWithHttpInfo(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or more manual journals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        ManualJournals CreateManualJournals(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or more manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        ApiResponse<ManualJournals> CreateManualJournalsWithHttpInfo(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a single allocation for a specific overpayment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocations</returns>
        Allocations CreateOverpaymentAllocations(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a single allocation for a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocations</returns>
        ApiResponse<Allocations> CreateOverpaymentAllocationsWithHttpInfo(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific overpayment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateOverpaymentHistory(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateOverpaymentHistoryWithHttpInfo(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a single payment for invoice or credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        Payments CreatePayment(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a single payment for invoice or credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        ApiResponse<Payments> CreatePaymentWithHttpInfo(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreatePaymentHistory(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreatePaymentHistoryWithHttpInfo(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a payment service
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        PaymentServices CreatePaymentService(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a payment service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        ApiResponse<PaymentServices> CreatePaymentServiceWithHttpInfo(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates multiple payments for invoices or credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        Payments CreatePayments(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates multiple payments for invoices or credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        ApiResponse<Payments> CreatePaymentsWithHttpInfo(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Allows you to create an Allocation for prepayments
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocations</returns>
        Allocations CreatePrepaymentAllocations(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Allows you to create an Allocation for prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocations</returns>
        ApiResponse<Allocations> CreatePrepaymentAllocationsWithHttpInfo(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific prepayment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreatePrepaymentHistory(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreatePrepaymentHistoryWithHttpInfo(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates attachment for a specific purchase order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreatePurchaseOrderAttachmentByFileName(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates attachment for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreatePurchaseOrderAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific purchase orders
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreatePurchaseOrderHistory(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreatePurchaseOrderHistoryWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or more purchase orders
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        PurchaseOrders CreatePurchaseOrders(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or more purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        ApiResponse<PurchaseOrders> CreatePurchaseOrdersWithHttpInfo(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates attachment for a specific quote
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateQuoteAttachmentByFileName(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates attachment for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateQuoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific quote
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateQuoteHistory(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateQuoteHistoryWithHttpInfo(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create one or more quotes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        Quotes CreateQuotes(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create one or more quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        ApiResponse<Quotes> CreateQuotesWithHttpInfo(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates draft expense claim receipts for any user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        Receipts CreateReceipt(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        ApiResponse<Receipts> CreateReceiptWithHttpInfo(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateReceiptAttachmentByFileName(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateReceiptAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a history record for a specific receipt
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateReceiptHistory(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a history record for a specific receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateReceiptHistoryWithHttpInfo(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments CreateRepeatingInvoiceAttachmentByFileName(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> CreateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a  history record for a specific repeating invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords CreateRepeatingInvoiceHistory(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a  history record for a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> CreateRepeatingInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or more repeating invoice templates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        RepeatingInvoices CreateRepeatingInvoices(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or more repeating invoice templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        ApiResponse<RepeatingInvoices> CreateRepeatingInvoicesWithHttpInfo(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates one or more tax rates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        TaxRates CreateTaxRates(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates one or more tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        ApiResponse<TaxRates> CreateTaxRatesWithHttpInfo(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create tracking categories
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        TrackingCategories CreateTrackingCategory(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        ApiResponse<TrackingCategories> CreateTrackingCategoryWithHttpInfo(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates options for a specific tracking category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingOptions</returns>
        TrackingOptions CreateTrackingOptions(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates options for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingOptions</returns>
        ApiResponse<TrackingOptions> CreateTrackingOptionsWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes a chart of accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        Accounts DeleteAccount(string xeroTenantId, Guid accountID, int operationIndex = 0);

        /// <summary>
        /// Deletes a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        ApiResponse<Accounts> DeleteAccountWithHttpInfo(string xeroTenantId, Guid accountID, int operationIndex = 0);
        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        BatchPayments DeleteBatchPayment(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        ApiResponse<BatchPayments> DeleteBatchPaymentWithHttpInfo(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        BatchPayments DeleteBatchPaymentByUrlParam(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        ApiResponse<BatchPayments> DeleteBatchPaymentByUrlParamWithHttpInfo(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteContactGroupContact(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0);

        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactGroupContactWithHttpInfo(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0);
        /// <summary>
        /// Deletes all contacts from a specific contact group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteContactGroupContacts(string xeroTenantId, Guid contactGroupID, int operationIndex = 0);

        /// <summary>
        /// Deletes all contacts from a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactGroupContactsWithHttpInfo(string xeroTenantId, Guid contactGroupID, int operationIndex = 0);
        /// <summary>
        /// Deletes an Allocation from a Credit Note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocation</returns>
        Allocation DeleteCreditNoteAllocations(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0);

        /// <summary>
        /// Deletes an Allocation from a Credit Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> DeleteCreditNoteAllocationsWithHttpInfo(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0);
        /// <summary>
        /// Deletes a specific item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteItem(string xeroTenantId, Guid itemID, int operationIndex = 0);

        /// <summary>
        /// Deletes a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemWithHttpInfo(string xeroTenantId, Guid itemID, int operationIndex = 0);
        /// <summary>
        /// Deletes a specific linked transactions (billable expenses)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLinkedTransaction(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0);

        /// <summary>
        /// Deletes a specific linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLinkedTransactionWithHttpInfo(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0);
        /// <summary>
        /// Deletes an Allocation from an overpayment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocation</returns>
        Allocation DeleteOverpaymentAllocations(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0);

        /// <summary>
        /// Deletes an Allocation from an overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> DeleteOverpaymentAllocationsWithHttpInfo(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0);
        /// <summary>
        /// Updates a specific payment for invoices and credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        Payments DeletePayment(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        ApiResponse<Payments> DeletePaymentWithHttpInfo(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes an Allocation from a Prepayment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocation</returns>
        Allocation DeletePrepaymentAllocations(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0);

        /// <summary>
        /// Deletes an Allocation from a Prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> DeletePrepaymentAllocationsWithHttpInfo(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0);
        /// <summary>
        /// Deletes a specific tracking category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        TrackingCategories DeleteTrackingCategory(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0);

        /// <summary>
        /// Deletes a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        ApiResponse<TrackingCategories> DeleteTrackingCategoryWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0);
        /// <summary>
        /// Deletes a specific option for a specific tracking category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingOptions</returns>
        TrackingOptions DeleteTrackingOptions(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0);

        /// <summary>
        /// Deletes a specific option for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingOptions</returns>
        ApiResponse<TrackingOptions> DeleteTrackingOptionsWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0);
        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EmailInvoice(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EmailInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        Accounts GetAccount(string xeroTenantId, Guid accountID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        ApiResponse<Accounts> GetAccountWithHttpInfo(string xeroTenantId, Guid accountID, int operationIndex = 0);
        /// <summary>
        /// Retrieves an attachment for a specific account by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetAccountAttachmentByFileName(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves an attachment for a specific account by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetAccountAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetAccountAttachmentById(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetAccountAttachmentByIdWithHttpInfo(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetAccountAttachments(string xeroTenantId, Guid accountID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetAccountAttachmentsWithHttpInfo(string xeroTenantId, Guid accountID, int operationIndex = 0);
        /// <summary>
        /// Retrieves the full chart of accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        Accounts GetAccounts(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves the full chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        ApiResponse<Accounts> GetAccountsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        BankTransactions GetBankTransaction(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        ApiResponse<BankTransactions> GetBankTransactionWithHttpInfo(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetBankTransactionAttachmentByFileName(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetBankTransactionAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetBankTransactionAttachmentById(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetBankTransactionAttachmentByIdWithHttpInfo(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves any attachments from a specific bank transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetBankTransactionAttachments(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0);

        /// <summary>
        /// Retrieves any attachments from a specific bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetBankTransactionAttachmentsWithHttpInfo(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0);
        /// <summary>
        /// Retrieves any spent or received money transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        BankTransactions GetBankTransactions(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves any spent or received money transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        ApiResponse<BankTransactions> GetBankTransactionsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetBankTransactionsHistory(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetBankTransactionsHistoryWithHttpInfo(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0);
        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransfers</returns>
        BankTransfers GetBankTransfer(string xeroTenantId, Guid bankTransferID, int operationIndex = 0);

        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransfers</returns>
        ApiResponse<BankTransfers> GetBankTransferWithHttpInfo(string xeroTenantId, Guid bankTransferID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetBankTransferAttachmentByFileName(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetBankTransferAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetBankTransferAttachmentById(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetBankTransferAttachmentByIdWithHttpInfo(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments from a specific bank transfer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetBankTransferAttachments(string xeroTenantId, Guid bankTransferID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments from a specific bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetBankTransferAttachmentsWithHttpInfo(string xeroTenantId, Guid bankTransferID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetBankTransferHistory(string xeroTenantId, Guid bankTransferID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetBankTransferHistoryWithHttpInfo(string xeroTenantId, Guid bankTransferID, int operationIndex = 0);
        /// <summary>
        /// Retrieves all bank transfers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransfers</returns>
        BankTransfers GetBankTransfers(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves all bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransfers</returns>
        ApiResponse<BankTransfers> GetBankTransfersWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        BatchPayments GetBatchPayment(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        ApiResponse<BatchPayments> GetBatchPaymentWithHttpInfo(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history from a specific batch payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetBatchPaymentHistory(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history from a specific batch payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetBatchPaymentHistoryWithHttpInfo(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves either one or many batch payments for invoices
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        BatchPayments GetBatchPayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves either one or many batch payments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        ApiResponse<BatchPayments> GetBatchPaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrandingThemes</returns>
        BrandingThemes GetBrandingTheme(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrandingThemes</returns>
        ApiResponse<BrandingThemes> GetBrandingThemeWithHttpInfo(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0);
        /// <summary>
        /// Retrieves the payment services for a specific branding theme
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        PaymentServices GetBrandingThemePaymentServices(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0);

        /// <summary>
        /// Retrieves the payment services for a specific branding theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        ApiResponse<PaymentServices> GetBrandingThemePaymentServicesWithHttpInfo(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0);
        /// <summary>
        /// Retrieves all the branding themes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrandingThemes</returns>
        BrandingThemes GetBrandingThemes(string xeroTenantId, int operationIndex = 0);

        /// <summary>
        /// Retrieves all the branding themes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrandingThemes</returns>
        ApiResponse<BrandingThemes> GetBrandingThemesWithHttpInfo(string xeroTenantId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific budget, which includes budget lines
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Budgets</returns>
        Budgets GetBudget(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific budget, which includes budget lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Budgets</returns>
        ApiResponse<Budgets> GetBudgetWithHttpInfo(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0);
        /// <summary>
        /// Retrieve a list of budgets
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Budgets</returns>
        Budgets GetBudgets(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0);

        /// <summary>
        /// Retrieve a list of budgets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Budgets</returns>
        ApiResponse<Budgets> GetBudgetsWithHttpInfo(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        Contacts GetContact(string xeroTenantId, Guid contactID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> GetContactWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetContactAttachmentByFileName(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetContactAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetContactAttachmentById(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetContactAttachmentByIdWithHttpInfo(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetContactAttachments(string xeroTenantId, Guid contactID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetContactAttachmentsWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        Contacts GetContactByContactNumber(string xeroTenantId, string contactNumber, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> GetContactByContactNumberWithHttpInfo(string xeroTenantId, string contactNumber, int operationIndex = 0);
        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CISSettings</returns>
        CISSettings GetContactCISSettings(string xeroTenantId, Guid contactID, int operationIndex = 0);

        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CISSettings</returns>
        ApiResponse<CISSettings> GetContactCISSettingsWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        ContactGroups GetContactGroup(string xeroTenantId, Guid contactGroupID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        ApiResponse<ContactGroups> GetContactGroupWithHttpInfo(string xeroTenantId, Guid contactGroupID, int operationIndex = 0);
        /// <summary>
        /// Retrieves the contact Id and name of each contact group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        ContactGroups GetContactGroups(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves the contact Id and name of each contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        ApiResponse<ContactGroups> GetContactGroupsWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves history records for a specific contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetContactHistory(string xeroTenantId, Guid contactID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history records for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetContactHistoryWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0);
        /// <summary>
        /// Retrieves all contacts in a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        Contacts GetContacts(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves all contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> GetContactsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        CreditNotes GetCreditNote(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        ApiResponse<CreditNotes> GetCreditNoteWithHttpInfo(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves credit notes as PDF files
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCreditNoteAsPdf(string xeroTenantId, Guid creditNoteID, int operationIndex = 0);

        /// <summary>
        /// Retrieves credit notes as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCreditNoteAsPdfWithHttpInfo(string xeroTenantId, Guid creditNoteID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCreditNoteAttachmentByFileName(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCreditNoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCreditNoteAttachmentById(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCreditNoteAttachmentByIdWithHttpInfo(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments for a specific credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetCreditNoteAttachments(string xeroTenantId, Guid creditNoteID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments for a specific credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetCreditNoteAttachmentsWithHttpInfo(string xeroTenantId, Guid creditNoteID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetCreditNoteHistory(string xeroTenantId, Guid creditNoteID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetCreditNoteHistoryWithHttpInfo(string xeroTenantId, Guid creditNoteID, int operationIndex = 0);
        /// <summary>
        /// Retrieves any credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        CreditNotes GetCreditNotes(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves any credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        ApiResponse<CreditNotes> GetCreditNotesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves currencies for your Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Currencies</returns>
        Currencies GetCurrencies(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves currencies for your Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Currencies</returns>
        ApiResponse<Currencies> GetCurrenciesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        Employees GetEmployee(string xeroTenantId, Guid employeeID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        ApiResponse<Employees> GetEmployeeWithHttpInfo(string xeroTenantId, Guid employeeID, int operationIndex = 0);
        /// <summary>
        /// Retrieves employees used in Xero payrun
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        Employees GetEmployees(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        ApiResponse<Employees> GetEmployeesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        ExpenseClaims GetExpenseClaim(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        ApiResponse<ExpenseClaims> GetExpenseClaimWithHttpInfo(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history records of a specific expense claim
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetExpenseClaimHistory(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history records of a specific expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetExpenseClaimHistoryWithHttpInfo(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0);
        /// <summary>
        /// Retrieves expense claims
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        ExpenseClaims GetExpenseClaims(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        ApiResponse<ExpenseClaims> GetExpenseClaimsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        Invoices GetInvoice(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        ApiResponse<Invoices> GetInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetInvoiceAsPdf(string xeroTenantId, Guid invoiceID, int operationIndex = 0);

        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetInvoiceAsPdfWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0);
        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetInvoiceAttachmentByFileName(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetInvoiceAttachmentById(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetInvoiceAttachmentByIdWithHttpInfo(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetInvoiceAttachments(string xeroTenantId, Guid invoiceID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetInvoiceAttachmentsWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history records for a specific invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetInvoiceHistory(string xeroTenantId, Guid invoiceID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history records for a specific invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0);
        /// <summary>
        /// Retrieves invoice reminder settings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceReminders</returns>
        InvoiceReminders GetInvoiceReminders(string xeroTenantId, int operationIndex = 0);

        /// <summary>
        /// Retrieves invoice reminder settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceReminders</returns>
        ApiResponse<InvoiceReminders> GetInvoiceRemindersWithHttpInfo(string xeroTenantId, int operationIndex = 0);
        /// <summary>
        /// Retrieves sales invoices or purchase bills
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        Invoices GetInvoices(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        ApiResponse<Invoices> GetInvoicesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific item using a unique item Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        Items GetItem(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific item using a unique item Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        ApiResponse<Items> GetItemWithHttpInfo(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves history for a specific item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetItemHistory(string xeroTenantId, Guid itemID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history for a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetItemHistoryWithHttpInfo(string xeroTenantId, Guid itemID, int operationIndex = 0);
        /// <summary>
        /// Retrieves items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        Items GetItems(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        ApiResponse<Items> GetItemsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific journal using a unique journal Id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Journals</returns>
        Journals GetJournal(string xeroTenantId, Guid journalID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific journal using a unique journal Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Journals</returns>
        ApiResponse<Journals> GetJournalWithHttpInfo(string xeroTenantId, Guid journalID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific journal using a unique journal number.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Journals</returns>
        Journals GetJournalByNumber(string xeroTenantId, int journalNumber, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific journal using a unique journal number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Journals</returns>
        ApiResponse<Journals> GetJournalByNumberWithHttpInfo(string xeroTenantId, int journalNumber, int operationIndex = 0);
        /// <summary>
        /// Retrieves journals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Journals</returns>
        Journals GetJournals(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Journals</returns>
        ApiResponse<Journals> GetJournalsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        LinkedTransactions GetLinkedTransaction(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        ApiResponse<LinkedTransactions> GetLinkedTransactionWithHttpInfo(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0);
        /// <summary>
        /// Retrieves linked transactions (billable expenses)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        LinkedTransactions GetLinkedTransactions(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Retrieves linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        ApiResponse<LinkedTransactions> GetLinkedTransactionsWithHttpInfo(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific manual journal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        ManualJournals GetManualJournal(string xeroTenantId, Guid manualJournalID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        ApiResponse<ManualJournals> GetManualJournalWithHttpInfo(string xeroTenantId, Guid manualJournalID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetManualJournalAttachmentByFileName(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetManualJournalAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetManualJournalAttachmentById(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetManualJournalAttachmentByIdWithHttpInfo(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachment for a specific manual journal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetManualJournalAttachments(string xeroTenantId, Guid manualJournalID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachment for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetManualJournalAttachmentsWithHttpInfo(string xeroTenantId, Guid manualJournalID, int operationIndex = 0);
        /// <summary>
        /// Retrieves manual journals
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        ManualJournals GetManualJournals(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        ApiResponse<ManualJournals> GetManualJournalsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves history for a specific manual journal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetManualJournalsHistory(string xeroTenantId, Guid manualJournalID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetManualJournalsHistoryWithHttpInfo(string xeroTenantId, Guid manualJournalID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a URL to an online invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OnlineInvoices</returns>
        OnlineInvoices GetOnlineInvoice(string xeroTenantId, Guid invoiceID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a URL to an online invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OnlineInvoices</returns>
        ApiResponse<OnlineInvoices> GetOnlineInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Actions</returns>
        Actions GetOrganisationActions(string xeroTenantId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Actions</returns>
        ApiResponse<Actions> GetOrganisationActionsWithHttpInfo(string xeroTenantId, int operationIndex = 0);
        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CISOrgSettings</returns>
        CISOrgSettings GetOrganisationCISSettings(string xeroTenantId, Guid organisationID, int operationIndex = 0);

        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CISOrgSettings</returns>
        ApiResponse<CISOrgSettings> GetOrganisationCISSettingsWithHttpInfo(string xeroTenantId, Guid organisationID, int operationIndex = 0);
        /// <summary>
        /// Retrieves Xero organisation details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organisations</returns>
        Organisations GetOrganisations(string xeroTenantId, int operationIndex = 0);

        /// <summary>
        /// Retrieves Xero organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organisations</returns>
        ApiResponse<Organisations> GetOrganisationsWithHttpInfo(string xeroTenantId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Overpayments</returns>
        Overpayments GetOverpayment(string xeroTenantId, Guid overpaymentID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Overpayments</returns>
        ApiResponse<Overpayments> GetOverpaymentWithHttpInfo(string xeroTenantId, Guid overpaymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history records of a specific overpayment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetOverpaymentHistory(string xeroTenantId, Guid overpaymentID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history records of a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetOverpaymentHistoryWithHttpInfo(string xeroTenantId, Guid overpaymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves overpayments
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Overpayments</returns>
        Overpayments GetOverpayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Overpayments</returns>
        ApiResponse<Overpayments> GetOverpaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        Payments GetPayment(string xeroTenantId, Guid paymentID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        ApiResponse<Payments> GetPaymentWithHttpInfo(string xeroTenantId, Guid paymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history records of a specific payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetPaymentHistory(string xeroTenantId, Guid paymentID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history records of a specific payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetPaymentHistoryWithHttpInfo(string xeroTenantId, Guid paymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves payment services
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        PaymentServices GetPaymentServices(string xeroTenantId, int operationIndex = 0);

        /// <summary>
        /// Retrieves payment services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        ApiResponse<PaymentServices> GetPaymentServicesWithHttpInfo(string xeroTenantId, int operationIndex = 0);
        /// <summary>
        /// Retrieves payments for invoices and credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        Payments GetPayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves payments for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        ApiResponse<Payments> GetPaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Allows you to retrieve a specified prepayments
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Prepayments</returns>
        Prepayments GetPrepayment(string xeroTenantId, Guid prepaymentID, int operationIndex = 0);

        /// <summary>
        /// Allows you to retrieve a specified prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Prepayments</returns>
        ApiResponse<Prepayments> GetPrepaymentWithHttpInfo(string xeroTenantId, Guid prepaymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history record for a specific prepayment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetPrepaymentHistory(string xeroTenantId, Guid prepaymentID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history record for a specific prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetPrepaymentHistoryWithHttpInfo(string xeroTenantId, Guid prepaymentID, int operationIndex = 0);
        /// <summary>
        /// Retrieves prepayments
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Prepayments</returns>
        Prepayments GetPrepayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Prepayments</returns>
        ApiResponse<Prepayments> GetPrepaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        PurchaseOrders GetPurchaseOrder(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        ApiResponse<PurchaseOrders> GetPurchaseOrderWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);
        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPurchaseOrderAsPdf(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);

        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPurchaseOrderAsPdfWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPurchaseOrderAttachmentByFileName(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPurchaseOrderAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetPurchaseOrderAttachmentById(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetPurchaseOrderAttachmentByIdWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments for a specific purchase order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetPurchaseOrderAttachments(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetPurchaseOrderAttachmentsWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific purchase order using purchase order number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        PurchaseOrders GetPurchaseOrderByNumber(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific purchase order using purchase order number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        ApiResponse<PurchaseOrders> GetPurchaseOrderByNumberWithHttpInfo(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0);
        /// <summary>
        /// Retrieves history for a specific purchase order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetPurchaseOrderHistory(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetPurchaseOrderHistoryWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0);
        /// <summary>
        /// Retrieves purchase orders
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        PurchaseOrders GetPurchaseOrders(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        ApiResponse<PurchaseOrders> GetPurchaseOrdersWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific quote using a unique quote Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        Quotes GetQuote(string xeroTenantId, Guid quoteID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific quote using a unique quote Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        ApiResponse<Quotes> GetQuoteWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetQuoteAsPdf(string xeroTenantId, Guid quoteID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetQuoteAsPdfWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetQuoteAttachmentByFileName(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetQuoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetQuoteAttachmentById(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetQuoteAttachmentByIdWithHttpInfo(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments for a specific quote
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetQuoteAttachments(string xeroTenantId, Guid quoteID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetQuoteAttachmentsWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history records of a specific quote
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetQuoteHistory(string xeroTenantId, Guid quoteID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history records of a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetQuoteHistoryWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0);
        /// <summary>
        /// Retrieves sales quotes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        Quotes GetQuotes(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves sales quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        ApiResponse<Quotes> GetQuotesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        Receipts GetReceipt(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        ApiResponse<Receipts> GetReceiptWithHttpInfo(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetReceiptAttachmentByFileName(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetReceiptAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetReceiptAttachmentById(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetReceiptAttachmentByIdWithHttpInfo(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetReceiptAttachments(string xeroTenantId, Guid receiptID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetReceiptAttachmentsWithHttpInfo(string xeroTenantId, Guid receiptID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a history record for a specific receipt
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetReceiptHistory(string xeroTenantId, Guid receiptID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a history record for a specific receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetReceiptHistoryWithHttpInfo(string xeroTenantId, Guid receiptID, int operationIndex = 0);
        /// <summary>
        /// Retrieves draft expense claim receipts for any user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        Receipts GetReceipts(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        ApiResponse<Receipts> GetReceiptsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        RepeatingInvoices GetRepeatingInvoice(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        ApiResponse<RepeatingInvoices> GetRepeatingInvoiceWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRepeatingInvoiceAttachmentByFileName(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRepeatingInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetRepeatingInvoiceAttachmentById(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetRepeatingInvoiceAttachmentByIdWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0);
        /// <summary>
        /// Retrieves attachments from a specific repeating invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments GetRepeatingInvoiceAttachments(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0);

        /// <summary>
        /// Retrieves attachments from a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> GetRepeatingInvoiceAttachmentsWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0);
        /// <summary>
        /// Retrieves history record for a specific repeating invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        HistoryRecords GetRepeatingInvoiceHistory(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0);

        /// <summary>
        /// Retrieves history record for a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        ApiResponse<HistoryRecords> GetRepeatingInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0);
        /// <summary>
        /// Retrieves repeating invoices
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        RepeatingInvoices GetRepeatingInvoices(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves repeating invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        ApiResponse<RepeatingInvoices> GetRepeatingInvoicesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves report for aged payables by contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportAgedPayablesByContact(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for aged payables by contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportAgedPayablesByContactWithHttpInfo(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0);
        /// <summary>
        /// Retrieves report for aged receivables by contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportAgedReceivablesByContact(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for aged receivables by contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportAgedReceivablesByContactWithHttpInfo(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0);
        /// <summary>
        /// Retrieves report for balancesheet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportBalanceSheet(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for balancesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportBalanceSheetWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieves report for bank summary
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportBankSummary(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for bank summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportBankSummaryWithHttpInfo(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0);
        /// <summary>
        /// Retrieves report for budget summary
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportBudgetSummary(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for budget summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportBudgetSummaryWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves report for executive summary
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportExecutiveSummary(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for executive summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportExecutiveSummaryWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific report using a unique ReportID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportFromId(string xeroTenantId, string reportID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific report using a unique ReportID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportFromIdWithHttpInfo(string xeroTenantId, string reportID, int operationIndex = 0);
        /// <summary>
        /// Retrieves report for profit and loss
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportProfitAndLoss(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for profit and loss
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportProfitAndLossWithHttpInfo(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve reports for 1099
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Reports</returns>
        Reports GetReportTenNinetyNine(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve reports for 1099
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Reports</returns>
        ApiResponse<Reports> GetReportTenNinetyNineWithHttpInfo(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves report for trial balance
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportTrialBalance(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves report for trial balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportTrialBalanceWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        ReportWithRows GetReportsList(string xeroTenantId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        ApiResponse<ReportWithRows> GetReportsListWithHttpInfo(string xeroTenantId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        TaxRates GetTaxRateByTaxType(string xeroTenantId, string taxType, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        ApiResponse<TaxRates> GetTaxRateByTaxTypeWithHttpInfo(string xeroTenantId, string taxType, int operationIndex = 0);
        /// <summary>
        /// Retrieves tax rates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        TaxRates GetTaxRates(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        ApiResponse<TaxRates> GetTaxRatesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves tracking categories and options
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        TrackingCategories GetTrackingCategories(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieves tracking categories and options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        ApiResponse<TrackingCategories> GetTrackingCategoriesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        TrackingCategories GetTrackingCategory(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0);

        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        ApiResponse<TrackingCategories> GetTrackingCategoryWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific user
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        Users GetUser(string xeroTenantId, Guid userID, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> GetUserWithHttpInfo(string xeroTenantId, Guid userID, int operationIndex = 0);
        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        Users GetUsers(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> GetUsersWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0);
        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportSummaryObject</returns>
        ImportSummaryObject PostSetup(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportSummaryObject</returns>
        ApiResponse<ImportSummaryObject> PostSetupWithHttpInfo(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a chart of accounts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        Accounts UpdateAccount(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        ApiResponse<Accounts> UpdateAccountWithHttpInfo(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates attachment on a specific account by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateAccountAttachmentByFileName(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates attachment on a specific account by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateAccountAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a single spent or received money transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        BankTransactions UpdateBankTransaction(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a single spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        ApiResponse<BankTransactions> UpdateBankTransactionWithHttpInfo(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateBankTransactionAttachmentByFileName(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateBankTransactionAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateBankTransferAttachmentByFileName(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateBankTransferAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific contact in a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        Contacts UpdateContact(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> UpdateContactWithHttpInfo(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateContactAttachmentByFileName(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateContactAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific contact group
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        ContactGroups UpdateContactGroup(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        ApiResponse<ContactGroups> UpdateContactGroupWithHttpInfo(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        CreditNotes UpdateCreditNote(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        ApiResponse<CreditNotes> UpdateCreditNoteWithHttpInfo(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates attachments on a specific credit note by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateCreditNoteAttachmentByFileName(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates attachments on a specific credit note by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateCreditNoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific expense claims
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        ExpenseClaims UpdateExpenseClaim(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        ApiResponse<ExpenseClaims> UpdateExpenseClaimWithHttpInfo(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific sales invoices or purchase bills
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        Invoices UpdateInvoice(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        ApiResponse<Invoices> UpdateInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateInvoiceAttachmentByFileName(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific item
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        Items UpdateItem(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        ApiResponse<Items> UpdateItemWithHttpInfo(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific linked transactions (billable expenses)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        LinkedTransactions UpdateLinkedTransaction(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        ApiResponse<LinkedTransactions> UpdateLinkedTransactionWithHttpInfo(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific manual journal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        ManualJournals UpdateManualJournal(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        ApiResponse<ManualJournals> UpdateManualJournalWithHttpInfo(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateManualJournalAttachmentByFileName(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateManualJournalAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates one or more spent or received money transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        BankTransactions UpdateOrCreateBankTransactions(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates one or more spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        ApiResponse<BankTransactions> UpdateOrCreateBankTransactionsWithHttpInfo(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        Contacts UpdateOrCreateContacts(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        ApiResponse<Contacts> UpdateOrCreateContactsWithHttpInfo(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates one or more credit notes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        CreditNotes UpdateOrCreateCreditNotes(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates one or more credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        ApiResponse<CreditNotes> UpdateOrCreateCreditNotesWithHttpInfo(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates a single new employees used in Xero payrun
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        Employees UpdateOrCreateEmployees(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates a single new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        ApiResponse<Employees> UpdateOrCreateEmployeesWithHttpInfo(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        Invoices UpdateOrCreateInvoices(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        ApiResponse<Invoices> UpdateOrCreateInvoicesWithHttpInfo(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates one or more items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        Items UpdateOrCreateItems(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates one or more items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        ApiResponse<Items> UpdateOrCreateItemsWithHttpInfo(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates a single manual journal
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        ManualJournals UpdateOrCreateManualJournals(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates a single manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        ApiResponse<ManualJournals> UpdateOrCreateManualJournalsWithHttpInfo(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates one or more purchase orders
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        PurchaseOrders UpdateOrCreatePurchaseOrders(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates one or more purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        ApiResponse<PurchaseOrders> UpdateOrCreatePurchaseOrdersWithHttpInfo(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates or creates one or more quotes
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        Quotes UpdateOrCreateQuotes(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates or creates one or more quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        ApiResponse<Quotes> UpdateOrCreateQuotesWithHttpInfo(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Creates or deletes one or more repeating invoice templates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        RepeatingInvoices UpdateOrCreateRepeatingInvoices(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Creates or deletes one or more repeating invoice templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        ApiResponse<RepeatingInvoices> UpdateOrCreateRepeatingInvoicesWithHttpInfo(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific purchase order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        PurchaseOrders UpdatePurchaseOrder(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        ApiResponse<PurchaseOrders> UpdatePurchaseOrderWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdatePurchaseOrderAttachmentByFileName(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdatePurchaseOrderAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific quote
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        Quotes UpdateQuote(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        ApiResponse<Quotes> UpdateQuoteWithHttpInfo(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific attachment from a specific quote by filename
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateQuoteAttachmentByFileName(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific attachment from a specific quote by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateQuoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific draft expense claim receipts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        Receipts UpdateReceipt(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific draft expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        ApiResponse<Receipts> UpdateReceiptWithHttpInfo(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateReceiptAttachmentByFileName(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateReceiptAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes a specific repeating invoice template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        RepeatingInvoices UpdateRepeatingInvoice(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes a specific repeating invoice template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        ApiResponse<RepeatingInvoices> UpdateRepeatingInvoiceWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        Attachments UpdateRepeatingInvoiceAttachmentByFileName(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        ApiResponse<Attachments> UpdateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates tax rates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        TaxRates UpdateTaxRate(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        ApiResponse<TaxRates> UpdateTaxRateWithHttpInfo(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific tracking category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        TrackingCategories UpdateTrackingCategory(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        ApiResponse<TrackingCategories> UpdateTrackingCategoryWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific option for a specific tracking category
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingOptions</returns>
        TrackingOptions UpdateTrackingOptions(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0);

        /// <summary>
        /// Updates a specific option for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingOptions</returns>
        ApiResponse<TrackingOptions> UpdateTrackingOptionsWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> CreateAccountAsync(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> CreateAccountWithHttpInfoAsync(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an attachment on a specific account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateAccountAttachmentByFileNameAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an attachment on a specific account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateAccountAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateBankTransactionAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateBankTransactionAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateBankTransactionHistoryRecordAsync(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateBankTransactionHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or more spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> CreateBankTransactionsAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or more spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> CreateBankTransactionsWithHttpInfoAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransfers</returns>
        System.Threading.Tasks.Task<BankTransfers> CreateBankTransferAsync(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransfers>> CreateBankTransferWithHttpInfoAsync(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateBankTransferAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateBankTransferAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateBankTransferHistoryRecordAsync(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateBankTransferHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or many batch payments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        System.Threading.Tasks.Task<BatchPayments> CreateBatchPaymentAsync(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or many batch payments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPayments>> CreateBatchPaymentWithHttpInfoAsync(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific batch payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateBatchPaymentHistoryRecordAsync(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific batch payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateBatchPaymentHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new custom payment service for a specific branding theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> CreateBrandingThemePaymentServicesAsync(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new custom payment service for a specific branding theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> CreateBrandingThemePaymentServicesWithHttpInfoAsync(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateContactAttachmentByFileNameAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateContactAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> CreateContactGroupAsync(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> CreateContactGroupWithHttpInfoAsync(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates contacts to a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> CreateContactGroupContactsAsync(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates contacts to a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> CreateContactGroupContactsWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new history record for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateContactHistoryAsync(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new history record for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateContactHistoryWithHttpInfoAsync(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> CreateContactsAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> CreateContactsWithHttpInfoAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates allocation for a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocations</returns>
        System.Threading.Tasks.Task<Allocations> CreateCreditNoteAllocationAsync(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates allocation for a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocations>> CreateCreditNoteAllocationWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an attachment for a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateCreditNoteAttachmentByFileNameAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an attachment for a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateCreditNoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateCreditNoteHistoryAsync(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateCreditNoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a new credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> CreateCreditNotesAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> CreateCreditNotesWithHttpInfoAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new currency for a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Currencies</returns>
        System.Threading.Tasks.Task<Currencies> CreateCurrencyAsync(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new currency for a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        System.Threading.Tasks.Task<ApiResponse<Currencies>> CreateCurrencyWithHttpInfoAsync(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> CreateEmployeesAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> CreateEmployeesWithHttpInfoAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateExpenseClaimHistoryAsync(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateExpenseClaimHistoryWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> CreateExpenseClaimsAsync(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> CreateExpenseClaimsWithHttpInfoAsync(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateInvoiceHistoryAsync(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or more sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> CreateInvoicesAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or more sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> CreateInvoicesWithHttpInfoAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateItemHistoryAsync(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateItemHistoryWithHttpInfoAsync(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or more items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> CreateItemsAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or more items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> CreateItemsWithHttpInfoAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> CreateLinkedTransactionAsync(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> CreateLinkedTransactionWithHttpInfoAsync(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateManualJournalAttachmentByFileNameAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateManualJournalAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateManualJournalHistoryRecordAsync(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateManualJournalHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or more manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> CreateManualJournalsAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or more manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> CreateManualJournalsWithHttpInfoAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a single allocation for a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocations</returns>
        System.Threading.Tasks.Task<Allocations> CreateOverpaymentAllocationsAsync(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a single allocation for a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocations>> CreateOverpaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateOverpaymentHistoryAsync(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateOverpaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a single payment for invoice or credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> CreatePaymentAsync(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a single payment for invoice or credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> CreatePaymentWithHttpInfoAsync(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreatePaymentHistoryAsync(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreatePaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a payment service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> CreatePaymentServiceAsync(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a payment service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> CreatePaymentServiceWithHttpInfoAsync(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates multiple payments for invoices or credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> CreatePaymentsAsync(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates multiple payments for invoices or credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> CreatePaymentsWithHttpInfoAsync(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows you to create an Allocation for prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocations</returns>
        System.Threading.Tasks.Task<Allocations> CreatePrepaymentAllocationsAsync(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows you to create an Allocation for prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocations>> CreatePrepaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreatePrepaymentHistoryAsync(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreatePrepaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates attachment for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreatePurchaseOrderAttachmentByFileNameAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates attachment for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreatePurchaseOrderAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreatePurchaseOrderHistoryAsync(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreatePurchaseOrderHistoryWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or more purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> CreatePurchaseOrdersAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or more purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> CreatePurchaseOrdersWithHttpInfoAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates attachment for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateQuoteAttachmentByFileNameAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates attachment for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateQuoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateQuoteHistoryAsync(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateQuoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create one or more quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        System.Threading.Tasks.Task<Quotes> CreateQuotesAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create one or more quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Quotes>> CreateQuotesWithHttpInfoAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> CreateReceiptAsync(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> CreateReceiptWithHttpInfoAsync(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateReceiptAttachmentByFileNameAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateReceiptAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a history record for a specific receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateReceiptHistoryAsync(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a history record for a specific receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateReceiptHistoryWithHttpInfoAsync(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateRepeatingInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a  history record for a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateRepeatingInvoiceHistoryAsync(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a  history record for a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateRepeatingInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or more repeating invoice templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        System.Threading.Tasks.Task<RepeatingInvoices> CreateRepeatingInvoicesAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or more repeating invoice templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepeatingInvoices>> CreateRepeatingInvoicesWithHttpInfoAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates one or more tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> CreateTaxRatesAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates one or more tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> CreateTaxRatesWithHttpInfoAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> CreateTrackingCategoryAsync(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> CreateTrackingCategoryWithHttpInfoAsync(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates options for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingOptions</returns>
        System.Threading.Tasks.Task<TrackingOptions> CreateTrackingOptionsAsync(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates options for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingOptions>> CreateTrackingOptionsWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> DeleteAccountAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> DeleteAccountWithHttpInfoAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        System.Threading.Tasks.Task<BatchPayments> DeleteBatchPaymentAsync(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPayments>> DeleteBatchPaymentWithHttpInfoAsync(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        System.Threading.Tasks.Task<BatchPayments> DeleteBatchPaymentByUrlParamAsync(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPayments>> DeleteBatchPaymentByUrlParamWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactGroupContactAsync(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactGroupContactWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes all contacts from a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactGroupContactsAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes all contacts from a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactGroupContactsWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an Allocation from a Credit Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> DeleteCreditNoteAllocationsAsync(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an Allocation from a Credit Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> DeleteCreditNoteAllocationsWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemWithHttpInfoAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a specific linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLinkedTransactionAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLinkedTransactionWithHttpInfoAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an Allocation from an overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> DeleteOverpaymentAllocationsAsync(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an Allocation from an overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> DeleteOverpaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> DeletePaymentAsync(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> DeletePaymentWithHttpInfoAsync(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an Allocation from a Prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> DeletePrepaymentAllocationsAsync(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an Allocation from a Prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> DeletePrepaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> DeleteTrackingCategoryAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> DeleteTrackingCategoryWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a specific option for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingOptions</returns>
        System.Threading.Tasks.Task<TrackingOptions> DeleteTrackingOptionsAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific option for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingOptions>> DeleteTrackingOptionsWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmailInvoiceAsync(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmailInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> GetAccountAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> GetAccountWithHttpInfoAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an attachment for a specific account by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByFileNameAsync(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an attachment for a specific account by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAccountAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByIdAsync(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAccountAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetAccountAttachmentsAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetAccountAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the full chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> GetAccountsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the full chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> GetAccountsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> GetBankTransactionAsync(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> GetBankTransactionWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByIdAsync(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves any attachments from a specific bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetBankTransactionAttachmentsAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves any attachments from a specific bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetBankTransactionAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves any spent or received money transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> GetBankTransactionsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves any spent or received money transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> GetBankTransactionsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetBankTransactionsHistoryAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetBankTransactionsHistoryWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransfers</returns>
        System.Threading.Tasks.Task<BankTransfers> GetBankTransferAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransfers>> GetBankTransferWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByIdAsync(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments from a specific bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetBankTransferAttachmentsAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments from a specific bank transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetBankTransferAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetBankTransferHistoryAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetBankTransferHistoryWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransfers</returns>
        System.Threading.Tasks.Task<BankTransfers> GetBankTransfersAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransfers>> GetBankTransfersWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        System.Threading.Tasks.Task<BatchPayments> GetBatchPaymentAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPayments>> GetBatchPaymentWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history from a specific batch payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetBatchPaymentHistoryAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history from a specific batch payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetBatchPaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves either one or many batch payments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        System.Threading.Tasks.Task<BatchPayments> GetBatchPaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves either one or many batch payments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPayments>> GetBatchPaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrandingThemes</returns>
        System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemeAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrandingThemes>> GetBrandingThemeWithHttpInfoAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the payment services for a specific branding theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> GetBrandingThemePaymentServicesAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the payment services for a specific branding theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> GetBrandingThemePaymentServicesWithHttpInfoAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all the branding themes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrandingThemes</returns>
        System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemesAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all the branding themes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrandingThemes>> GetBrandingThemesWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific budget, which includes budget lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Budgets</returns>
        System.Threading.Tasks.Task<Budgets> GetBudgetAsync(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific budget, which includes budget lines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Budgets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Budgets>> GetBudgetWithHttpInfoAsync(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of budgets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Budgets</returns>
        System.Threading.Tasks.Task<Budgets> GetBudgetsAsync(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of budgets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Budgets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Budgets>> GetBudgetsWithHttpInfoAsync(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> GetContactAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> GetContactWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByFileNameAsync(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContactAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByIdAsync(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContactAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetContactAttachmentsAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetContactAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> GetContactByContactNumberAsync(string xeroTenantId, string contactNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> GetContactByContactNumberWithHttpInfoAsync(string xeroTenantId, string contactNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CISSettings</returns>
        System.Threading.Tasks.Task<CISSettings> GetContactCISSettingsAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CISSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CISSettings>> GetContactCISSettingsWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> GetContactGroupAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> GetContactGroupWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the contact Id and name of each contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> GetContactGroupsAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the contact Id and name of each contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> GetContactGroupsWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetContactHistoryAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records for a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetContactHistoryWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> GetContactsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> GetContactsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> GetCreditNoteAsync(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> GetCreditNoteWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves credit notes as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAsPdfAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves credit notes as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCreditNoteAsPdfWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByFileNameAsync(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByIdAsync(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments for a specific credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetCreditNoteAttachmentsAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments for a specific credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetCreditNoteAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetCreditNoteHistoryAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records of a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetCreditNoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves any credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> GetCreditNotesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves any credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> GetCreditNotesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves currencies for your Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Currencies</returns>
        System.Threading.Tasks.Task<Currencies> GetCurrenciesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves currencies for your Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        System.Threading.Tasks.Task<ApiResponse<Currencies>> GetCurrenciesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeeAsync(string xeroTenantId, Guid employeeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeeWithHttpInfoAsync(string xeroTenantId, Guid employeeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> GetExpenseClaimWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records of a specific expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetExpenseClaimHistoryAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records of a specific expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetExpenseClaimHistoryWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> GetExpenseClaimsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> GetInvoiceAsync(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> GetInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAsPdfAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceAsPdfWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByIdAsync(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetInvoiceAttachmentsAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetInvoiceAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records for a specific invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetInvoiceHistoryAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records for a specific invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves invoice reminder settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceReminders</returns>
        System.Threading.Tasks.Task<InvoiceReminders> GetInvoiceRemindersAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves invoice reminder settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceReminders)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceReminders>> GetInvoiceRemindersWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> GetInvoicesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> GetInvoicesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific item using a unique item Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> GetItemAsync(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific item using a unique item Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> GetItemWithHttpInfoAsync(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history for a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetItemHistoryAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history for a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetItemHistoryWithHttpInfoAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> GetItemsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> GetItemsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific journal using a unique journal Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Journals</returns>
        System.Threading.Tasks.Task<Journals> GetJournalAsync(string xeroTenantId, Guid journalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific journal using a unique journal Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        System.Threading.Tasks.Task<ApiResponse<Journals>> GetJournalWithHttpInfoAsync(string xeroTenantId, Guid journalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific journal using a unique journal number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Journals</returns>
        System.Threading.Tasks.Task<Journals> GetJournalByNumberAsync(string xeroTenantId, int journalNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific journal using a unique journal number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        System.Threading.Tasks.Task<ApiResponse<Journals>> GetJournalByNumberWithHttpInfoAsync(string xeroTenantId, int journalNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Journals</returns>
        System.Threading.Tasks.Task<Journals> GetJournalsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        System.Threading.Tasks.Task<ApiResponse<Journals>> GetJournalsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> GetLinkedTransactionWithHttpInfoAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionsAsync(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> GetLinkedTransactionsWithHttpInfoAsync(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> GetManualJournalAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> GetManualJournalWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByFileNameAsync(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByIdAsync(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachment for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetManualJournalAttachmentsAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachment for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetManualJournalAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> GetManualJournalsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> GetManualJournalsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetManualJournalsHistoryAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history for a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetManualJournalsHistoryWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a URL to an online invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OnlineInvoices</returns>
        System.Threading.Tasks.Task<OnlineInvoices> GetOnlineInvoiceAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a URL to an online invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OnlineInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnlineInvoices>> GetOnlineInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Actions</returns>
        System.Threading.Tasks.Task<Actions> GetOrganisationActionsAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Actions)</returns>
        System.Threading.Tasks.Task<ApiResponse<Actions>> GetOrganisationActionsWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CISOrgSettings</returns>
        System.Threading.Tasks.Task<CISOrgSettings> GetOrganisationCISSettingsAsync(string xeroTenantId, Guid organisationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CISOrgSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CISOrgSettings>> GetOrganisationCISSettingsWithHttpInfoAsync(string xeroTenantId, Guid organisationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves Xero organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organisations</returns>
        System.Threading.Tasks.Task<Organisations> GetOrganisationsAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves Xero organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organisations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisations>> GetOrganisationsWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Overpayments</returns>
        System.Threading.Tasks.Task<Overpayments> GetOverpaymentAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Overpayments>> GetOverpaymentWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records of a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetOverpaymentHistoryAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records of a specific overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetOverpaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Overpayments</returns>
        System.Threading.Tasks.Task<Overpayments> GetOverpaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Overpayments>> GetOverpaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> GetPaymentAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> GetPaymentWithHttpInfoAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records of a specific payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetPaymentHistoryAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records of a specific payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetPaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves payment services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> GetPaymentServicesAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves payment services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> GetPaymentServicesWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves payments for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> GetPaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves payments for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> GetPaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows you to retrieve a specified prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Prepayments</returns>
        System.Threading.Tasks.Task<Prepayments> GetPrepaymentAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows you to retrieve a specified prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prepayments>> GetPrepaymentWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history record for a specific prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetPrepaymentHistoryAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history record for a specific prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetPrepaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Prepayments</returns>
        System.Threading.Tasks.Task<Prepayments> GetPrepaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prepayments>> GetPrepaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrderAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> GetPurchaseOrderWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPurchaseOrderAsPdfAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPurchaseOrderAsPdfWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPurchaseOrderAttachmentByFileNameAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPurchaseOrderAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetPurchaseOrderAttachmentByIdAsync(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetPurchaseOrderAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetPurchaseOrderAttachmentsAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetPurchaseOrderAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific purchase order using purchase order number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrderByNumberAsync(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific purchase order using purchase order number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> GetPurchaseOrderByNumberWithHttpInfoAsync(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetPurchaseOrderHistoryAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history for a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetPurchaseOrderHistoryWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrdersAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> GetPurchaseOrdersWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific quote using a unique quote Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        System.Threading.Tasks.Task<Quotes> GetQuoteAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific quote using a unique quote Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Quotes>> GetQuoteWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetQuoteAsPdfAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetQuoteAsPdfWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetQuoteAttachmentByFileNameAsync(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetQuoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetQuoteAttachmentByIdAsync(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetQuoteAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetQuoteAttachmentsAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments for a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetQuoteAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history records of a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetQuoteHistoryAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history records of a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetQuoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves sales quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        System.Threading.Tasks.Task<Quotes> GetQuotesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves sales quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Quotes>> GetQuotesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> GetReceiptAsync(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> GetReceiptWithHttpInfoAsync(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByFileNameAsync(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetReceiptAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByIdAsync(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetReceiptAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetReceiptAttachmentsAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetReceiptAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a history record for a specific receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetReceiptHistoryAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a history record for a specific receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetReceiptHistoryWithHttpInfoAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> GetReceiptsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> GetReceiptsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoiceAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepeatingInvoices>> GetRepeatingInvoiceWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByIdAsync(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves attachments from a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetRepeatingInvoiceAttachmentsAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves attachments from a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetRepeatingInvoiceAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves history record for a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetRepeatingInvoiceHistoryAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves history record for a specific repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetRepeatingInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves repeating invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoicesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves repeating invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepeatingInvoices>> GetRepeatingInvoicesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for aged payables by contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportAgedPayablesByContactAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for aged payables by contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportAgedPayablesByContactWithHttpInfoAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for aged receivables by contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportAgedReceivablesByContactAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for aged receivables by contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportAgedReceivablesByContactWithHttpInfoAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for balancesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBalanceSheetAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for balancesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBalanceSheetWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for bank summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBankSummaryAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for bank summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBankSummaryWithHttpInfoAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for budget summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBudgetSummaryAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for budget summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBudgetSummaryWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for executive summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportExecutiveSummaryAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for executive summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportExecutiveSummaryWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific report using a unique ReportID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportFromIdAsync(string xeroTenantId, string reportID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific report using a unique ReportID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportFromIdWithHttpInfoAsync(string xeroTenantId, string reportID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for profit and loss
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportProfitAndLossAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for profit and loss
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportProfitAndLossWithHttpInfoAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve reports for 1099
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Reports</returns>
        System.Threading.Tasks.Task<Reports> GetReportTenNinetyNineAsync(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve reports for 1099
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Reports)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reports>> GetReportTenNinetyNineWithHttpInfoAsync(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves report for trial balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportTrialBalanceAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves report for trial balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportTrialBalanceWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportsListAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportsListWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> GetTaxRateByTaxTypeAsync(string xeroTenantId, string taxType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> GetTaxRateByTaxTypeWithHttpInfoAsync(string xeroTenantId, string taxType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> GetTaxRatesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> GetTaxRatesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves tracking categories and options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves tracking categories and options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> GetTrackingCategoriesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoryAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> GetTrackingCategoryWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetUserAsync(string xeroTenantId, Guid userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetUserWithHttpInfoAsync(string xeroTenantId, Guid userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetUsersAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetUsersWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportSummaryObject</returns>
        System.Threading.Tasks.Task<ImportSummaryObject> PostSetupAsync(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportSummaryObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportSummaryObject>> PostSetupWithHttpInfoAsync(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> UpdateAccountAsync(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> UpdateAccountWithHttpInfoAsync(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates attachment on a specific account by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateAccountAttachmentByFileNameAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates attachment on a specific account by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateAccountAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a single spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> UpdateBankTransactionAsync(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a single spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> UpdateBankTransactionWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateBankTransactionAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateBankTransactionAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateBankTransferAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateBankTransferAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> UpdateContactAsync(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> UpdateContactWithHttpInfoAsync(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateContactAttachmentByFileNameAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateContactAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> UpdateContactGroupAsync(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> UpdateContactGroupWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> UpdateCreditNoteAsync(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> UpdateCreditNoteWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates attachments on a specific credit note by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateCreditNoteAttachmentByFileNameAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates attachments on a specific credit note by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateCreditNoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> UpdateExpenseClaimAsync(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> UpdateExpenseClaimWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> UpdateInvoiceAsync(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> UpdateInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> UpdateItemAsync(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> UpdateItemWithHttpInfoAsync(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> UpdateLinkedTransactionAsync(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> UpdateLinkedTransactionWithHttpInfoAsync(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> UpdateManualJournalAsync(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> UpdateManualJournalWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateManualJournalAttachmentByFileNameAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateManualJournalAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates one or more spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> UpdateOrCreateBankTransactionsAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates one or more spent or received money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> UpdateOrCreateBankTransactionsWithHttpInfoAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> UpdateOrCreateContactsAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> UpdateOrCreateContactsWithHttpInfoAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates one or more credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> UpdateOrCreateCreditNotesAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates one or more credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> UpdateOrCreateCreditNotesWithHttpInfoAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a single new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> UpdateOrCreateEmployeesAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a single new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> UpdateOrCreateEmployeesWithHttpInfoAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> UpdateOrCreateInvoicesAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> UpdateOrCreateInvoicesWithHttpInfoAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates one or more items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> UpdateOrCreateItemsAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates one or more items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> UpdateOrCreateItemsWithHttpInfoAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates a single manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> UpdateOrCreateManualJournalsAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates a single manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> UpdateOrCreateManualJournalsWithHttpInfoAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates one or more purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> UpdateOrCreatePurchaseOrdersAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates one or more purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> UpdateOrCreatePurchaseOrdersWithHttpInfoAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates or creates one or more quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        System.Threading.Tasks.Task<Quotes> UpdateOrCreateQuotesAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates or creates one or more quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Quotes>> UpdateOrCreateQuotesWithHttpInfoAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or deletes one or more repeating invoice templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        System.Threading.Tasks.Task<RepeatingInvoices> UpdateOrCreateRepeatingInvoicesAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or deletes one or more repeating invoice templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepeatingInvoices>> UpdateOrCreateRepeatingInvoicesWithHttpInfoAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> UpdatePurchaseOrderAsync(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> UpdatePurchaseOrderWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdatePurchaseOrderAttachmentByFileNameAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdatePurchaseOrderAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        System.Threading.Tasks.Task<Quotes> UpdateQuoteAsync(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific quote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Quotes>> UpdateQuoteWithHttpInfoAsync(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific attachment from a specific quote by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateQuoteAttachmentByFileNameAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific attachment from a specific quote by filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateQuoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific draft expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> UpdateReceiptAsync(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific draft expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> UpdateReceiptWithHttpInfoAsync(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateReceiptAttachmentByFileNameAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateReceiptAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a specific repeating invoice template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        System.Threading.Tasks.Task<RepeatingInvoices> UpdateRepeatingInvoiceAsync(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific repeating invoice template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepeatingInvoices>> UpdateRepeatingInvoiceWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateRepeatingInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> UpdateTaxRateAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates tax rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> UpdateTaxRateWithHttpInfoAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> UpdateTrackingCategoryAsync(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> UpdateTrackingCategoryWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific option for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingOptions</returns>
        System.Threading.Tasks.Task<TrackingOptions> UpdateTrackingOptionsAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific option for a specific tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingOptions>> UpdateTrackingOptionsWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApi : IAccountingApiSync, IAccountingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountingApi : IAccountingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountingApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountingApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountingApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        public Accounts CreateAccount(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = CreateAccountWithHttpInfo(xeroTenantId, account, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Accounts> CreateAccountWithHttpInfo(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateAccount");
            }

            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountingApi->CreateAccount");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountingApi.CreateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Accounts>("/Accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> CreateAccountAsync(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = await CreateAccountWithHttpInfoAsync(xeroTenantId, account, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Account object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Accounts>> CreateAccountWithHttpInfoAsync(string xeroTenantId, Account account, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateAccount");
            }

            // verify the required parameter 'account' is set
            if (account == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'account' when calling AccountingApi->CreateAccount");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = account;

            localVarRequestOptions.Operation = "AccountingApi.CreateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Accounts>("/Accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment on a specific account 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateAccountAttachmentByFileName(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateAccountAttachmentByFileNameWithHttpInfo(xeroTenantId, accountID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment on a specific account 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateAccountAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateAccountAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateAccountAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateAccountAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateAccountAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/Accounts/{AccountID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccountAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment on a specific account 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateAccountAttachmentByFileNameAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateAccountAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, accountID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment on a specific account 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateAccountAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateAccountAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateAccountAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateAccountAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateAccountAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/Accounts/{AccountID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccountAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateBankTransactionAttachmentByFileName(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateBankTransactionAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransactionID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateBankTransactionAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransactionAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransactionAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateBankTransactionAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateBankTransactionAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, bankTransactionID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment for a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateBankTransactionAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransactionAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransactionAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateBankTransactionHistoryRecord(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateBankTransactionHistoryRecordWithHttpInfo(xeroTenantId, bankTransactionID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateBankTransactionHistoryRecordWithHttpInfo(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactionHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBankTransactionHistoryRecord");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransactionHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/BankTransactions/{BankTransactionID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransactionHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateBankTransactionHistoryRecordAsync(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateBankTransactionHistoryRecordWithHttpInfoAsync(xeroTenantId, bankTransactionID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateBankTransactionHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactionHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBankTransactionHistoryRecord");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransactionHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/BankTransactions/{BankTransactionID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransactionHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        public BankTransactions CreateBankTransactions(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = CreateBankTransactionsWithHttpInfo(xeroTenantId, bankTransactions, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransactions> CreateBankTransactionsWithHttpInfo(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactions");
            }

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->CreateBankTransactions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransactions;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<BankTransactions>("/BankTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> CreateBankTransactionsAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = await CreateBankTransactionsWithHttpInfoAsync(xeroTenantId, bankTransactions, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions">BankTransactions with an array of BankTransaction objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransactions>> CreateBankTransactionsWithHttpInfoAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactions");
            }

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->CreateBankTransactions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransactions;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<BankTransactions>("/BankTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransfers</returns>
        public BankTransfers CreateBankTransfer(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransfers> localVarResponse = CreateBankTransferWithHttpInfo(xeroTenantId, bankTransfers, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransfers</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransfers> CreateBankTransferWithHttpInfo(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransfer");
            }

            // verify the required parameter 'bankTransfers' is set
            if (bankTransfers == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransfers' when calling AccountingApi->CreateBankTransfer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransfers;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<BankTransfers>("/BankTransfers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransfers</returns>
        public async System.Threading.Tasks.Task<BankTransfers> CreateBankTransferAsync(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransfers> localVarResponse = await CreateBankTransferWithHttpInfoAsync(xeroTenantId, bankTransfers, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers">BankTransfers with array of BankTransfer objects in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransfers>> CreateBankTransferWithHttpInfoAsync(string xeroTenantId, BankTransfers bankTransfers, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransfer");
            }

            // verify the required parameter 'bankTransfers' is set
            if (bankTransfers == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransfers' when calling AccountingApi->CreateBankTransfer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransfers;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<BankTransfers>("/BankTransfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateBankTransferAttachmentByFileName(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateBankTransferAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransferID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateBankTransferAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateBankTransferAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransferAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransferAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateBankTransferAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateBankTransferAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, bankTransferID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateBankTransferAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateBankTransferAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransferAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransferAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateBankTransferHistoryRecord(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateBankTransferHistoryRecordWithHttpInfo(xeroTenantId, bankTransferID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateBankTransferHistoryRecordWithHttpInfo(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransferHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBankTransferHistoryRecord");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransferHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/BankTransfers/{BankTransferID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransferHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateBankTransferHistoryRecordAsync(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateBankTransferHistoryRecordWithHttpInfoAsync(xeroTenantId, bankTransferID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateBankTransferHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransferHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBankTransferHistoryRecord");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateBankTransferHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/BankTransfers/{BankTransferID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBankTransferHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        public BatchPayments CreateBatchPayment(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = CreateBatchPaymentWithHttpInfo(xeroTenantId, batchPayments, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<BatchPayments> CreateBatchPaymentWithHttpInfo(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBatchPayment");
            }

            // verify the required parameter 'batchPayments' is set
            if (batchPayments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'batchPayments' when calling AccountingApi->CreateBatchPayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = batchPayments;

            localVarRequestOptions.Operation = "AccountingApi.CreateBatchPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<BatchPayments>("/BatchPayments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        public async System.Threading.Tasks.Task<BatchPayments> CreateBatchPaymentAsync(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = await CreateBatchPaymentWithHttpInfoAsync(xeroTenantId, batchPayments, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">BatchPayments with an array of Payments in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BatchPayments>> CreateBatchPaymentWithHttpInfoAsync(string xeroTenantId, BatchPayments batchPayments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBatchPayment");
            }

            // verify the required parameter 'batchPayments' is set
            if (batchPayments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'batchPayments' when calling AccountingApi->CreateBatchPayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = batchPayments;

            localVarRequestOptions.Operation = "AccountingApi.CreateBatchPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<BatchPayments>("/BatchPayments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateBatchPaymentHistoryRecord(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateBatchPaymentHistoryRecordWithHttpInfo(xeroTenantId, batchPaymentID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateBatchPaymentHistoryRecordWithHttpInfo(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBatchPaymentHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBatchPaymentHistoryRecord");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateBatchPaymentHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/BatchPayments/{BatchPaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchPaymentHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateBatchPaymentHistoryRecordAsync(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateBatchPaymentHistoryRecordWithHttpInfoAsync(xeroTenantId, batchPaymentID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateBatchPaymentHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBatchPaymentHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBatchPaymentHistoryRecord");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateBatchPaymentHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/BatchPayments/{BatchPaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBatchPaymentHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new custom payment service for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        public PaymentServices CreateBrandingThemePaymentServices(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = CreateBrandingThemePaymentServicesWithHttpInfo(xeroTenantId, brandingThemeID, paymentServices, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new custom payment service for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentServices> CreateBrandingThemePaymentServicesWithHttpInfo(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBrandingThemePaymentServices");
            }

            // verify the required parameter 'paymentServices' is set
            if (paymentServices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentServices' when calling AccountingApi->CreateBrandingThemePaymentServices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BrandingThemeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentServices;

            localVarRequestOptions.Operation = "AccountingApi.CreateBrandingThemePaymentServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentServices>("/BrandingThemes/{BrandingThemeID}/PaymentServices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBrandingThemePaymentServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new custom payment service for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> CreateBrandingThemePaymentServicesAsync(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = await CreateBrandingThemePaymentServicesWithHttpInfoAsync(xeroTenantId, brandingThemeID, paymentServices, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new custom payment service for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentServices>> CreateBrandingThemePaymentServicesWithHttpInfoAsync(string xeroTenantId, Guid brandingThemeID, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBrandingThemePaymentServices");
            }

            // verify the required parameter 'paymentServices' is set
            if (paymentServices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentServices' when calling AccountingApi->CreateBrandingThemePaymentServices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BrandingThemeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentServices;

            localVarRequestOptions.Operation = "AccountingApi.CreateBrandingThemePaymentServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentServices>("/BrandingThemes/{BrandingThemeID}/PaymentServices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBrandingThemePaymentServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateContactAttachmentByFileName(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateContactAttachmentByFileNameWithHttpInfo(xeroTenantId, contactID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateContactAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateContactAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateContactAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/Contacts/{ContactID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateContactAttachmentByFileNameAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateContactAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, contactID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateContactAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateContactAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateContactAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/Contacts/{ContactID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        public ContactGroups CreateContactGroup(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = CreateContactGroupWithHttpInfo(xeroTenantId, contactGroups, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContactGroups> CreateContactGroupWithHttpInfo(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactGroup");
            }

            // verify the required parameter 'contactGroups' is set
            if (contactGroups == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactGroups' when calling AccountingApi->CreateContactGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contactGroups;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ContactGroups>("/ContactGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> CreateContactGroupAsync(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = await CreateContactGroupWithHttpInfoAsync(xeroTenantId, contactGroups, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">ContactGroups with an array of names in request body</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContactGroups>> CreateContactGroupWithHttpInfoAsync(string xeroTenantId, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactGroup");
            }

            // verify the required parameter 'contactGroups' is set
            if (contactGroups == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactGroups' when calling AccountingApi->CreateContactGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contactGroups;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ContactGroups>("/ContactGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates contacts to a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        public Contacts CreateContactGroupContacts(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = CreateContactGroupContactsWithHttpInfo(xeroTenantId, contactGroupID, contacts, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates contacts to a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Contacts> CreateContactGroupContactsWithHttpInfo(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactGroupContacts");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->CreateContactGroupContacts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactGroupContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Contacts>("/ContactGroups/{ContactGroupID}/Contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactGroupContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates contacts to a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> CreateContactGroupContactsAsync(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = await CreateContactGroupContactsWithHttpInfoAsync(xeroTenantId, contactGroupID, contacts, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates contacts to a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Contacts>> CreateContactGroupContactsWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactGroupContacts");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->CreateContactGroupContacts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactGroupContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Contacts>("/ContactGroups/{ContactGroupID}/Contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactGroupContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new history record for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateContactHistory(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateContactHistoryWithHttpInfo(xeroTenantId, contactID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new history record for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateContactHistoryWithHttpInfo(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateContactHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Contacts/{ContactID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new history record for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateContactHistoryAsync(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateContactHistoryWithHttpInfoAsync(xeroTenantId, contactID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new history record for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateContactHistoryWithHttpInfoAsync(string xeroTenantId, Guid contactID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateContactHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateContactHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Contacts/{ContactID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        public Contacts CreateContacts(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = CreateContactsWithHttpInfo(xeroTenantId, contacts, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Contacts> CreateContactsWithHttpInfo(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContacts");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->CreateContacts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.CreateContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Contacts>("/Contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> CreateContactsAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = await CreateContactsWithHttpInfoAsync(xeroTenantId, contacts, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple contacts (bulk) in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts">Contacts with an array of Contact objects to create in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Contacts>> CreateContactsWithHttpInfoAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContacts");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->CreateContacts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.CreateContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Contacts>("/Contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates allocation for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocations</returns>
        public Allocations CreateCreditNoteAllocation(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Allocations> localVarResponse = CreateCreditNoteAllocationWithHttpInfo(xeroTenantId, creditNoteID, allocations, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates allocation for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocations</returns>
        public Org.OpenAPITools.Client.ApiResponse<Allocations> CreateCreditNoteAllocationWithHttpInfo(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteAllocation");
            }

            // verify the required parameter 'allocations' is set
            if (allocations == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreateCreditNoteAllocation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = allocations;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNoteAllocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Allocations>("/CreditNotes/{CreditNoteID}/Allocations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNoteAllocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates allocation for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocations</returns>
        public async System.Threading.Tasks.Task<Allocations> CreateCreditNoteAllocationAsync(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Allocations> localVarResponse = await CreateCreditNoteAllocationWithHttpInfoAsync(xeroTenantId, creditNoteID, allocations, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates allocation for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">Allocations with array of Allocation object in body of request.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Allocations>> CreateCreditNoteAllocationWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteAllocation");
            }

            // verify the required parameter 'allocations' is set
            if (allocations == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreateCreditNoteAllocation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = allocations;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNoteAllocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Allocations>("/CreditNotes/{CreditNoteID}/Allocations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNoteAllocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateCreditNoteAttachmentByFileName(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateCreditNoteAttachmentByFileNameWithHttpInfo(xeroTenantId, creditNoteID, fileName, body, includeOnline, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateCreditNoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (includeOnline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeOnline", includeOnline));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateCreditNoteAttachmentByFileNameAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateCreditNoteAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, creditNoteID, fileName, body, includeOnline, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment for a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateCreditNoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (includeOnline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeOnline", includeOnline));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateCreditNoteHistory(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateCreditNoteHistoryWithHttpInfo(xeroTenantId, creditNoteID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateCreditNoteHistoryWithHttpInfo(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateCreditNoteHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/CreditNotes/{CreditNoteID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateCreditNoteHistoryAsync(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateCreditNoteHistoryWithHttpInfoAsync(xeroTenantId, creditNoteID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateCreditNoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateCreditNoteHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/CreditNotes/{CreditNoteID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        public CreditNotes CreateCreditNotes(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = CreateCreditNotesWithHttpInfo(xeroTenantId, creditNotes, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreditNotes> CreateCreditNotesWithHttpInfo(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNotes");
            }

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->CreateCreditNotes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = creditNotes;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CreditNotes>("/CreditNotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> CreateCreditNotesAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = await CreateCreditNotesWithHttpInfoAsync(xeroTenantId, creditNotes, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">Credit Notes with array of CreditNote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreditNotes>> CreateCreditNotesWithHttpInfoAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNotes");
            }

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->CreateCreditNotes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = creditNotes;

            localVarRequestOptions.Operation = "AccountingApi.CreateCreditNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CreditNotes>("/CreditNotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCreditNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new currency for a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Currencies</returns>
        public Currencies CreateCurrency(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Currencies> localVarResponse = CreateCurrencyWithHttpInfo(xeroTenantId, currency, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new currency for a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Currencies</returns>
        public Org.OpenAPITools.Client.ApiResponse<Currencies> CreateCurrencyWithHttpInfo(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCurrency");
            }

            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'currency' when calling AccountingApi->CreateCurrency");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = currency;

            localVarRequestOptions.Operation = "AccountingApi.CreateCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Currencies>("/Currencies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new currency for a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Currencies</returns>
        public async System.Threading.Tasks.Task<Currencies> CreateCurrencyAsync(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Currencies> localVarResponse = await CreateCurrencyWithHttpInfoAsync(xeroTenantId, currency, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new currency for a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency">Currency object in the body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Currencies>> CreateCurrencyWithHttpInfoAsync(string xeroTenantId, Currency currency, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCurrency");
            }

            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'currency' when calling AccountingApi->CreateCurrency");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = currency;

            localVarRequestOptions.Operation = "AccountingApi.CreateCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Currencies>("/Currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        public Employees CreateEmployees(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = CreateEmployeesWithHttpInfo(xeroTenantId, employees, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        public Org.OpenAPITools.Client.ApiResponse<Employees> CreateEmployeesWithHttpInfo(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateEmployees");
            }

            // verify the required parameter 'employees' is set
            if (employees == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employees' when calling AccountingApi->CreateEmployees");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = employees;

            localVarRequestOptions.Operation = "AccountingApi.CreateEmployees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Employees>("/Employees", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmployees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> CreateEmployeesAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = await CreateEmployeesWithHttpInfoAsync(xeroTenantId, employees, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Employees>> CreateEmployeesWithHttpInfoAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateEmployees");
            }

            // verify the required parameter 'employees' is set
            if (employees == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employees' when calling AccountingApi->CreateEmployees");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = employees;

            localVarRequestOptions.Operation = "AccountingApi.CreateEmployees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Employees>("/Employees", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmployees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateExpenseClaimHistory(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateExpenseClaimHistoryWithHttpInfo(xeroTenantId, expenseClaimID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateExpenseClaimHistoryWithHttpInfo(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateExpenseClaimHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateExpenseClaimHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateExpenseClaimHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/ExpenseClaims/{ExpenseClaimID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExpenseClaimHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateExpenseClaimHistoryAsync(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateExpenseClaimHistoryWithHttpInfoAsync(xeroTenantId, expenseClaimID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateExpenseClaimHistoryWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateExpenseClaimHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateExpenseClaimHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateExpenseClaimHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/ExpenseClaims/{ExpenseClaimID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExpenseClaimHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        public ExpenseClaims CreateExpenseClaims(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = CreateExpenseClaimsWithHttpInfo(xeroTenantId, expenseClaims, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        public Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> CreateExpenseClaimsWithHttpInfo(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateExpenseClaims");
            }

            // verify the required parameter 'expenseClaims' is set
            if (expenseClaims == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'expenseClaims' when calling AccountingApi->CreateExpenseClaims");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = expenseClaims;

            localVarRequestOptions.Operation = "AccountingApi.CreateExpenseClaims";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ExpenseClaims>("/ExpenseClaims", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExpenseClaims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> CreateExpenseClaimsAsync(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = await CreateExpenseClaimsWithHttpInfoAsync(xeroTenantId, expenseClaims, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims">ExpenseClaims with array of ExpenseClaim object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ExpenseClaims>> CreateExpenseClaimsWithHttpInfoAsync(string xeroTenantId, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateExpenseClaims");
            }

            // verify the required parameter 'expenseClaims' is set
            if (expenseClaims == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'expenseClaims' when calling AccountingApi->CreateExpenseClaims");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = expenseClaims;

            localVarRequestOptions.Operation = "AccountingApi.CreateExpenseClaims";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ExpenseClaims>("/ExpenseClaims", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExpenseClaims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateInvoiceAttachmentByFileName(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, invoiceID, fileName, body, includeOnline, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateInvoiceAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (includeOnline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeOnline", includeOnline));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/Invoices/{InvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateInvoiceAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, invoiceID, fileName, body, includeOnline, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment for a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="includeOnline">Allows an attachment to be seen by the end customer within their online invoice (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, bool? includeOnline = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateInvoiceAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (includeOnline != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IncludeOnline", includeOnline));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/Invoices/{InvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateInvoiceHistory(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateInvoiceHistoryWithHttpInfo(xeroTenantId, invoiceID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoiceHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateInvoiceHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Invoices/{InvoiceID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateInvoiceHistoryAsync(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateInvoiceHistoryWithHttpInfoAsync(xeroTenantId, invoiceID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoiceHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateInvoiceHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Invoices/{InvoiceID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        public Invoices CreateInvoices(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = CreateInvoicesWithHttpInfo(xeroTenantId, invoices, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<Invoices> CreateInvoicesWithHttpInfo(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoices");
            }

            // verify the required parameter 'invoices' is set
            if (invoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->CreateInvoices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = invoices;

            localVarRequestOptions.Operation = "AccountingApi.CreateInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Invoices>("/Invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> CreateInvoicesAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = await CreateInvoicesWithHttpInfoAsync(xeroTenantId, invoices, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices">Invoices with an array of invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Invoices>> CreateInvoicesWithHttpInfoAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoices");
            }

            // verify the required parameter 'invoices' is set
            if (invoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->CreateInvoices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = invoices;

            localVarRequestOptions.Operation = "AccountingApi.CreateInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Invoices>("/Invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateItemHistory(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateItemHistoryWithHttpInfo(xeroTenantId, itemID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateItemHistoryWithHttpInfo(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateItemHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateItemHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateItemHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Items/{ItemID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateItemHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateItemHistoryAsync(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateItemHistoryWithHttpInfoAsync(xeroTenantId, itemID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateItemHistoryWithHttpInfoAsync(string xeroTenantId, Guid itemID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateItemHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateItemHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateItemHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Items/{ItemID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateItemHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        public Items CreateItems(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = CreateItemsWithHttpInfo(xeroTenantId, items, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        public Org.OpenAPITools.Client.ApiResponse<Items> CreateItemsWithHttpInfo(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateItems");
            }

            // verify the required parameter 'items' is set
            if (items == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->CreateItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = items;

            localVarRequestOptions.Operation = "AccountingApi.CreateItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Items>("/Items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> CreateItemsAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = await CreateItemsWithHttpInfoAsync(xeroTenantId, items, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items">Items with an array of Item objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Items>> CreateItemsWithHttpInfoAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateItems");
            }

            // verify the required parameter 'items' is set
            if (items == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->CreateItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = items;

            localVarRequestOptions.Operation = "AccountingApi.CreateItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Items>("/Items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        public LinkedTransactions CreateLinkedTransaction(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = CreateLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransaction, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> CreateLinkedTransactionWithHttpInfo(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateLinkedTransaction");
            }

            // verify the required parameter 'linkedTransaction' is set
            if (linkedTransaction == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkedTransaction' when calling AccountingApi->CreateLinkedTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = linkedTransaction;

            localVarRequestOptions.Operation = "AccountingApi.CreateLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LinkedTransactions>("/LinkedTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> CreateLinkedTransactionAsync(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = await CreateLinkedTransactionWithHttpInfoAsync(xeroTenantId, linkedTransaction, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransaction">LinkedTransaction object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LinkedTransactions>> CreateLinkedTransactionWithHttpInfoAsync(string xeroTenantId, LinkedTransaction linkedTransaction, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateLinkedTransaction");
            }

            // verify the required parameter 'linkedTransaction' is set
            if (linkedTransaction == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkedTransaction' when calling AccountingApi->CreateLinkedTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = linkedTransaction;

            localVarRequestOptions.Operation = "AccountingApi.CreateLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LinkedTransactions>("/LinkedTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateManualJournalAttachmentByFileName(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateManualJournalAttachmentByFileNameWithHttpInfo(xeroTenantId, manualJournalID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateManualJournalAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateManualJournalAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateManualJournalAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournalAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateManualJournalAttachmentByFileNameAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateManualJournalAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, manualJournalID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a specific attachment for a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateManualJournalAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateManualJournalAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateManualJournalAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournalAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateManualJournalHistoryRecord(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateManualJournalHistoryRecordWithHttpInfo(xeroTenantId, manualJournalID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateManualJournalHistoryRecordWithHttpInfo(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournalHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateManualJournalHistoryRecord");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateManualJournalHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/ManualJournals/{ManualJournalID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournalHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateManualJournalHistoryRecordAsync(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateManualJournalHistoryRecordWithHttpInfoAsync(xeroTenantId, manualJournalID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateManualJournalHistoryRecordWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournalHistoryRecord");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateManualJournalHistoryRecord");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateManualJournalHistoryRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/ManualJournals/{ManualJournalID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournalHistoryRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        public ManualJournals CreateManualJournals(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = CreateManualJournalsWithHttpInfo(xeroTenantId, manualJournals, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManualJournals> CreateManualJournalsWithHttpInfo(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournals");
            }

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->CreateManualJournals");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manualJournals;

            localVarRequestOptions.Operation = "AccountingApi.CreateManualJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManualJournals>("/ManualJournals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> CreateManualJournalsAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = await CreateManualJournalsWithHttpInfoAsync(xeroTenantId, manualJournals, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManualJournals>> CreateManualJournalsWithHttpInfoAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournals");
            }

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->CreateManualJournals");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manualJournals;

            localVarRequestOptions.Operation = "AccountingApi.CreateManualJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManualJournals>("/ManualJournals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a single allocation for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocations</returns>
        public Allocations CreateOverpaymentAllocations(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Allocations> localVarResponse = CreateOverpaymentAllocationsWithHttpInfo(xeroTenantId, overpaymentID, allocations, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a single allocation for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocations</returns>
        public Org.OpenAPITools.Client.ApiResponse<Allocations> CreateOverpaymentAllocationsWithHttpInfo(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateOverpaymentAllocations");
            }

            // verify the required parameter 'allocations' is set
            if (allocations == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreateOverpaymentAllocations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = allocations;

            localVarRequestOptions.Operation = "AccountingApi.CreateOverpaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Allocations>("/Overpayments/{OverpaymentID}/Allocations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOverpaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a single allocation for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocations</returns>
        public async System.Threading.Tasks.Task<Allocations> CreateOverpaymentAllocationsAsync(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Allocations> localVarResponse = await CreateOverpaymentAllocationsWithHttpInfoAsync(xeroTenantId, overpaymentID, allocations, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a single allocation for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations">Allocations array with Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Allocations>> CreateOverpaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateOverpaymentAllocations");
            }

            // verify the required parameter 'allocations' is set
            if (allocations == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreateOverpaymentAllocations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = allocations;

            localVarRequestOptions.Operation = "AccountingApi.CreateOverpaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Allocations>("/Overpayments/{OverpaymentID}/Allocations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOverpaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateOverpaymentHistory(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateOverpaymentHistoryWithHttpInfo(xeroTenantId, overpaymentID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateOverpaymentHistoryWithHttpInfo(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateOverpaymentHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateOverpaymentHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateOverpaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Overpayments/{OverpaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOverpaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateOverpaymentHistoryAsync(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateOverpaymentHistoryWithHttpInfoAsync(xeroTenantId, overpaymentID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateOverpaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateOverpaymentHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateOverpaymentHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateOverpaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Overpayments/{OverpaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOverpaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a single payment for invoice or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        public Payments CreatePayment(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = CreatePaymentWithHttpInfo(xeroTenantId, payment, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a single payment for invoice or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Payments> CreatePaymentWithHttpInfo(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePayment");
            }

            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'payment' when calling AccountingApi->CreatePayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = payment;

            localVarRequestOptions.Operation = "AccountingApi.CreatePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Payments>("/Payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a single payment for invoice or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> CreatePaymentAsync(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = await CreatePaymentWithHttpInfoAsync(xeroTenantId, payment, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a single payment for invoice or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payment">Request body with a single Payment object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Payments>> CreatePaymentWithHttpInfoAsync(string xeroTenantId, Payment payment, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePayment");
            }

            // verify the required parameter 'payment' is set
            if (payment == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'payment' when calling AccountingApi->CreatePayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = payment;

            localVarRequestOptions.Operation = "AccountingApi.CreatePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Payments>("/Payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreatePaymentHistory(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreatePaymentHistoryWithHttpInfo(xeroTenantId, paymentID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreatePaymentHistoryWithHttpInfo(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePaymentHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePaymentHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreatePaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Payments/{PaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreatePaymentHistoryAsync(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreatePaymentHistoryWithHttpInfoAsync(xeroTenantId, paymentID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreatePaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid paymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePaymentHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePaymentHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreatePaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Payments/{PaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a payment service 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        public PaymentServices CreatePaymentService(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = CreatePaymentServiceWithHttpInfo(xeroTenantId, paymentServices, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a payment service 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentServices> CreatePaymentServiceWithHttpInfo(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePaymentService");
            }

            // verify the required parameter 'paymentServices' is set
            if (paymentServices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentServices' when calling AccountingApi->CreatePaymentService");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentServices;

            localVarRequestOptions.Operation = "AccountingApi.CreatePaymentService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PaymentServices>("/PaymentServices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a payment service 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> CreatePaymentServiceAsync(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = await CreatePaymentServiceWithHttpInfoAsync(xeroTenantId, paymentServices, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a payment service 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices">PaymentServices array with PaymentService object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentServices>> CreatePaymentServiceWithHttpInfoAsync(string xeroTenantId, PaymentServices paymentServices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePaymentService");
            }

            // verify the required parameter 'paymentServices' is set
            if (paymentServices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentServices' when calling AccountingApi->CreatePaymentService");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentServices;

            localVarRequestOptions.Operation = "AccountingApi.CreatePaymentService";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PaymentServices>("/PaymentServices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePaymentService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple payments for invoices or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        public Payments CreatePayments(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = CreatePaymentsWithHttpInfo(xeroTenantId, payments, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple payments for invoices or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Payments> CreatePaymentsWithHttpInfo(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePayments");
            }

            // verify the required parameter 'payments' is set
            if (payments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'payments' when calling AccountingApi->CreatePayments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = payments;

            localVarRequestOptions.Operation = "AccountingApi.CreatePayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Payments>("/Payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates multiple payments for invoices or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> CreatePaymentsAsync(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = await CreatePaymentsWithHttpInfoAsync(xeroTenantId, payments, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates multiple payments for invoices or credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments">Payments array with Payment object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Payments>> CreatePaymentsWithHttpInfoAsync(string xeroTenantId, Payments payments, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePayments");
            }

            // verify the required parameter 'payments' is set
            if (payments == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'payments' when calling AccountingApi->CreatePayments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = payments;

            localVarRequestOptions.Operation = "AccountingApi.CreatePayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Payments>("/Payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to create an Allocation for prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocations</returns>
        public Allocations CreatePrepaymentAllocations(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Allocations> localVarResponse = CreatePrepaymentAllocationsWithHttpInfo(xeroTenantId, prepaymentID, allocations, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to create an Allocation for prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocations</returns>
        public Org.OpenAPITools.Client.ApiResponse<Allocations> CreatePrepaymentAllocationsWithHttpInfo(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePrepaymentAllocations");
            }

            // verify the required parameter 'allocations' is set
            if (allocations == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreatePrepaymentAllocations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = allocations;

            localVarRequestOptions.Operation = "AccountingApi.CreatePrepaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Allocations>("/Prepayments/{PrepaymentID}/Allocations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrepaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to create an Allocation for prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocations</returns>
        public async System.Threading.Tasks.Task<Allocations> CreatePrepaymentAllocationsAsync(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Allocations> localVarResponse = await CreatePrepaymentAllocationsWithHttpInfoAsync(xeroTenantId, prepaymentID, allocations, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to create an Allocation for prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocations">Allocations with an array of Allocation object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Allocations>> CreatePrepaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, Allocations allocations, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePrepaymentAllocations");
            }

            // verify the required parameter 'allocations' is set
            if (allocations == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreatePrepaymentAllocations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = allocations;

            localVarRequestOptions.Operation = "AccountingApi.CreatePrepaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Allocations>("/Prepayments/{PrepaymentID}/Allocations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrepaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreatePrepaymentHistory(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreatePrepaymentHistoryWithHttpInfo(xeroTenantId, prepaymentID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreatePrepaymentHistoryWithHttpInfo(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePrepaymentHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePrepaymentHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreatePrepaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Prepayments/{PrepaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrepaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreatePrepaymentHistoryAsync(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreatePrepaymentHistoryWithHttpInfoAsync(xeroTenantId, prepaymentID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreatePrepaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePrepaymentHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePrepaymentHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreatePrepaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Prepayments/{PrepaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrepaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates attachment for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreatePurchaseOrderAttachmentByFileName(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreatePurchaseOrderAttachmentByFileNameWithHttpInfo(xeroTenantId, purchaseOrderID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates attachment for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreatePurchaseOrderAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreatePurchaseOrderAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreatePurchaseOrderAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePurchaseOrderAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates attachment for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreatePurchaseOrderAttachmentByFileNameAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreatePurchaseOrderAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, purchaseOrderID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates attachment for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreatePurchaseOrderAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreatePurchaseOrderAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreatePurchaseOrderAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePurchaseOrderAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreatePurchaseOrderHistory(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreatePurchaseOrderHistoryWithHttpInfo(xeroTenantId, purchaseOrderID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreatePurchaseOrderHistoryWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrderHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePurchaseOrderHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreatePurchaseOrderHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/PurchaseOrders/{PurchaseOrderID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePurchaseOrderHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreatePurchaseOrderHistoryAsync(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreatePurchaseOrderHistoryWithHttpInfoAsync(xeroTenantId, purchaseOrderID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreatePurchaseOrderHistoryWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrderHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePurchaseOrderHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreatePurchaseOrderHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/PurchaseOrders/{PurchaseOrderID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePurchaseOrderHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        public PurchaseOrders CreatePurchaseOrders(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = CreatePurchaseOrdersWithHttpInfo(xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        public Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> CreatePurchaseOrdersWithHttpInfo(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrders");
            }

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->CreatePurchaseOrders");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = purchaseOrders;

            localVarRequestOptions.Operation = "AccountingApi.CreatePurchaseOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PurchaseOrders>("/PurchaseOrders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePurchaseOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> CreatePurchaseOrdersAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = await CreatePurchaseOrdersWithHttpInfoAsync(xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders">PurchaseOrders with an array of PurchaseOrder object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PurchaseOrders>> CreatePurchaseOrdersWithHttpInfoAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrders");
            }

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->CreatePurchaseOrders");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = purchaseOrders;

            localVarRequestOptions.Operation = "AccountingApi.CreatePurchaseOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PurchaseOrders>("/PurchaseOrders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePurchaseOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates attachment for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateQuoteAttachmentByFileName(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateQuoteAttachmentByFileNameWithHttpInfo(xeroTenantId, quoteID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates attachment for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateQuoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateQuoteAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateQuoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/Quotes/{QuoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates attachment for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateQuoteAttachmentByFileNameAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateQuoteAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, quoteID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates attachment for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateQuoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateQuoteAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateQuoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/Quotes/{QuoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateQuoteHistory(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateQuoteHistoryWithHttpInfo(xeroTenantId, quoteID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateQuoteHistoryWithHttpInfo(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateQuoteHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateQuoteHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateQuoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Quotes/{QuoteID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateQuoteHistoryAsync(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateQuoteHistoryWithHttpInfoAsync(xeroTenantId, quoteID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateQuoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid quoteID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateQuoteHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateQuoteHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateQuoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Quotes/{QuoteID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        public Quotes CreateQuotes(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = CreateQuotesWithHttpInfo(xeroTenantId, quotes, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Quotes> CreateQuotesWithHttpInfo(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateQuotes");
            }

            // verify the required parameter 'quotes' is set
            if (quotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'quotes' when calling AccountingApi->CreateQuotes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quotes;

            localVarRequestOptions.Operation = "AccountingApi.CreateQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Quotes>("/Quotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        public async System.Threading.Tasks.Task<Quotes> CreateQuotesAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = await CreateQuotesWithHttpInfoAsync(xeroTenantId, quotes, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes">Quotes with an array of Quote object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Quotes>> CreateQuotesWithHttpInfoAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateQuotes");
            }

            // verify the required parameter 'quotes' is set
            if (quotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'quotes' when calling AccountingApi->CreateQuotes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quotes;

            localVarRequestOptions.Operation = "AccountingApi.CreateQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Quotes>("/Quotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        public Receipts CreateReceipt(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = CreateReceiptWithHttpInfo(xeroTenantId, receipts, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Receipts> CreateReceiptWithHttpInfo(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceipt");
            }

            // verify the required parameter 'receipts' is set
            if (receipts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'receipts' when calling AccountingApi->CreateReceipt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = receipts;

            localVarRequestOptions.Operation = "AccountingApi.CreateReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Receipts>("/Receipts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> CreateReceiptAsync(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = await CreateReceiptWithHttpInfoAsync(xeroTenantId, receipts, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts">Receipts with an array of Receipt object in body of request</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Receipts>> CreateReceiptWithHttpInfoAsync(string xeroTenantId, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceipt");
            }

            // verify the required parameter 'receipts' is set
            if (receipts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'receipts' when calling AccountingApi->CreateReceipt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = receipts;

            localVarRequestOptions.Operation = "AccountingApi.CreateReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Receipts>("/Receipts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateReceiptAttachmentByFileName(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateReceiptAttachmentByFileNameWithHttpInfo(xeroTenantId, receiptID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateReceiptAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateReceiptAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateReceiptAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/Receipts/{ReceiptID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceiptAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateReceiptAttachmentByFileNameAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateReceiptAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, receiptID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateReceiptAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateReceiptAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateReceiptAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/Receipts/{ReceiptID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceiptAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateReceiptHistory(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateReceiptHistoryWithHttpInfo(xeroTenantId, receiptID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateReceiptHistoryWithHttpInfo(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceiptHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateReceiptHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateReceiptHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/Receipts/{ReceiptID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceiptHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateReceiptHistoryAsync(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateReceiptHistoryWithHttpInfoAsync(xeroTenantId, receiptID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateReceiptHistoryWithHttpInfoAsync(string xeroTenantId, Guid receiptID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceiptHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateReceiptHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateReceiptHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Receipts/{ReceiptID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceiptHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments CreateRepeatingInvoiceAttachmentByFileName(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = CreateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, repeatingInvoiceID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> CreateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateRepeatingInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepeatingInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateRepeatingInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await CreateRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> CreateRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.CreateRepeatingInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepeatingInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a  history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords CreateRepeatingInvoiceHistory(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = CreateRepeatingInvoiceHistoryWithHttpInfo(xeroTenantId, repeatingInvoiceID, historyRecords, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a  history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> CreateRepeatingInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoiceHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateRepeatingInvoiceHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateRepeatingInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HistoryRecords>("/RepeatingInvoices/{RepeatingInvoiceID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepeatingInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a  history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateRepeatingInvoiceHistoryAsync(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateRepeatingInvoiceHistoryWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, historyRecords, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a  history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords">HistoryRecords containing an array of HistoryRecord objects in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> CreateRepeatingInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoiceHistory");
            }

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateRepeatingInvoiceHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = historyRecords;

            localVarRequestOptions.Operation = "AccountingApi.CreateRepeatingInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HistoryRecords>("/RepeatingInvoices/{RepeatingInvoiceID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepeatingInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        public RepeatingInvoices CreateRepeatingInvoices(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = CreateRepeatingInvoicesWithHttpInfo(xeroTenantId, repeatingInvoices, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> CreateRepeatingInvoicesWithHttpInfo(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoices");
            }

            // verify the required parameter 'repeatingInvoices' is set
            if (repeatingInvoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repeatingInvoices' when calling AccountingApi->CreateRepeatingInvoices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = repeatingInvoices;

            localVarRequestOptions.Operation = "AccountingApi.CreateRepeatingInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RepeatingInvoices>("/RepeatingInvoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepeatingInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        public async System.Threading.Tasks.Task<RepeatingInvoices> CreateRepeatingInvoicesAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = await CreateRepeatingInvoicesWithHttpInfoAsync(xeroTenantId, repeatingInvoices, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices>> CreateRepeatingInvoicesWithHttpInfoAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoices");
            }

            // verify the required parameter 'repeatingInvoices' is set
            if (repeatingInvoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repeatingInvoices' when calling AccountingApi->CreateRepeatingInvoices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = repeatingInvoices;

            localVarRequestOptions.Operation = "AccountingApi.CreateRepeatingInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RepeatingInvoices>("/RepeatingInvoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRepeatingInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        public TaxRates CreateTaxRates(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = CreateTaxRatesWithHttpInfo(xeroTenantId, taxRates, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        public Org.OpenAPITools.Client.ApiResponse<TaxRates> CreateTaxRatesWithHttpInfo(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTaxRates");
            }

            // verify the required parameter 'taxRates' is set
            if (taxRates == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taxRates' when calling AccountingApi->CreateTaxRates");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = taxRates;

            localVarRequestOptions.Operation = "AccountingApi.CreateTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TaxRates>("/TaxRates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates one or more tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> CreateTaxRatesAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = await CreateTaxRatesWithHttpInfoAsync(xeroTenantId, taxRates, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates one or more tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates">TaxRates array with TaxRate object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TaxRates>> CreateTaxRatesWithHttpInfoAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTaxRates");
            }

            // verify the required parameter 'taxRates' is set
            if (taxRates == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taxRates' when calling AccountingApi->CreateTaxRates");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = taxRates;

            localVarRequestOptions.Operation = "AccountingApi.CreateTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TaxRates>("/TaxRates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create tracking categories 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        public TrackingCategories CreateTrackingCategory(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = CreateTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategory, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create tracking categories 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingCategories> CreateTrackingCategoryWithHttpInfo(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTrackingCategory");
            }

            // verify the required parameter 'trackingCategory' is set
            if (trackingCategory == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingCategory' when calling AccountingApi->CreateTrackingCategory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingCategory;

            localVarRequestOptions.Operation = "AccountingApi.CreateTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TrackingCategories>("/TrackingCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create tracking categories 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> CreateTrackingCategoryAsync(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = await CreateTrackingCategoryWithHttpInfoAsync(xeroTenantId, trackingCategory, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create tracking categories 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory">TrackingCategory object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingCategories>> CreateTrackingCategoryWithHttpInfoAsync(string xeroTenantId, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTrackingCategory");
            }

            // verify the required parameter 'trackingCategory' is set
            if (trackingCategory == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingCategory' when calling AccountingApi->CreateTrackingCategory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingCategory;

            localVarRequestOptions.Operation = "AccountingApi.CreateTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TrackingCategories>("/TrackingCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates options for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingOptions</returns>
        public TrackingOptions CreateTrackingOptions(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingOptions> localVarResponse = CreateTrackingOptionsWithHttpInfo(xeroTenantId, trackingCategoryID, trackingOption, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates options for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingOptions</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingOptions> CreateTrackingOptionsWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTrackingOptions");
            }

            // verify the required parameter 'trackingOption' is set
            if (trackingOption == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingOption' when calling AccountingApi->CreateTrackingOptions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingOption;

            localVarRequestOptions.Operation = "AccountingApi.CreateTrackingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrackingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates options for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingOptions</returns>
        public async System.Threading.Tasks.Task<TrackingOptions> CreateTrackingOptionsAsync(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingOptions> localVarResponse = await CreateTrackingOptionsWithHttpInfoAsync(xeroTenantId, trackingCategoryID, trackingOption, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates options for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption">TrackingOption object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingOptions>> CreateTrackingOptionsWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTrackingOptions");
            }

            // verify the required parameter 'trackingOption' is set
            if (trackingOption == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingOption' when calling AccountingApi->CreateTrackingOptions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingOption;

            localVarRequestOptions.Operation = "AccountingApi.CreateTrackingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrackingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        public Accounts DeleteAccount(string xeroTenantId, Guid accountID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = DeleteAccountWithHttpInfo(xeroTenantId, accountID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Accounts> DeleteAccountWithHttpInfo(string xeroTenantId, Guid accountID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteAccount");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Accounts>("/Accounts/{AccountID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> DeleteAccountAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = await DeleteAccountWithHttpInfoAsync(xeroTenantId, accountID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Accounts>> DeleteAccountWithHttpInfoAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteAccount");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Accounts>("/Accounts/{AccountID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        public BatchPayments DeleteBatchPayment(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = DeleteBatchPaymentWithHttpInfo(xeroTenantId, batchPaymentDelete, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<BatchPayments> DeleteBatchPaymentWithHttpInfo(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteBatchPayment");
            }

            // verify the required parameter 'batchPaymentDelete' is set
            if (batchPaymentDelete == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'batchPaymentDelete' when calling AccountingApi->DeleteBatchPayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = batchPaymentDelete;

            localVarRequestOptions.Operation = "AccountingApi.DeleteBatchPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPayments>("/BatchPayments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBatchPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        public async System.Threading.Tasks.Task<BatchPayments> DeleteBatchPaymentAsync(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = await DeleteBatchPaymentWithHttpInfoAsync(xeroTenantId, batchPaymentDelete, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BatchPayments>> DeleteBatchPaymentWithHttpInfoAsync(string xeroTenantId, BatchPaymentDelete batchPaymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteBatchPayment");
            }

            // verify the required parameter 'batchPaymentDelete' is set
            if (batchPaymentDelete == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'batchPaymentDelete' when calling AccountingApi->DeleteBatchPayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = batchPaymentDelete;

            localVarRequestOptions.Operation = "AccountingApi.DeleteBatchPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPayments>("/BatchPayments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBatchPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        public BatchPayments DeleteBatchPaymentByUrlParam(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = DeleteBatchPaymentByUrlParamWithHttpInfo(xeroTenantId, batchPaymentID, batchPaymentDeleteByUrlParam, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<BatchPayments> DeleteBatchPaymentByUrlParamWithHttpInfo(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteBatchPaymentByUrlParam");
            }

            // verify the required parameter 'batchPaymentDeleteByUrlParam' is set
            if (batchPaymentDeleteByUrlParam == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'batchPaymentDeleteByUrlParam' when calling AccountingApi->DeleteBatchPaymentByUrlParam");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = batchPaymentDeleteByUrlParam;

            localVarRequestOptions.Operation = "AccountingApi.DeleteBatchPaymentByUrlParam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchPayments>("/BatchPayments/{BatchPaymentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBatchPaymentByUrlParam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        public async System.Threading.Tasks.Task<BatchPayments> DeleteBatchPaymentByUrlParamAsync(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = await DeleteBatchPaymentByUrlParamWithHttpInfoAsync(xeroTenantId, batchPaymentID, batchPaymentDeleteByUrlParam, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific batch payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="batchPaymentDeleteByUrlParam"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BatchPayments>> DeleteBatchPaymentByUrlParamWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, BatchPaymentDeleteByUrlParam batchPaymentDeleteByUrlParam, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteBatchPaymentByUrlParam");
            }

            // verify the required parameter 'batchPaymentDeleteByUrlParam' is set
            if (batchPaymentDeleteByUrlParam == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'batchPaymentDeleteByUrlParam' when calling AccountingApi->DeleteBatchPaymentByUrlParam");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = batchPaymentDeleteByUrlParam;

            localVarRequestOptions.Operation = "AccountingApi.DeleteBatchPaymentByUrlParam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchPayments>("/BatchPayments/{BatchPaymentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBatchPaymentByUrlParam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteContactGroupContact(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0)
        {
            DeleteContactGroupContactWithHttpInfo(xeroTenantId, contactGroupID, contactID);
        }

        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteContactGroupContactWithHttpInfo(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteContactGroupContact");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteContactGroupContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ContactGroups/{ContactGroupID}/Contacts/{ContactID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactGroupContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactGroupContactAsync(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactGroupContactWithHttpInfoAsync(xeroTenantId, contactGroupID, contactID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a specific contact from a contact group using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteContactGroupContactWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteContactGroupContact");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteContactGroupContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ContactGroups/{ContactGroupID}/Contacts/{ContactID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactGroupContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes all contacts from a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteContactGroupContacts(string xeroTenantId, Guid contactGroupID, int operationIndex = 0)
        {
            DeleteContactGroupContactsWithHttpInfo(xeroTenantId, contactGroupID);
        }

        /// <summary>
        /// Deletes all contacts from a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteContactGroupContactsWithHttpInfo(string xeroTenantId, Guid contactGroupID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteContactGroupContacts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteContactGroupContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ContactGroups/{ContactGroupID}/Contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactGroupContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes all contacts from a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactGroupContactsAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactGroupContactsWithHttpInfoAsync(xeroTenantId, contactGroupID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes all contacts from a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteContactGroupContactsWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteContactGroupContacts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteContactGroupContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ContactGroups/{ContactGroupID}/Contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactGroupContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Allocation from a Credit Note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocation</returns>
        public Allocation DeleteCreditNoteAllocations(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Allocation> localVarResponse = DeleteCreditNoteAllocationsWithHttpInfo(xeroTenantId, creditNoteID, allocationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Allocation from a Credit Note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocation</returns>
        public Org.OpenAPITools.Client.ApiResponse<Allocation> DeleteCreditNoteAllocationsWithHttpInfo(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteCreditNoteAllocations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AllocationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allocationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteCreditNoteAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Allocation>("/CreditNotes/{CreditNoteID}/Allocations/{AllocationID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCreditNoteAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Allocation from a Credit Note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> DeleteCreditNoteAllocationsAsync(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Allocation> localVarResponse = await DeleteCreditNoteAllocationsWithHttpInfoAsync(xeroTenantId, creditNoteID, allocationID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Allocation from a Credit Note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Allocation>> DeleteCreditNoteAllocationsWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteCreditNoteAllocations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AllocationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allocationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteCreditNoteAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Allocation>("/CreditNotes/{CreditNoteID}/Allocations/{AllocationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCreditNoteAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteItem(string xeroTenantId, Guid itemID, int operationIndex = 0)
        {
            DeleteItemWithHttpInfo(xeroTenantId, itemID);
        }

        /// <summary>
        /// Deletes a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteItemWithHttpInfo(string xeroTenantId, Guid itemID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteItem");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Items/{ItemID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteItemWithHttpInfoAsync(xeroTenantId, itemID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteItemWithHttpInfoAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteItem");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Items/{ItemID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLinkedTransaction(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0)
        {
            DeleteLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransactionID);
        }

        /// <summary>
        /// Deletes a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeleteLinkedTransactionWithHttpInfo(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteLinkedTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LinkedTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/LinkedTransactions/{LinkedTransactionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLinkedTransactionAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteLinkedTransactionWithHttpInfoAsync(xeroTenantId, linkedTransactionID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeleteLinkedTransactionWithHttpInfoAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteLinkedTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LinkedTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/LinkedTransactions/{LinkedTransactionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Allocation from an overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocation</returns>
        public Allocation DeleteOverpaymentAllocations(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Allocation> localVarResponse = DeleteOverpaymentAllocationsWithHttpInfo(xeroTenantId, overpaymentID, allocationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Allocation from an overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocation</returns>
        public Org.OpenAPITools.Client.ApiResponse<Allocation> DeleteOverpaymentAllocationsWithHttpInfo(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteOverpaymentAllocations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AllocationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allocationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteOverpaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Allocation>("/Overpayments/{OverpaymentID}/Allocations/{AllocationID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOverpaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Allocation from an overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> DeleteOverpaymentAllocationsAsync(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Allocation> localVarResponse = await DeleteOverpaymentAllocationsWithHttpInfoAsync(xeroTenantId, overpaymentID, allocationID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Allocation from an overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Allocation>> DeleteOverpaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteOverpaymentAllocations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AllocationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allocationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteOverpaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Allocation>("/Overpayments/{OverpaymentID}/Allocations/{AllocationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOverpaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        public Payments DeletePayment(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = DeletePaymentWithHttpInfo(xeroTenantId, paymentID, paymentDelete, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Payments> DeletePaymentWithHttpInfo(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeletePayment");
            }

            // verify the required parameter 'paymentDelete' is set
            if (paymentDelete == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentDelete' when calling AccountingApi->DeletePayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentDelete;

            localVarRequestOptions.Operation = "AccountingApi.DeletePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Payments>("/Payments/{PaymentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> DeletePaymentAsync(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = await DeletePaymentWithHttpInfoAsync(xeroTenantId, paymentID, paymentDelete, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="paymentDelete"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Payments>> DeletePaymentWithHttpInfoAsync(string xeroTenantId, Guid paymentID, PaymentDelete paymentDelete, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeletePayment");
            }

            // verify the required parameter 'paymentDelete' is set
            if (paymentDelete == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentDelete' when calling AccountingApi->DeletePayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentDelete;

            localVarRequestOptions.Operation = "AccountingApi.DeletePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Payments>("/Payments/{PaymentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Allocation from a Prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Allocation</returns>
        public Allocation DeletePrepaymentAllocations(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Allocation> localVarResponse = DeletePrepaymentAllocationsWithHttpInfo(xeroTenantId, prepaymentID, allocationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Allocation from a Prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Allocation</returns>
        public Org.OpenAPITools.Client.ApiResponse<Allocation> DeletePrepaymentAllocationsWithHttpInfo(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeletePrepaymentAllocations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AllocationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allocationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeletePrepaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Allocation>("/Prepayments/{PrepaymentID}/Allocations/{AllocationID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrepaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an Allocation from a Prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> DeletePrepaymentAllocationsAsync(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Allocation> localVarResponse = await DeletePrepaymentAllocationsWithHttpInfoAsync(xeroTenantId, prepaymentID, allocationID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an Allocation from a Prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="allocationID">Unique identifier for Allocation object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Allocation>> DeletePrepaymentAllocationsWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, Guid allocationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeletePrepaymentAllocations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AllocationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(allocationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeletePrepaymentAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Allocation>("/Prepayments/{PrepaymentID}/Allocations/{AllocationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePrepaymentAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        public TrackingCategories DeleteTrackingCategory(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = DeleteTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategoryID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingCategories> DeleteTrackingCategoryWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteTrackingCategory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> DeleteTrackingCategoryAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = await DeleteTrackingCategoryWithHttpInfoAsync(xeroTenantId, trackingCategoryID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingCategories>> DeleteTrackingCategoryWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteTrackingCategory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingOptions</returns>
        public TrackingOptions DeleteTrackingOptions(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingOptions> localVarResponse = DeleteTrackingOptionsWithHttpInfo(xeroTenantId, trackingCategoryID, trackingOptionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingOptions</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingOptions> DeleteTrackingOptionsWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteTrackingOptions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TrackingOptionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingOptionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteTrackingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingOptions</returns>
        public async System.Threading.Tasks.Task<TrackingOptions> DeleteTrackingOptionsAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingOptions> localVarResponse = await DeleteTrackingOptionsWithHttpInfoAsync(xeroTenantId, trackingCategoryID, trackingOptionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingOptions>> DeleteTrackingOptionsWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteTrackingOptions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TrackingOptionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingOptionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.DeleteTrackingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EmailInvoice(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            EmailInvoiceWithHttpInfo(xeroTenantId, invoiceID, requestEmpty, idempotencyKey);
        }

        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> EmailInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->EmailInvoice");
            }

            // verify the required parameter 'requestEmpty' is set
            if (requestEmpty == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestEmpty' when calling AccountingApi->EmailInvoice");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = requestEmpty;

            localVarRequestOptions.Operation = "AccountingApi.EmailInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Invoices/{InvoiceID}/Email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmailInvoiceAsync(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EmailInvoiceWithHttpInfoAsync(xeroTenantId, invoiceID, requestEmpty, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sends a copy of a specific invoice to related contact via email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> EmailInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->EmailInvoice");
            }

            // verify the required parameter 'requestEmpty' is set
            if (requestEmpty == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestEmpty' when calling AccountingApi->EmailInvoice");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = requestEmpty;

            localVarRequestOptions.Operation = "AccountingApi.EmailInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Invoices/{InvoiceID}/Email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        public Accounts GetAccount(string xeroTenantId, Guid accountID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = GetAccountWithHttpInfo(xeroTenantId, accountID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Accounts> GetAccountWithHttpInfo(string xeroTenantId, Guid accountID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccount");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Accounts>("/Accounts/{AccountID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> GetAccountAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = await GetAccountWithHttpInfoAsync(xeroTenantId, accountID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single chart of accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Accounts>> GetAccountWithHttpInfoAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccount");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Accounts>("/Accounts/{AccountID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an attachment for a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetAccountAttachmentByFileName(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetAccountAttachmentByFileNameWithHttpInfo(xeroTenantId, accountID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an attachment for a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetAccountAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetAccountAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetAccountAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccountAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Accounts/{AccountID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an attachment for a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByFileNameAsync(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetAccountAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, accountID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an attachment for a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetAccountAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid accountID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetAccountAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetAccountAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccountAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Accounts/{AccountID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetAccountAttachmentById(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetAccountAttachmentByIdWithHttpInfo(xeroTenantId, accountID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetAccountAttachmentByIdWithHttpInfo(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetAccountAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccountAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Accounts/{AccountID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByIdAsync(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetAccountAttachmentByIdWithHttpInfoAsync(xeroTenantId, accountID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific account using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetAccountAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid accountID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetAccountAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccountAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Accounts/{AccountID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetAccountAttachments(string xeroTenantId, Guid accountID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetAccountAttachmentsWithHttpInfo(xeroTenantId, accountID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetAccountAttachmentsWithHttpInfo(string xeroTenantId, Guid accountID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccountAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/Accounts/{AccountID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetAccountAttachmentsAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetAccountAttachmentsWithHttpInfoAsync(xeroTenantId, accountID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific accounts by using a unique account Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetAccountAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid accountID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetAccountAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/Accounts/{AccountID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the full chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        public Accounts GetAccounts(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = GetAccountsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the full chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Accounts> GetAccountsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccounts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Accounts>("/Accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the full chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> GetAccountsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = await GetAccountsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the full chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Accounts>> GetAccountsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccounts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Accounts>("/Accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        public BankTransactions GetBankTransaction(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = GetBankTransactionWithHttpInfo(xeroTenantId, bankTransactionID, unitdp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransactions> GetBankTransactionWithHttpInfo(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BankTransactions>("/BankTransactions/{BankTransactionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> GetBankTransactionAsync(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = await GetBankTransactionWithHttpInfoAsync(xeroTenantId, bankTransactionID, unitdp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a single spent or received money transaction by using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransactions>> GetBankTransactionWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BankTransactions>("/BankTransactions/{BankTransactionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetBankTransactionAttachmentByFileName(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetBankTransactionAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransactionID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetBankTransactionAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransactionAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransactionAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, bankTransactionID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransactionAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetBankTransactionAttachmentById(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetBankTransactionAttachmentByIdWithHttpInfo(xeroTenantId, bankTransactionID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetBankTransactionAttachmentByIdWithHttpInfo(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransactionAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByIdAsync(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransactionAttachmentByIdWithHttpInfoAsync(xeroTenantId, bankTransactionID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific attachments from a specific BankTransaction using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransactionAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves any attachments from a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetBankTransactionAttachments(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetBankTransactionAttachmentsWithHttpInfo(xeroTenantId, bankTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves any attachments from a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetBankTransactionAttachmentsWithHttpInfo(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/BankTransactions/{BankTransactionID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves any attachments from a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetBankTransactionAttachmentsAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetBankTransactionAttachmentsWithHttpInfoAsync(xeroTenantId, bankTransactionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves any attachments from a specific bank transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetBankTransactionAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/BankTransactions/{BankTransactionID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves any spent or received money transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        public BankTransactions GetBankTransactions(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = GetBankTransactionsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves any spent or received money transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransactions> GetBankTransactionsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BankTransactions>("/BankTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves any spent or received money transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> GetBankTransactionsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = await GetBankTransactionsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves any spent or received money transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 bank transactions will be returned in a single API call with line items details (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransactions>> GetBankTransactionsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BankTransactions>("/BankTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetBankTransactionsHistory(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetBankTransactionsHistoryWithHttpInfo(xeroTenantId, bankTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetBankTransactionsHistoryWithHttpInfo(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionsHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionsHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/BankTransactions/{BankTransactionID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionsHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetBankTransactionsHistoryAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetBankTransactionsHistoryWithHttpInfoAsync(xeroTenantId, bankTransactionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history from a specific bank transaction using a unique bank transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetBankTransactionsHistoryWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionsHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransactionsHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/BankTransactions/{BankTransactionID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransactionsHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransfers</returns>
        public BankTransfers GetBankTransfer(string xeroTenantId, Guid bankTransferID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransfers> localVarResponse = GetBankTransferWithHttpInfo(xeroTenantId, bankTransferID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransfers</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransfers> GetBankTransferWithHttpInfo(string xeroTenantId, Guid bankTransferID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransfer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BankTransfers>("/BankTransfers/{BankTransferID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransfers</returns>
        public async System.Threading.Tasks.Task<BankTransfers> GetBankTransferAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransfers> localVarResponse = await GetBankTransferWithHttpInfoAsync(xeroTenantId, bankTransferID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific bank transfers by using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransfers>> GetBankTransferWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransfer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BankTransfers>("/BankTransfers/{BankTransferID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetBankTransferAttachmentByFileName(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetBankTransferAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransferID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetBankTransferAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransferAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransferAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, bankTransferID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific bank transfer by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransferAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetBankTransferAttachmentById(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetBankTransferAttachmentByIdWithHttpInfo(xeroTenantId, bankTransferID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetBankTransferAttachmentByIdWithHttpInfo(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransferAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/BankTransfers/{BankTransferID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByIdAsync(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransferAttachmentByIdWithHttpInfoAsync(xeroTenantId, bankTransferID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific bank transfer using a unique attachment ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransferAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransfers/{BankTransferID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments from a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetBankTransferAttachments(string xeroTenantId, Guid bankTransferID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetBankTransferAttachmentsWithHttpInfo(xeroTenantId, bankTransferID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments from a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetBankTransferAttachmentsWithHttpInfo(string xeroTenantId, Guid bankTransferID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/BankTransfers/{BankTransferID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments from a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetBankTransferAttachmentsAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetBankTransferAttachmentsWithHttpInfoAsync(xeroTenantId, bankTransferID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments from a specific bank transfer 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetBankTransferAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/BankTransfers/{BankTransferID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetBankTransferHistory(string xeroTenantId, Guid bankTransferID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetBankTransferHistoryWithHttpInfo(xeroTenantId, bankTransferID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetBankTransferHistoryWithHttpInfo(string xeroTenantId, Guid bankTransferID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/BankTransfers/{BankTransferID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetBankTransferHistoryAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetBankTransferHistoryWithHttpInfoAsync(xeroTenantId, bankTransferID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history from a specific bank transfer using a unique bank transfer Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetBankTransferHistoryWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransferHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/BankTransfers/{BankTransferID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransferHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all bank transfers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransfers</returns>
        public BankTransfers GetBankTransfers(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransfers> localVarResponse = GetBankTransfersWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all bank transfers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransfers</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransfers> GetBankTransfersWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransfers");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransfers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BankTransfers>("/BankTransfers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransfers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all bank transfers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransfers</returns>
        public async System.Threading.Tasks.Task<BankTransfers> GetBankTransfersAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransfers> localVarResponse = await GetBankTransfersWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all bank transfers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransfers>> GetBankTransfersWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransfers");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetBankTransfers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BankTransfers>("/BankTransfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBankTransfers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        public BatchPayments GetBatchPayment(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = GetBatchPaymentWithHttpInfo(xeroTenantId, batchPaymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<BatchPayments> GetBatchPaymentWithHttpInfo(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBatchPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BatchPayments>("/BatchPayments/{BatchPaymentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        public async System.Threading.Tasks.Task<BatchPayments> GetBatchPaymentAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = await GetBatchPaymentWithHttpInfoAsync(xeroTenantId, batchPaymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific batch payment using a unique batch payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BatchPayments>> GetBatchPaymentWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBatchPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BatchPayments>("/BatchPayments/{BatchPaymentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history from a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetBatchPaymentHistory(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetBatchPaymentHistoryWithHttpInfo(xeroTenantId, batchPaymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history from a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetBatchPaymentHistoryWithHttpInfo(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPaymentHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBatchPaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/BatchPayments/{BatchPaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchPaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history from a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetBatchPaymentHistoryAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetBatchPaymentHistoryWithHttpInfoAsync(xeroTenantId, batchPaymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history from a specific batch payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetBatchPaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid batchPaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPaymentHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BatchPaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBatchPaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/BatchPayments/{BatchPaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchPaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves either one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchPayments</returns>
        public BatchPayments GetBatchPayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = GetBatchPaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves either one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchPayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<BatchPayments> GetBatchPaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPayments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetBatchPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BatchPayments>("/BatchPayments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves either one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchPayments</returns>
        public async System.Threading.Tasks.Task<BatchPayments> GetBatchPaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BatchPayments> localVarResponse = await GetBatchPaymentsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves either one or many batch payments for invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BatchPayments>> GetBatchPaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPayments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetBatchPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BatchPayments>("/BatchPayments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBatchPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrandingThemes</returns>
        public BrandingThemes GetBrandingTheme(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BrandingThemes> localVarResponse = GetBrandingThemeWithHttpInfo(xeroTenantId, brandingThemeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrandingThemes</returns>
        public Org.OpenAPITools.Client.ApiResponse<BrandingThemes> GetBrandingThemeWithHttpInfo(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingTheme");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BrandingThemeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBrandingTheme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BrandingThemes>("/BrandingThemes/{BrandingThemeID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandingTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrandingThemes</returns>
        public async System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemeAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BrandingThemes> localVarResponse = await GetBrandingThemeWithHttpInfoAsync(xeroTenantId, brandingThemeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific branding theme using a unique branding theme Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BrandingThemes>> GetBrandingThemeWithHttpInfoAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingTheme");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BrandingThemeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBrandingTheme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BrandingThemes>("/BrandingThemes/{BrandingThemeID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandingTheme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the payment services for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        public PaymentServices GetBrandingThemePaymentServices(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = GetBrandingThemePaymentServicesWithHttpInfo(xeroTenantId, brandingThemeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the payment services for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentServices> GetBrandingThemePaymentServicesWithHttpInfo(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingThemePaymentServices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BrandingThemeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBrandingThemePaymentServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentServices>("/BrandingThemes/{BrandingThemeID}/PaymentServices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandingThemePaymentServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the payment services for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> GetBrandingThemePaymentServicesAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = await GetBrandingThemePaymentServicesWithHttpInfoAsync(xeroTenantId, brandingThemeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the payment services for a specific branding theme 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentServices>> GetBrandingThemePaymentServicesWithHttpInfoAsync(string xeroTenantId, Guid brandingThemeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingThemePaymentServices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BrandingThemeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBrandingThemePaymentServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentServices>("/BrandingThemes/{BrandingThemeID}/PaymentServices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandingThemePaymentServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the branding themes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrandingThemes</returns>
        public BrandingThemes GetBrandingThemes(string xeroTenantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BrandingThemes> localVarResponse = GetBrandingThemesWithHttpInfo(xeroTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the branding themes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrandingThemes</returns>
        public Org.OpenAPITools.Client.ApiResponse<BrandingThemes> GetBrandingThemesWithHttpInfo(string xeroTenantId, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingThemes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBrandingThemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BrandingThemes>("/BrandingThemes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandingThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the branding themes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrandingThemes</returns>
        public async System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemesAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BrandingThemes> localVarResponse = await GetBrandingThemesWithHttpInfoAsync(xeroTenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the branding themes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BrandingThemes>> GetBrandingThemesWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingThemes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBrandingThemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BrandingThemes>("/BrandingThemes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandingThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific budget, which includes budget lines 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Budgets</returns>
        public Budgets GetBudget(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Budgets> localVarResponse = GetBudgetWithHttpInfo(xeroTenantId, budgetID, dateTo, dateFrom);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific budget, which includes budget lines 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Budgets</returns>
        public Org.OpenAPITools.Client.ApiResponse<Budgets> GetBudgetWithHttpInfo(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBudget");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BudgetID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(budgetID)); // path parameter
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Budgets>("/Budgets/{BudgetID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific budget, which includes budget lines 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Budgets</returns>
        public async System.Threading.Tasks.Task<Budgets> GetBudgetAsync(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Budgets> localVarResponse = await GetBudgetWithHttpInfoAsync(xeroTenantId, budgetID, dateTo, dateFrom, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific budget, which includes budget lines 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="budgetID">Unique identifier for Budgets</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Budgets)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Budgets>> GetBudgetWithHttpInfoAsync(string xeroTenantId, Guid budgetID, DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBudget");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BudgetID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(budgetID)); // path parameter
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Budgets>("/Budgets/{BudgetID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of budgets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Budgets</returns>
        public Budgets GetBudgets(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Budgets> localVarResponse = GetBudgetsWithHttpInfo(xeroTenantId, iDs, dateTo, dateFrom);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of budgets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Budgets</returns>
        public Org.OpenAPITools.Client.ApiResponse<Budgets> GetBudgetsWithHttpInfo(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBudgets");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (iDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "IDs", iDs));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBudgets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Budgets>("/Budgets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudgets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of budgets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Budgets</returns>
        public async System.Threading.Tasks.Task<Budgets> GetBudgetsAsync(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Budgets> localVarResponse = await GetBudgetsWithHttpInfoAsync(xeroTenantId, iDs, dateTo, dateFrom, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of budgets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="iDs">Filter by BudgetID. Allows you to retrieve a specific individual budget. (optional)</param>
        /// <param name="dateTo">Filter by start date (optional)</param>
        /// <param name="dateFrom">Filter by end date (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Budgets)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Budgets>> GetBudgetsWithHttpInfoAsync(string xeroTenantId, List<Guid>? iDs = default(List<Guid>?), DateOnly? dateTo = default(DateOnly?), DateOnly? dateFrom = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBudgets");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (iDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "IDs", iDs));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetBudgets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Budgets>("/Budgets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBudgets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        public Contacts GetContact(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = GetContactWithHttpInfo(xeroTenantId, contactID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Contacts> GetContactWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContact");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Contacts>("/Contacts/{ContactID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> GetContactAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = await GetContactWithHttpInfoAsync(xeroTenantId, contactID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific contacts in a Xero organisation using a unique contact Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Contacts>> GetContactWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContact");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Contacts>("/Contacts/{ContactID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetContactAttachmentByFileName(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetContactAttachmentByFileNameWithHttpInfo(xeroTenantId, contactID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetContactAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetContactAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetContactAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Contacts/{ContactID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByFileNameAsync(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetContactAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, contactID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetContactAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid contactID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetContactAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetContactAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Contacts/{ContactID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetContactAttachmentById(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetContactAttachmentByIdWithHttpInfo(xeroTenantId, contactID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetContactAttachmentByIdWithHttpInfo(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetContactAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Contacts/{ContactID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByIdAsync(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetContactAttachmentByIdWithHttpInfoAsync(xeroTenantId, contactID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific contact using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetContactAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid contactID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetContactAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Contacts/{ContactID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetContactAttachments(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetContactAttachmentsWithHttpInfo(xeroTenantId, contactID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetContactAttachmentsWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/Contacts/{ContactID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetContactAttachmentsAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetContactAttachmentsWithHttpInfoAsync(xeroTenantId, contactID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetContactAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/Contacts/{ContactID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        public Contacts GetContactByContactNumber(string xeroTenantId, string contactNumber, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = GetContactByContactNumberWithHttpInfo(xeroTenantId, contactNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Contacts> GetContactByContactNumberWithHttpInfo(string xeroTenantId, string contactNumber, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactByContactNumber");
            }

            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactNumber' when calling AccountingApi->GetContactByContactNumber");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactByContactNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Contacts>("/Contacts/{ContactNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactByContactNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> GetContactByContactNumberAsync(string xeroTenantId, string contactNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = await GetContactByContactNumberWithHttpInfoAsync(xeroTenantId, contactNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific contact by contact number in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactNumber">This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Contacts>> GetContactByContactNumberWithHttpInfoAsync(string xeroTenantId, string contactNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactByContactNumber");
            }

            // verify the required parameter 'contactNumber' is set
            if (contactNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactNumber' when calling AccountingApi->GetContactByContactNumber");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactByContactNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Contacts>("/Contacts/{ContactNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactByContactNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CISSettings</returns>
        public CISSettings GetContactCISSettings(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CISSettings> localVarResponse = GetContactCISSettingsWithHttpInfo(xeroTenantId, contactID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CISSettings</returns>
        public Org.OpenAPITools.Client.ApiResponse<CISSettings> GetContactCISSettingsWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactCISSettings");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactCISSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CISSettings>("/Contacts/{ContactID}/CISSettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCISSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CISSettings</returns>
        public async System.Threading.Tasks.Task<CISSettings> GetContactCISSettingsAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CISSettings> localVarResponse = await GetContactCISSettingsWithHttpInfoAsync(xeroTenantId, contactID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves CIS settings for a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CISSettings)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CISSettings>> GetContactCISSettingsWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactCISSettings");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactCISSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CISSettings>("/Contacts/{ContactID}/CISSettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCISSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        public ContactGroups GetContactGroup(string xeroTenantId, Guid contactGroupID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = GetContactGroupWithHttpInfo(xeroTenantId, contactGroupID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContactGroups> GetContactGroupWithHttpInfo(string xeroTenantId, Guid contactGroupID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ContactGroups>("/ContactGroups/{ContactGroupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> GetContactGroupAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = await GetContactGroupWithHttpInfoAsync(xeroTenantId, contactGroupID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific contact group by using a unique contact group Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContactGroups>> GetContactGroupWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactGroups>("/ContactGroups/{ContactGroupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the contact Id and name of each contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        public ContactGroups GetContactGroups(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = GetContactGroupsWithHttpInfo(xeroTenantId, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the contact Id and name of each contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContactGroups> GetContactGroupsWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactGroups");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ContactGroups>("/ContactGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the contact Id and name of each contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> GetContactGroupsAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = await GetContactGroupsWithHttpInfoAsync(xeroTenantId, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the contact Id and name of each contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContactGroups>> GetContactGroupsWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactGroups");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactGroups>("/ContactGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetContactHistory(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetContactHistoryWithHttpInfo(xeroTenantId, contactID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetContactHistoryWithHttpInfo(string xeroTenantId, Guid contactID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Contacts/{ContactID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetContactHistoryAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetContactHistoryWithHttpInfoAsync(xeroTenantId, contactID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records for a specific contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetContactHistoryWithHttpInfoAsync(string xeroTenantId, Guid contactID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetContactHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Contacts/{ContactID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        public Contacts GetContacts(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = GetContactsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, iDs, page, includeArchived, summaryOnly, searchTerm, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Contacts> GetContactsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContacts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (iDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "IDs", iDs));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includeArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived));
            }
            if (summaryOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summaryOnly", summaryOnly));
            }
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Contacts>("/Contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> GetContactsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = await GetContactsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, iDs, page, includeArchived, summaryOnly, searchTerm, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Contacts>> GetContactsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? summaryOnly = default(bool?), string? searchTerm = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContacts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (iDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "IDs", iDs));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includeArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived));
            }
            if (summaryOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summaryOnly", summaryOnly));
            }
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Contacts>("/Contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        public CreditNotes GetCreditNote(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = GetCreditNoteWithHttpInfo(xeroTenantId, creditNoteID, unitdp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreditNotes> GetCreditNoteWithHttpInfo(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNote");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreditNotes>("/CreditNotes/{CreditNoteID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> GetCreditNoteAsync(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = await GetCreditNoteWithHttpInfoAsync(xeroTenantId, creditNoteID, unitdp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific credit note using a unique credit note Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreditNotes>> GetCreditNoteWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNote");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreditNotes>("/CreditNotes/{CreditNoteID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves credit notes as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCreditNoteAsPdf(string xeroTenantId, Guid creditNoteID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetCreditNoteAsPdfWithHttpInfo(xeroTenantId, creditNoteID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves credit notes as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetCreditNoteAsPdfWithHttpInfo(string xeroTenantId, Guid creditNoteID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAsPdf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/CreditNotes/{CreditNoteID}/pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves credit notes as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAsPdfAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCreditNoteAsPdfWithHttpInfoAsync(xeroTenantId, creditNoteID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves credit notes as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetCreditNoteAsPdfWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAsPdf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/CreditNotes/{CreditNoteID}/pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCreditNoteAttachmentByFileName(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetCreditNoteAttachmentByFileNameWithHttpInfo(xeroTenantId, creditNoteID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetCreditNoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetCreditNoteAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByFileNameAsync(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCreditNoteAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, creditNoteID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetCreditNoteAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCreditNoteAttachmentById(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetCreditNoteAttachmentByIdWithHttpInfo(xeroTenantId, creditNoteID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetCreditNoteAttachmentByIdWithHttpInfo(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetCreditNoteAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByIdAsync(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCreditNoteAttachmentByIdWithHttpInfoAsync(xeroTenantId, creditNoteID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific credit note using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetCreditNoteAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetCreditNoteAttachments(string xeroTenantId, Guid creditNoteID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetCreditNoteAttachmentsWithHttpInfo(xeroTenantId, creditNoteID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetCreditNoteAttachmentsWithHttpInfo(string xeroTenantId, Guid creditNoteID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/CreditNotes/{CreditNoteID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetCreditNoteAttachmentsAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetCreditNoteAttachmentsWithHttpInfoAsync(xeroTenantId, creditNoteID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetCreditNoteAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/CreditNotes/{CreditNoteID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetCreditNoteHistory(string xeroTenantId, Guid creditNoteID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetCreditNoteHistoryWithHttpInfo(xeroTenantId, creditNoteID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetCreditNoteHistoryWithHttpInfo(string xeroTenantId, Guid creditNoteID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/CreditNotes/{CreditNoteID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetCreditNoteHistoryAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetCreditNoteHistoryWithHttpInfoAsync(xeroTenantId, creditNoteID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetCreditNoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/CreditNotes/{CreditNoteID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves any credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        public CreditNotes GetCreditNotes(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = GetCreditNotesWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves any credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreditNotes> GetCreditNotesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNotes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreditNotes>("/CreditNotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves any credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> GetCreditNotesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = await GetCreditNotesWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves any credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreditNotes>> GetCreditNotesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNotes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetCreditNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreditNotes>("/CreditNotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCreditNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves currencies for your Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Currencies</returns>
        public Currencies GetCurrencies(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Currencies> localVarResponse = GetCurrenciesWithHttpInfo(xeroTenantId, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves currencies for your Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Currencies</returns>
        public Org.OpenAPITools.Client.ApiResponse<Currencies> GetCurrenciesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCurrencies");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCurrencies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Currencies>("/Currencies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrencies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves currencies for your Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Currencies</returns>
        public async System.Threading.Tasks.Task<Currencies> GetCurrenciesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Currencies> localVarResponse = await GetCurrenciesWithHttpInfoAsync(xeroTenantId, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves currencies for your Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Currencies>> GetCurrenciesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCurrencies");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetCurrencies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Currencies>("/Currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrencies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        public Employees GetEmployee(string xeroTenantId, Guid employeeID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = GetEmployeeWithHttpInfo(xeroTenantId, employeeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        public Org.OpenAPITools.Client.ApiResponse<Employees> GetEmployeeWithHttpInfo(string xeroTenantId, Guid employeeID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetEmployee");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("EmployeeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetEmployee";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Employees>("/Employees/{EmployeeID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmployee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeeAsync(string xeroTenantId, Guid employeeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = await GetEmployeeWithHttpInfoAsync(xeroTenantId, employeeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific employee used in Xero payrun using a unique employee Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Employees>> GetEmployeeWithHttpInfoAsync(string xeroTenantId, Guid employeeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetEmployee");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("EmployeeID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetEmployee";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Employees>("/Employees/{EmployeeID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmployee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        public Employees GetEmployees(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = GetEmployeesWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        public Org.OpenAPITools.Client.ApiResponse<Employees> GetEmployeesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetEmployees");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetEmployees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Employees>("/Employees", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmployees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = await GetEmployeesWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Employees>> GetEmployeesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetEmployees");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetEmployees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Employees>("/Employees", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmployees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        public ExpenseClaims GetExpenseClaim(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = GetExpenseClaimWithHttpInfo(xeroTenantId, expenseClaimID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        public Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> GetExpenseClaimWithHttpInfo(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaim");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetExpenseClaim";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExpenseClaims>("/ExpenseClaims/{ExpenseClaimID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseClaim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = await GetExpenseClaimWithHttpInfoAsync(xeroTenantId, expenseClaimID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific expense claim using a unique expense claim Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ExpenseClaims>> GetExpenseClaimWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaim");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetExpenseClaim";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExpenseClaims>("/ExpenseClaims/{ExpenseClaimID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseClaim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetExpenseClaimHistory(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetExpenseClaimHistoryWithHttpInfo(xeroTenantId, expenseClaimID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetExpenseClaimHistoryWithHttpInfo(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaimHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetExpenseClaimHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/ExpenseClaims/{ExpenseClaimID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseClaimHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetExpenseClaimHistoryAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetExpenseClaimHistoryWithHttpInfoAsync(xeroTenantId, expenseClaimID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific expense claim 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetExpenseClaimHistoryWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaimHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetExpenseClaimHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/ExpenseClaims/{ExpenseClaimID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseClaimHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        public ExpenseClaims GetExpenseClaims(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = GetExpenseClaimsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        public Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> GetExpenseClaimsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaims");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetExpenseClaims";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExpenseClaims>("/ExpenseClaims", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseClaims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = await GetExpenseClaimsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ExpenseClaims>> GetExpenseClaimsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaims");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetExpenseClaims";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExpenseClaims>("/ExpenseClaims", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseClaims", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        public Invoices GetInvoice(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = GetInvoiceWithHttpInfo(xeroTenantId, invoiceID, unitdp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<Invoices> GetInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoice");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Invoices>("/Invoices/{InvoiceID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> GetInvoiceAsync(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = await GetInvoiceWithHttpInfoAsync(xeroTenantId, invoiceID, unitdp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific sales invoice or purchase bill using a unique invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Invoices>> GetInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoice");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Invoices>("/Invoices/{InvoiceID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetInvoiceAsPdf(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetInvoiceAsPdfWithHttpInfo(xeroTenantId, invoiceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetInvoiceAsPdfWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAsPdf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Invoices/{InvoiceID}/pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAsPdfAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetInvoiceAsPdfWithHttpInfoAsync(xeroTenantId, invoiceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves invoices or purchase bills as PDF files 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetInvoiceAsPdfWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAsPdf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Invoices/{InvoiceID}/pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetInvoiceAttachmentByFileName(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, invoiceID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetInvoiceAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Invoices/{InvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetInvoiceAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, invoiceID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an attachment from a specific invoice or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetInvoiceAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Invoices/{InvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetInvoiceAttachmentById(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetInvoiceAttachmentByIdWithHttpInfo(xeroTenantId, invoiceID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetInvoiceAttachmentByIdWithHttpInfo(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetInvoiceAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Invoices/{InvoiceID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByIdAsync(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetInvoiceAttachmentByIdWithHttpInfoAsync(xeroTenantId, invoiceID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetInvoiceAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Invoices/{InvoiceID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetInvoiceAttachments(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetInvoiceAttachmentsWithHttpInfo(xeroTenantId, invoiceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetInvoiceAttachmentsWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/Invoices/{InvoiceID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetInvoiceAttachmentsAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetInvoiceAttachmentsWithHttpInfoAsync(xeroTenantId, invoiceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific invoice or purchase bill 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetInvoiceAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/Invoices/{InvoiceID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetInvoiceHistory(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetInvoiceHistoryWithHttpInfo(xeroTenantId, invoiceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Invoices/{InvoiceID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetInvoiceHistoryAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetInvoiceHistoryWithHttpInfoAsync(xeroTenantId, invoiceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records for a specific invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Invoices/{InvoiceID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves invoice reminder settings 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvoiceReminders</returns>
        public InvoiceReminders GetInvoiceReminders(string xeroTenantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InvoiceReminders> localVarResponse = GetInvoiceRemindersWithHttpInfo(xeroTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves invoice reminder settings 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvoiceReminders</returns>
        public Org.OpenAPITools.Client.ApiResponse<InvoiceReminders> GetInvoiceRemindersWithHttpInfo(string xeroTenantId, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceReminders");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceReminders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InvoiceReminders>("/InvoiceReminders/Settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceReminders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves invoice reminder settings 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvoiceReminders</returns>
        public async System.Threading.Tasks.Task<InvoiceReminders> GetInvoiceRemindersAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InvoiceReminders> localVarResponse = await GetInvoiceRemindersWithHttpInfoAsync(xeroTenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves invoice reminder settings 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvoiceReminders)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InvoiceReminders>> GetInvoiceRemindersWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceReminders");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetInvoiceReminders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InvoiceReminders>("/InvoiceReminders/Settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoiceReminders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        public Invoices GetInvoices(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = GetInvoicesWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, iDs, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp, summaryOnly, pageSize, searchTerm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<Invoices> GetInvoicesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (iDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "IDs", iDs));
            }
            if (invoiceNumbers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "InvoiceNumbers", invoiceNumbers));
            }
            if (contactIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "ContactIDs", contactIDs));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "Statuses", statuses));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includeArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived));
            }
            if (createdByMyApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "createdByMyApp", createdByMyApp));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (summaryOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summaryOnly", summaryOnly));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Invoices>("/Invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> GetInvoicesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = await GetInvoicesWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, iDs, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp, summaryOnly, pageSize, searchTerm, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Invoices with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="summaryOnly">Use summaryOnly&#x3D;true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient. (optional, default to false)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="searchTerm">Search parameter that performs a case-insensitive text search across the fields e.g. InvoiceNumber, Reference. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Invoices>> GetInvoicesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), List<Guid>? iDs = default(List<Guid>?), List<string>? invoiceNumbers = default(List<string>?), List<Guid>? contactIDs = default(List<Guid>?), List<string>? statuses = default(List<string>?), int? page = default(int?), bool? includeArchived = default(bool?), bool? createdByMyApp = default(bool?), int? unitdp = default(int?), bool? summaryOnly = default(bool?), int? pageSize = default(int?), string? searchTerm = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (iDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "IDs", iDs));
            }
            if (invoiceNumbers != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "InvoiceNumbers", invoiceNumbers));
            }
            if (contactIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "ContactIDs", contactIDs));
            }
            if (statuses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "Statuses", statuses));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includeArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived));
            }
            if (createdByMyApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "createdByMyApp", createdByMyApp));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (summaryOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summaryOnly", summaryOnly));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Invoices>("/Invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific item using a unique item Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        public Items GetItem(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = GetItemWithHttpInfo(xeroTenantId, itemID, unitdp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific item using a unique item Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        public Org.OpenAPITools.Client.ApiResponse<Items> GetItemWithHttpInfo(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItem");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Items>("/Items/{ItemID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific item using a unique item Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> GetItemAsync(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = await GetItemWithHttpInfoAsync(xeroTenantId, itemID, unitdp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific item using a unique item Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Items>> GetItemWithHttpInfoAsync(string xeroTenantId, Guid itemID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItem");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Items>("/Items/{ItemID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetItemHistory(string xeroTenantId, Guid itemID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetItemHistoryWithHttpInfo(xeroTenantId, itemID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetItemHistoryWithHttpInfo(string xeroTenantId, Guid itemID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItemHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetItemHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Items/{ItemID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetItemHistoryAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetItemHistoryWithHttpInfoAsync(xeroTenantId, itemID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history for a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetItemHistoryWithHttpInfoAsync(string xeroTenantId, Guid itemID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItemHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetItemHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Items/{ItemID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        public Items GetItems(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = GetItemsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, unitdp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        public Org.OpenAPITools.Client.ApiResponse<Items> GetItemsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Items>("/Items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> GetItemsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = await GetItemsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, unitdp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Items>> GetItemsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Items>("/Items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal Id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Journals</returns>
        public Journals GetJournal(string xeroTenantId, Guid journalID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Journals> localVarResponse = GetJournalWithHttpInfo(xeroTenantId, journalID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal Id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Journals</returns>
        public Org.OpenAPITools.Client.ApiResponse<Journals> GetJournalWithHttpInfo(string xeroTenantId, Guid journalID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournal");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("JournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(journalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetJournal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Journals>("/Journals/{JournalID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal Id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Journals</returns>
        public async System.Threading.Tasks.Task<Journals> GetJournalAsync(string xeroTenantId, Guid journalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Journals> localVarResponse = await GetJournalWithHttpInfoAsync(xeroTenantId, journalID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal Id. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Journals>> GetJournalWithHttpInfoAsync(string xeroTenantId, Guid journalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournal");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("JournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(journalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetJournal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Journals>("/Journals/{JournalID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Journals</returns>
        public Journals GetJournalByNumber(string xeroTenantId, int journalNumber, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Journals> localVarResponse = GetJournalByNumberWithHttpInfo(xeroTenantId, journalNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Journals</returns>
        public Org.OpenAPITools.Client.ApiResponse<Journals> GetJournalByNumberWithHttpInfo(string xeroTenantId, int journalNumber, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournalByNumber");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("JournalNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(journalNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetJournalByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Journals>("/Journals/{JournalNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournalByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Journals</returns>
        public async System.Threading.Tasks.Task<Journals> GetJournalByNumberAsync(string xeroTenantId, int journalNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Journals> localVarResponse = await GetJournalByNumberWithHttpInfoAsync(xeroTenantId, journalNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific journal using a unique journal number. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalNumber">Number of a Journal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Journals>> GetJournalByNumberWithHttpInfoAsync(string xeroTenantId, int journalNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournalByNumber");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("JournalNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(journalNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetJournalByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Journals>("/Journals/{JournalNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournalByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Journals</returns>
        public Journals GetJournals(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Journals> localVarResponse = GetJournalsWithHttpInfo(xeroTenantId, ifModifiedSince, offset, paymentsOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Journals</returns>
        public Org.OpenAPITools.Client.ApiResponse<Journals> GetJournalsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournals");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Journals>("/Journals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Journals</returns>
        public async System.Threading.Tasks.Task<Journals> GetJournalsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Journals> localVarResponse = await GetJournalsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, offset, paymentsOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Journals>> GetJournalsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), int? offset = default(int?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournals");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Journals>("/Journals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        public LinkedTransactions GetLinkedTransaction(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = GetLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> GetLinkedTransactionWithHttpInfo(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetLinkedTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LinkedTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LinkedTransactions>("/LinkedTransactions/{LinkedTransactionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = await GetLinkedTransactionWithHttpInfoAsync(xeroTenantId, linkedTransactionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LinkedTransactions>> GetLinkedTransactionWithHttpInfoAsync(string xeroTenantId, Guid linkedTransactionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetLinkedTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LinkedTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LinkedTransactions>("/LinkedTransactions/{LinkedTransactionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        public LinkedTransactions GetLinkedTransactions(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = GetLinkedTransactionsWithHttpInfo(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> GetLinkedTransactionsWithHttpInfo(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetLinkedTransactions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (linkedTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "LinkedTransactionID", linkedTransactionID));
            }
            if (sourceTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "SourceTransactionID", sourceTransactionID));
            }
            if (contactID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContactID", contactID));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            if (targetTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TargetTransactionID", targetTransactionID));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetLinkedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LinkedTransactions>("/LinkedTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLinkedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionsAsync(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = await GetLinkedTransactionsWithHttpInfoAsync(xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LinkedTransactions>> GetLinkedTransactionsWithHttpInfoAsync(string xeroTenantId, int? page = default(int?), Guid? linkedTransactionID = default(Guid?), Guid? sourceTransactionID = default(Guid?), Guid? contactID = default(Guid?), string? status = default(string?), Guid? targetTransactionID = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetLinkedTransactions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (linkedTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "LinkedTransactionID", linkedTransactionID));
            }
            if (sourceTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "SourceTransactionID", sourceTransactionID));
            }
            if (contactID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContactID", contactID));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            if (targetTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "TargetTransactionID", targetTransactionID));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetLinkedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LinkedTransactions>("/LinkedTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLinkedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        public ManualJournals GetManualJournal(string xeroTenantId, Guid manualJournalID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = GetManualJournalWithHttpInfo(xeroTenantId, manualJournalID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManualJournals> GetManualJournalWithHttpInfo(string xeroTenantId, Guid manualJournalID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournal");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManualJournals>("/ManualJournals/{ManualJournalID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> GetManualJournalAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = await GetManualJournalWithHttpInfoAsync(xeroTenantId, manualJournalID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManualJournals>> GetManualJournalWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournal");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManualJournals>("/ManualJournals/{ManualJournalID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetManualJournalAttachmentByFileName(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetManualJournalAttachmentByFileNameWithHttpInfo(xeroTenantId, manualJournalID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetManualJournalAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetManualJournalAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByFileNameAsync(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetManualJournalAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, manualJournalID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetManualJournalAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetManualJournalAttachmentById(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetManualJournalAttachmentByIdWithHttpInfo(xeroTenantId, manualJournalID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetManualJournalAttachmentByIdWithHttpInfo(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetManualJournalAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByIdAsync(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetManualJournalAttachmentByIdWithHttpInfoAsync(xeroTenantId, manualJournalID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetManualJournalAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachment for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetManualJournalAttachments(string xeroTenantId, Guid manualJournalID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetManualJournalAttachmentsWithHttpInfo(xeroTenantId, manualJournalID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachment for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetManualJournalAttachmentsWithHttpInfo(string xeroTenantId, Guid manualJournalID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/ManualJournals/{ManualJournalID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachment for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetManualJournalAttachmentsAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetManualJournalAttachmentsWithHttpInfoAsync(xeroTenantId, manualJournalID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachment for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetManualJournalAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/ManualJournals/{ManualJournalID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        public ManualJournals GetManualJournals(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = GetManualJournalsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManualJournals> GetManualJournalsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournals");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManualJournals>("/ManualJournals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> GetManualJournalsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = await GetManualJournalsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves manual journals 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManualJournals>> GetManualJournalsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournals");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManualJournals>("/ManualJournals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetManualJournalsHistory(string xeroTenantId, Guid manualJournalID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetManualJournalsHistoryWithHttpInfo(xeroTenantId, manualJournalID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetManualJournalsHistoryWithHttpInfo(string xeroTenantId, Guid manualJournalID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalsHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalsHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/ManualJournals/{ManualJournalID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalsHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetManualJournalsHistoryAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetManualJournalsHistoryWithHttpInfoAsync(xeroTenantId, manualJournalID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history for a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetManualJournalsHistoryWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalsHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetManualJournalsHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/ManualJournals/{ManualJournalID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournalsHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a URL to an online invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OnlineInvoices</returns>
        public OnlineInvoices GetOnlineInvoice(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<OnlineInvoices> localVarResponse = GetOnlineInvoiceWithHttpInfo(xeroTenantId, invoiceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a URL to an online invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OnlineInvoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<OnlineInvoices> GetOnlineInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOnlineInvoice");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOnlineInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OnlineInvoices>("/Invoices/{InvoiceID}/OnlineInvoice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOnlineInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a URL to an online invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OnlineInvoices</returns>
        public async System.Threading.Tasks.Task<OnlineInvoices> GetOnlineInvoiceAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OnlineInvoices> localVarResponse = await GetOnlineInvoiceWithHttpInfoAsync(xeroTenantId, invoiceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a URL to an online invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OnlineInvoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OnlineInvoices>> GetOnlineInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOnlineInvoice");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOnlineInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OnlineInvoices>("/Invoices/{InvoiceID}/OnlineInvoice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOnlineInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Actions</returns>
        public Actions GetOrganisationActions(string xeroTenantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Actions> localVarResponse = GetOrganisationActionsWithHttpInfo(xeroTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Actions</returns>
        public Org.OpenAPITools.Client.ApiResponse<Actions> GetOrganisationActionsWithHttpInfo(string xeroTenantId, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisationActions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOrganisationActions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Actions>("/Organisation/Actions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationActions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Actions</returns>
        public async System.Threading.Tasks.Task<Actions> GetOrganisationActionsAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Actions> localVarResponse = await GetOrganisationActionsWithHttpInfoAsync(xeroTenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Actions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Actions>> GetOrganisationActionsWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisationActions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOrganisationActions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Actions>("/Organisation/Actions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationActions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CISOrgSettings</returns>
        public CISOrgSettings GetOrganisationCISSettings(string xeroTenantId, Guid organisationID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CISOrgSettings> localVarResponse = GetOrganisationCISSettingsWithHttpInfo(xeroTenantId, organisationID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CISOrgSettings</returns>
        public Org.OpenAPITools.Client.ApiResponse<CISOrgSettings> GetOrganisationCISSettingsWithHttpInfo(string xeroTenantId, Guid organisationID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisationCISSettings");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OrganisationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOrganisationCISSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CISOrgSettings>("/Organisation/{OrganisationID}/CISSettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationCISSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CISOrgSettings</returns>
        public async System.Threading.Tasks.Task<CISOrgSettings> GetOrganisationCISSettingsAsync(string xeroTenantId, Guid organisationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CISOrgSettings> localVarResponse = await GetOrganisationCISSettingsWithHttpInfoAsync(xeroTenantId, organisationID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the CIS settings for the Xero organistaion. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID">The unique Xero identifier for an organisation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CISOrgSettings)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CISOrgSettings>> GetOrganisationCISSettingsWithHttpInfoAsync(string xeroTenantId, Guid organisationID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisationCISSettings");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OrganisationID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organisationID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOrganisationCISSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CISOrgSettings>("/Organisation/{OrganisationID}/CISSettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationCISSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves Xero organisation details 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organisations</returns>
        public Organisations GetOrganisations(string xeroTenantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Organisations> localVarResponse = GetOrganisationsWithHttpInfo(xeroTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves Xero organisation details 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organisations</returns>
        public Org.OpenAPITools.Client.ApiResponse<Organisations> GetOrganisationsWithHttpInfo(string xeroTenantId, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisations");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOrganisations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Organisations>("/Organisation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves Xero organisation details 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organisations</returns>
        public async System.Threading.Tasks.Task<Organisations> GetOrganisationsAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Organisations> localVarResponse = await GetOrganisationsWithHttpInfoAsync(xeroTenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves Xero organisation details 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organisations)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Organisations>> GetOrganisationsWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisations");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOrganisations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Organisations>("/Organisation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Overpayments</returns>
        public Overpayments GetOverpayment(string xeroTenantId, Guid overpaymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Overpayments> localVarResponse = GetOverpaymentWithHttpInfo(xeroTenantId, overpaymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Overpayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Overpayments> GetOverpaymentWithHttpInfo(string xeroTenantId, Guid overpaymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOverpayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Overpayments>("/Overpayments/{OverpaymentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOverpayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Overpayments</returns>
        public async System.Threading.Tasks.Task<Overpayments> GetOverpaymentAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Overpayments> localVarResponse = await GetOverpaymentWithHttpInfoAsync(xeroTenantId, overpaymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific overpayment using a unique overpayment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Overpayments>> GetOverpaymentWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOverpayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Overpayments>("/Overpayments/{OverpaymentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOverpayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetOverpaymentHistory(string xeroTenantId, Guid overpaymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetOverpaymentHistoryWithHttpInfo(xeroTenantId, overpaymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetOverpaymentHistoryWithHttpInfo(string xeroTenantId, Guid overpaymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpaymentHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOverpaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Overpayments/{OverpaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOverpaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetOverpaymentHistoryAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetOverpaymentHistoryWithHttpInfoAsync(xeroTenantId, overpaymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific overpayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetOverpaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid overpaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpaymentHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("OverpaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetOverpaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Overpayments/{OverpaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOverpaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves overpayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Overpayments</returns>
        public Overpayments GetOverpayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Overpayments> localVarResponse = GetOverpaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves overpayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Overpayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Overpayments> GetOverpaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpayments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetOverpayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Overpayments>("/Overpayments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOverpayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves overpayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Overpayments</returns>
        public async System.Threading.Tasks.Task<Overpayments> GetOverpaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Overpayments> localVarResponse = await GetOverpaymentsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves overpayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Overpayments>> GetOverpaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpayments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetOverpayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Overpayments>("/Overpayments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOverpayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        public Payments GetPayment(string xeroTenantId, Guid paymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = GetPaymentWithHttpInfo(xeroTenantId, paymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Payments> GetPaymentWithHttpInfo(string xeroTenantId, Guid paymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Payments>("/Payments/{PaymentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> GetPaymentAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = await GetPaymentWithHttpInfoAsync(xeroTenantId, paymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific payment for invoices and credit notes using a unique payment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Payments>> GetPaymentWithHttpInfoAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Payments>("/Payments/{PaymentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetPaymentHistory(string xeroTenantId, Guid paymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetPaymentHistoryWithHttpInfo(xeroTenantId, paymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetPaymentHistoryWithHttpInfo(string xeroTenantId, Guid paymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPaymentHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Payments/{PaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetPaymentHistoryAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetPaymentHistoryWithHttpInfoAsync(xeroTenantId, paymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific payment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetPaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid paymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPaymentHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Payments/{PaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves payment services 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentServices</returns>
        public PaymentServices GetPaymentServices(string xeroTenantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = GetPaymentServicesWithHttpInfo(xeroTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves payment services 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentServices</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaymentServices> GetPaymentServicesWithHttpInfo(string xeroTenantId, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPaymentServices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPaymentServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymentServices>("/PaymentServices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves payment services 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> GetPaymentServicesAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaymentServices> localVarResponse = await GetPaymentServicesWithHttpInfoAsync(xeroTenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves payment services 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentServices>> GetPaymentServicesWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPaymentServices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPaymentServices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaymentServices>("/PaymentServices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPaymentServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payments</returns>
        public Payments GetPayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = GetPaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Payments> GetPaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPayments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Payments>("/Payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> GetPaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Payments> localVarResponse = await GetPaymentsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">Up to 100 payments will be returned in a single API call (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Payments>> GetPaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPayments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetPayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Payments>("/Payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to retrieve a specified prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Prepayments</returns>
        public Prepayments GetPrepayment(string xeroTenantId, Guid prepaymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Prepayments> localVarResponse = GetPrepaymentWithHttpInfo(xeroTenantId, prepaymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to retrieve a specified prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Prepayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Prepayments> GetPrepaymentWithHttpInfo(string xeroTenantId, Guid prepaymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepayment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPrepayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Prepayments>("/Prepayments/{PrepaymentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrepayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to retrieve a specified prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Prepayments</returns>
        public async System.Threading.Tasks.Task<Prepayments> GetPrepaymentAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Prepayments> localVarResponse = await GetPrepaymentWithHttpInfoAsync(xeroTenantId, prepaymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to retrieve a specified prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Prepayments>> GetPrepaymentWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepayment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPrepayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Prepayments>("/Prepayments/{PrepaymentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrepayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetPrepaymentHistory(string xeroTenantId, Guid prepaymentID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetPrepaymentHistoryWithHttpInfo(xeroTenantId, prepaymentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetPrepaymentHistoryWithHttpInfo(string xeroTenantId, Guid prepaymentID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepaymentHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPrepaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Prepayments/{PrepaymentID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrepaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetPrepaymentHistoryAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetPrepaymentHistoryWithHttpInfoAsync(xeroTenantId, prepaymentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history record for a specific prepayment 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetPrepaymentHistoryWithHttpInfoAsync(string xeroTenantId, Guid prepaymentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepaymentHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PrepaymentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPrepaymentHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Prepayments/{PrepaymentID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrepaymentHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Prepayments</returns>
        public Prepayments GetPrepayments(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Prepayments> localVarResponse = GetPrepaymentsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Prepayments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Prepayments> GetPrepaymentsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepayments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetPrepayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Prepayments>("/Prepayments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrepayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Prepayments</returns>
        public async System.Threading.Tasks.Task<Prepayments> GetPrepaymentsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Prepayments> localVarResponse = await GetPrepaymentsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, page, unitdp, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves prepayments 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Prepayments>> GetPrepaymentsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? page = default(int?), int? unitdp = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepayments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetPrepayments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Prepayments>("/Prepayments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPrepayments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        public PurchaseOrders GetPurchaseOrder(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = GetPurchaseOrderWithHttpInfo(xeroTenantId, purchaseOrderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        public Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> GetPurchaseOrderWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrderAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = await GetPurchaseOrderWithHttpInfoAsync(xeroTenantId, purchaseOrderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific purchase order using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PurchaseOrders>> GetPurchaseOrderWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPurchaseOrderAsPdf(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetPurchaseOrderAsPdfWithHttpInfo(xeroTenantId, purchaseOrderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetPurchaseOrderAsPdfWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAsPdf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/PurchaseOrders/{PurchaseOrderID}/pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPurchaseOrderAsPdfAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetPurchaseOrderAsPdfWithHttpInfoAsync(xeroTenantId, purchaseOrderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific purchase order as PDF files using a unique purchase order Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetPurchaseOrderAsPdfWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAsPdf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/PurchaseOrders/{PurchaseOrderID}/pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPurchaseOrderAttachmentByFileName(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetPurchaseOrderAttachmentByFileNameWithHttpInfo(xeroTenantId, purchaseOrderID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetPurchaseOrderAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetPurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetPurchaseOrderAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPurchaseOrderAttachmentByFileNameAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetPurchaseOrderAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, purchaseOrderID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetPurchaseOrderAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetPurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetPurchaseOrderAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetPurchaseOrderAttachmentById(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetPurchaseOrderAttachmentByIdWithHttpInfo(xeroTenantId, purchaseOrderID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetPurchaseOrderAttachmentByIdWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetPurchaseOrderAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetPurchaseOrderAttachmentByIdAsync(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetPurchaseOrderAttachmentByIdWithHttpInfoAsync(xeroTenantId, purchaseOrderID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific attachment for a specific purchase order using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetPurchaseOrderAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetPurchaseOrderAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetPurchaseOrderAttachments(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetPurchaseOrderAttachmentsWithHttpInfo(xeroTenantId, purchaseOrderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetPurchaseOrderAttachmentsWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/PurchaseOrders/{PurchaseOrderID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetPurchaseOrderAttachmentsAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetPurchaseOrderAttachmentsWithHttpInfoAsync(xeroTenantId, purchaseOrderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetPurchaseOrderAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/PurchaseOrders/{PurchaseOrderID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific purchase order using purchase order number 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        public PurchaseOrders GetPurchaseOrderByNumber(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = GetPurchaseOrderByNumberWithHttpInfo(xeroTenantId, purchaseOrderNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific purchase order using purchase order number 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        public Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> GetPurchaseOrderByNumberWithHttpInfo(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderByNumber");
            }

            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling AccountingApi->GetPurchaseOrderByNumber");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific purchase order using purchase order number 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrderByNumberAsync(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = await GetPurchaseOrderByNumberWithHttpInfoAsync(xeroTenantId, purchaseOrderNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific purchase order using purchase order number 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderNumber">Unique identifier for a PurchaseOrder</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PurchaseOrders>> GetPurchaseOrderByNumberWithHttpInfoAsync(string xeroTenantId, string purchaseOrderNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderByNumber");
            }

            // verify the required parameter 'purchaseOrderNumber' is set
            if (purchaseOrderNumber == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrderNumber' when calling AccountingApi->GetPurchaseOrderByNumber");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetPurchaseOrderHistory(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetPurchaseOrderHistoryWithHttpInfo(xeroTenantId, purchaseOrderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetPurchaseOrderHistoryWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/PurchaseOrders/{PurchaseOrderID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetPurchaseOrderHistoryAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetPurchaseOrderHistoryWithHttpInfoAsync(xeroTenantId, purchaseOrderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history for a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetPurchaseOrderHistoryWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrderHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/PurchaseOrders/{PurchaseOrderID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrderHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        public PurchaseOrders GetPurchaseOrders(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = GetPurchaseOrdersWithHttpInfo(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        public Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> GetPurchaseOrdersWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrders");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PurchaseOrders>("/PurchaseOrders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrdersAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = await GetPurchaseOrdersWithHttpInfoAsync(xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <param name="pageSize">Number of records to retrieve per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PurchaseOrders>> GetPurchaseOrdersWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? status = default(string?), string? dateFrom = default(string?), string? dateTo = default(string?), string? order = default(string?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrders");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetPurchaseOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PurchaseOrders>("/PurchaseOrders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPurchaseOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific quote using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        public Quotes GetQuote(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = GetQuoteWithHttpInfo(xeroTenantId, quoteID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific quote using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Quotes> GetQuoteWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuote");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Quotes>("/Quotes/{QuoteID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific quote using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        public async System.Threading.Tasks.Task<Quotes> GetQuoteAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = await GetQuoteWithHttpInfoAsync(xeroTenantId, quoteID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific quote using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Quotes>> GetQuoteWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuote");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Quotes>("/Quotes/{QuoteID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetQuoteAsPdf(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetQuoteAsPdfWithHttpInfo(xeroTenantId, quoteID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetQuoteAsPdfWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAsPdf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Quotes/{QuoteID}/pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetQuoteAsPdfAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetQuoteAsPdfWithHttpInfoAsync(xeroTenantId, quoteID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific quote as a PDF file using a unique quote Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetQuoteAsPdfWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAsPdf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAsPdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Quotes/{QuoteID}/pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAsPdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetQuoteAttachmentByFileName(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetQuoteAttachmentByFileNameWithHttpInfo(xeroTenantId, quoteID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetQuoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetQuoteAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetQuoteAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Quotes/{QuoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetQuoteAttachmentByFileNameAsync(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetQuoteAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, quoteID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetQuoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid quoteID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetQuoteAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetQuoteAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Quotes/{QuoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetQuoteAttachmentById(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetQuoteAttachmentByIdWithHttpInfo(xeroTenantId, quoteID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetQuoteAttachmentByIdWithHttpInfo(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetQuoteAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Quotes/{QuoteID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetQuoteAttachmentByIdAsync(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetQuoteAttachmentByIdWithHttpInfoAsync(xeroTenantId, quoteID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific quote using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetQuoteAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid quoteID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetQuoteAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Quotes/{QuoteID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetQuoteAttachments(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetQuoteAttachmentsWithHttpInfo(xeroTenantId, quoteID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetQuoteAttachmentsWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/Quotes/{QuoteID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetQuoteAttachmentsAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetQuoteAttachmentsWithHttpInfoAsync(xeroTenantId, quoteID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetQuoteAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/Quotes/{QuoteID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetQuoteHistory(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetQuoteHistoryWithHttpInfo(xeroTenantId, quoteID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetQuoteHistoryWithHttpInfo(string xeroTenantId, Guid quoteID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Quotes/{QuoteID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history records of a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetQuoteHistoryAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetQuoteHistoryWithHttpInfoAsync(xeroTenantId, quoteID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history records of a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetQuoteHistoryWithHttpInfoAsync(string xeroTenantId, Guid quoteID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuoteHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetQuoteHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Quotes/{QuoteID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves sales quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        public Quotes GetQuotes(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = GetQuotesWithHttpInfo(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves sales quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Quotes> GetQuotesWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuotes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (expiryDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ExpiryDateFrom", expiryDateFrom));
            }
            if (expiryDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ExpiryDateTo", expiryDateTo));
            }
            if (contactID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContactID", contactID));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (quoteNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "QuoteNumber", quoteNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Quotes>("/Quotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves sales quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        public async System.Threading.Tasks.Task<Quotes> GetQuotesAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = await GetQuotesWithHttpInfoAsync(xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order, quoteNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves sales quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="dateFrom">Filter for quotes after a particular date (optional)</param>
        /// <param name="dateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="expiryDateFrom">Filter for quotes expiring after a particular date (optional)</param>
        /// <param name="expiryDateTo">Filter for quotes before a particular date (optional)</param>
        /// <param name="contactID">Filter for quotes belonging to a particular contact (optional)</param>
        /// <param name="status">Filter for quotes of a particular Status (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="quoteNumber">Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber&#x3D;QU-0001) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Quotes>> GetQuotesWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), DateOnly? dateFrom = default(DateOnly?), DateOnly? dateTo = default(DateOnly?), DateOnly? expiryDateFrom = default(DateOnly?), DateOnly? expiryDateTo = default(DateOnly?), Guid? contactID = default(Guid?), string? status = default(string?), int? page = default(int?), string? order = default(string?), string? quoteNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetQuotes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (dateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom));
            }
            if (dateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo));
            }
            if (expiryDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ExpiryDateFrom", expiryDateFrom));
            }
            if (expiryDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ExpiryDateTo", expiryDateTo));
            }
            if (contactID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContactID", contactID));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (quoteNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "QuoteNumber", quoteNumber));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Quotes>("/Quotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        public Receipts GetReceipt(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = GetReceiptWithHttpInfo(xeroTenantId, receiptID, unitdp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Receipts> GetReceiptWithHttpInfo(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceipt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Receipts>("/Receipts/{ReceiptID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> GetReceiptAsync(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = await GetReceiptWithHttpInfoAsync(xeroTenantId, receiptID, unitdp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific draft expense claim receipt by using a unique receipt Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Receipts>> GetReceiptWithHttpInfoAsync(string xeroTenantId, Guid receiptID, int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceipt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Receipts>("/Receipts/{ReceiptID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetReceiptAttachmentByFileName(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetReceiptAttachmentByFileNameWithHttpInfo(xeroTenantId, receiptID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetReceiptAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetReceiptAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetReceiptAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Receipts/{ReceiptID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByFileNameAsync(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetReceiptAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, receiptID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetReceiptAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid receiptID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetReceiptAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetReceiptAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Receipts/{ReceiptID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetReceiptAttachmentById(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetReceiptAttachmentByIdWithHttpInfo(xeroTenantId, receiptID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetReceiptAttachmentByIdWithHttpInfo(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetReceiptAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/Receipts/{ReceiptID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByIdAsync(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetReceiptAttachmentByIdWithHttpInfoAsync(xeroTenantId, receiptID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetReceiptAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetReceiptAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Receipts/{ReceiptID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetReceiptAttachments(string xeroTenantId, Guid receiptID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetReceiptAttachmentsWithHttpInfo(xeroTenantId, receiptID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetReceiptAttachmentsWithHttpInfo(string xeroTenantId, Guid receiptID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/Receipts/{ReceiptID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetReceiptAttachmentsAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetReceiptAttachmentsWithHttpInfoAsync(xeroTenantId, receiptID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments for a specific expense claim receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetReceiptAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/Receipts/{ReceiptID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetReceiptHistory(string xeroTenantId, Guid receiptID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetReceiptHistoryWithHttpInfo(xeroTenantId, receiptID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetReceiptHistoryWithHttpInfo(string xeroTenantId, Guid receiptID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/Receipts/{ReceiptID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetReceiptHistoryAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetReceiptHistoryWithHttpInfoAsync(xeroTenantId, receiptID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a history record for a specific receipt 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetReceiptHistoryWithHttpInfoAsync(string xeroTenantId, Guid receiptID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReceiptHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Receipts/{ReceiptID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceiptHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        public Receipts GetReceipts(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = GetReceiptsWithHttpInfo(xeroTenantId, ifModifiedSince, where, order, unitdp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Receipts> GetReceiptsWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceipts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetReceipts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Receipts>("/Receipts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> GetReceiptsAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = await GetReceiptsWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, unitdp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Receipts>> GetReceiptsWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int? unitdp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceipts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetReceipts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Receipts>("/Receipts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        public RepeatingInvoices GetRepeatingInvoice(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = GetRepeatingInvoiceWithHttpInfo(xeroTenantId, repeatingInvoiceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> GetRepeatingInvoiceWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoice");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RepeatingInvoices>("/RepeatingInvoices/{RepeatingInvoiceID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        public async System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoiceAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = await GetRepeatingInvoiceWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific repeating invoice by using a unique repeating invoice Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices>> GetRepeatingInvoiceWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoice");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RepeatingInvoices>("/RepeatingInvoices/{RepeatingInvoiceID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRepeatingInvoiceAttachmentByFileName(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetRepeatingInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, repeatingInvoiceID, fileName, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetRepeatingInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, fileName, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetRepeatingInvoiceAttachmentById(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = GetRepeatingInvoiceAttachmentByIdWithHttpInfo(xeroTenantId, repeatingInvoiceID, attachmentID, contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> GetRepeatingInvoiceAttachmentByIdWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByIdAsync(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetRepeatingInvoiceAttachmentByIdWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, attachmentID, contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific attachment from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByIdWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");
            }

            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("AttachmentID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("contentType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceAttachmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceAttachmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments GetRepeatingInvoiceAttachments(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = GetRepeatingInvoiceAttachmentsWithHttpInfo(xeroTenantId, repeatingInvoiceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> GetRepeatingInvoiceAttachmentsWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves attachments from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetRepeatingInvoiceAttachmentsAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await GetRepeatingInvoiceAttachmentsWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves attachments from a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> GetRepeatingInvoiceAttachmentsWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceAttachments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceAttachments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryRecords</returns>
        public HistoryRecords GetRepeatingInvoiceHistory(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = GetRepeatingInvoiceHistoryWithHttpInfo(xeroTenantId, repeatingInvoiceID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryRecords</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryRecords> GetRepeatingInvoiceHistoryWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceHistory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HistoryRecords>("/RepeatingInvoices/{RepeatingInvoiceID}/History", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetRepeatingInvoiceHistoryAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryRecords> localVarResponse = await GetRepeatingInvoiceHistoryWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves history record for a specific repeating invoice 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryRecords>> GetRepeatingInvoiceHistoryWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceHistory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoiceHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HistoryRecords>("/RepeatingInvoices/{RepeatingInvoiceID}/History", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoiceHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves repeating invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        public RepeatingInvoices GetRepeatingInvoices(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = GetRepeatingInvoicesWithHttpInfo(xeroTenantId, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves repeating invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> GetRepeatingInvoicesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RepeatingInvoices>("/RepeatingInvoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves repeating invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        public async System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoicesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = await GetRepeatingInvoicesWithHttpInfoAsync(xeroTenantId, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves repeating invoices 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices>> GetRepeatingInvoicesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetRepeatingInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RepeatingInvoices>("/RepeatingInvoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRepeatingInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for aged payables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportAgedPayablesByContact(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportAgedPayablesByContactWithHttpInfo(xeroTenantId, contactId, date, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for aged payables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportAgedPayablesByContactWithHttpInfo(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportAgedPayablesByContact");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportAgedPayablesByContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/AgedPayablesByContact", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportAgedPayablesByContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for aged payables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportAgedPayablesByContactAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportAgedPayablesByContactWithHttpInfoAsync(xeroTenantId, contactId, date, fromDate, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for aged payables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportAgedPayablesByContactWithHttpInfoAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportAgedPayablesByContact");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportAgedPayablesByContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/AgedPayablesByContact", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportAgedPayablesByContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for aged receivables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportAgedReceivablesByContact(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportAgedReceivablesByContactWithHttpInfo(xeroTenantId, contactId, date, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for aged receivables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportAgedReceivablesByContactWithHttpInfo(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportAgedReceivablesByContact");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportAgedReceivablesByContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/AgedReceivablesByContact", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportAgedReceivablesByContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for aged receivables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportAgedReceivablesByContactAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportAgedReceivablesByContactWithHttpInfoAsync(xeroTenantId, contactId, date, fromDate, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for aged receivables by contact 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportAgedReceivablesByContactWithHttpInfoAsync(string xeroTenantId, Guid contactId, DateOnly? date = default(DateOnly?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportAgedReceivablesByContact");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportAgedReceivablesByContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/AgedReceivablesByContact", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportAgedReceivablesByContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for balancesheet 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportBalanceSheet(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportBalanceSheetWithHttpInfo(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for balancesheet 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportBalanceSheetWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBalanceSheet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (periods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periods", periods));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe));
            }
            if (trackingOptionID1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID1", trackingOptionID1));
            }
            if (trackingOptionID2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID2", trackingOptionID2));
            }
            if (standardLayout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "standardLayout", standardLayout));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportBalanceSheet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/BalanceSheet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportBalanceSheet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for balancesheet 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBalanceSheetAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBalanceSheetWithHttpInfoAsync(xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for balancesheet 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportBalanceSheetWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingOptionID1 = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBalanceSheet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (periods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periods", periods));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe));
            }
            if (trackingOptionID1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID1", trackingOptionID1));
            }
            if (trackingOptionID2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID2", trackingOptionID2));
            }
            if (standardLayout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "standardLayout", standardLayout));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportBalanceSheet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/BalanceSheet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportBalanceSheet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for bank summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportBankSummary(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportBankSummaryWithHttpInfo(xeroTenantId, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for bank summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportBankSummaryWithHttpInfo(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBankSummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportBankSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/BankSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportBankSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for bank summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBankSummaryAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBankSummaryWithHttpInfoAsync(xeroTenantId, fromDate, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for bank summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportBankSummaryWithHttpInfoAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBankSummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportBankSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/BankSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportBankSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for budget summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportBudgetSummary(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportBudgetSummaryWithHttpInfo(xeroTenantId, date, periods, timeframe);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for budget summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportBudgetSummaryWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBudgetSummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (periods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periods", periods));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportBudgetSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/BudgetSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportBudgetSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for budget summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBudgetSummaryAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBudgetSummaryWithHttpInfoAsync(xeroTenantId, date, periods, timeframe, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for budget summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportBudgetSummaryWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int? periods = default(int?), int? timeframe = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBudgetSummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (periods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periods", periods));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportBudgetSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/BudgetSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportBudgetSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for executive summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportExecutiveSummary(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportExecutiveSummaryWithHttpInfo(xeroTenantId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for executive summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportExecutiveSummaryWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportExecutiveSummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportExecutiveSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/ExecutiveSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportExecutiveSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for executive summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportExecutiveSummaryAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportExecutiveSummaryWithHttpInfoAsync(xeroTenantId, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for executive summary 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportExecutiveSummaryWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportExecutiveSummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportExecutiveSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/ExecutiveSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportExecutiveSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific report using a unique ReportID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportFromId(string xeroTenantId, string reportID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportFromIdWithHttpInfo(xeroTenantId, reportID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific report using a unique ReportID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportFromIdWithHttpInfo(string xeroTenantId, string reportID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportFromId");
            }

            // verify the required parameter 'reportID' is set
            if (reportID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reportID' when calling AccountingApi->GetReportFromId");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReportID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(reportID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportFromId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/{ReportID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportFromId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific report using a unique ReportID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportFromIdAsync(string xeroTenantId, string reportID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportFromIdWithHttpInfoAsync(xeroTenantId, reportID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific report using a unique ReportID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportFromIdWithHttpInfoAsync(string xeroTenantId, string reportID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportFromId");
            }

            // verify the required parameter 'reportID' is set
            if (reportID == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'reportID' when calling AccountingApi->GetReportFromId");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReportID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(reportID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportFromId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/{ReportID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportFromId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for profit and loss 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportProfitAndLoss(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportProfitAndLossWithHttpInfo(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for profit and loss 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportProfitAndLossWithHttpInfo(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportProfitAndLoss");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (periods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periods", periods));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe));
            }
            if (trackingCategoryID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingCategoryID", trackingCategoryID));
            }
            if (trackingCategoryID2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingCategoryID2", trackingCategoryID2));
            }
            if (trackingOptionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID", trackingOptionID));
            }
            if (trackingOptionID2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID2", trackingOptionID2));
            }
            if (standardLayout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "standardLayout", standardLayout));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportProfitAndLoss";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/ProfitAndLoss", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportProfitAndLoss", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for profit and loss 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportProfitAndLossAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportProfitAndLossWithHttpInfoAsync(xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for profit and loss 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">filter by the from date of the report e.g. 2021-02-01 (optional)</param>
        /// <param name="toDate">filter by the to date of the report e.g. 2021-02-28 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportProfitAndLossWithHttpInfoAsync(string xeroTenantId, DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), int? periods = default(int?), string? timeframe = default(string?), string? trackingCategoryID = default(string?), string? trackingCategoryID2 = default(string?), string? trackingOptionID = default(string?), string? trackingOptionID2 = default(string?), bool? standardLayout = default(bool?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportProfitAndLoss");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }
            if (periods != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periods", periods));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe));
            }
            if (trackingCategoryID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingCategoryID", trackingCategoryID));
            }
            if (trackingCategoryID2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingCategoryID2", trackingCategoryID2));
            }
            if (trackingOptionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID", trackingOptionID));
            }
            if (trackingOptionID2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID2", trackingOptionID2));
            }
            if (standardLayout != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "standardLayout", standardLayout));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportProfitAndLoss";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/ProfitAndLoss", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportProfitAndLoss", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve reports for 1099 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Reports</returns>
        public Reports GetReportTenNinetyNine(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Reports> localVarResponse = GetReportTenNinetyNineWithHttpInfo(xeroTenantId, reportYear);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve reports for 1099 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Reports</returns>
        public Org.OpenAPITools.Client.ApiResponse<Reports> GetReportTenNinetyNineWithHttpInfo(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportTenNinetyNine");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reportYear", reportYear));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportTenNinetyNine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Reports>("/Reports/TenNinetyNine", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportTenNinetyNine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve reports for 1099 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Reports</returns>
        public async System.Threading.Tasks.Task<Reports> GetReportTenNinetyNineAsync(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Reports> localVarResponse = await GetReportTenNinetyNineWithHttpInfoAsync(xeroTenantId, reportYear, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve reports for 1099 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Reports)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Reports>> GetReportTenNinetyNineWithHttpInfoAsync(string xeroTenantId, string? reportYear = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportTenNinetyNine");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportYear != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "reportYear", reportYear));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportTenNinetyNine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Reports>("/Reports/TenNinetyNine", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportTenNinetyNine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for trial balance 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportTrialBalance(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportTrialBalanceWithHttpInfo(xeroTenantId, date, paymentsOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for trial balance 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportTrialBalanceWithHttpInfo(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportTrialBalance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportTrialBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports/TrialBalance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportTrialBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves report for trial balance 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportTrialBalanceAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportTrialBalanceWithHttpInfoAsync(xeroTenantId, date, paymentsOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves report for trial balance 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportTrialBalanceWithHttpInfoAsync(string xeroTenantId, DateOnly? date = default(DateOnly?), bool? paymentsOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportTrialBalance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (paymentsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportTrialBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/TrialBalance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportTrialBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportWithRows</returns>
        public ReportWithRows GetReportsList(string xeroTenantId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = GetReportsListWithHttpInfo(xeroTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportWithRows</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReportWithRows> GetReportsListWithHttpInfo(string xeroTenantId, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportsList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportWithRows>("/Reports", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportsListAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportsListWithHttpInfoAsync(xeroTenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of the organistaions unique reports that require a uuid to fetch 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReportWithRows>> GetReportsListWithHttpInfoAsync(string xeroTenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportsList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetReportsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        public TaxRates GetTaxRateByTaxType(string xeroTenantId, string taxType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = GetTaxRateByTaxTypeWithHttpInfo(xeroTenantId, taxType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        public Org.OpenAPITools.Client.ApiResponse<TaxRates> GetTaxRateByTaxTypeWithHttpInfo(string xeroTenantId, string taxType, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTaxRateByTaxType");
            }

            // verify the required parameter 'taxType' is set
            if (taxType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taxType' when calling AccountingApi->GetTaxRateByTaxType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TaxType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taxType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTaxRateByTaxType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaxRates>("/TaxRates/{TaxType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxRateByTaxType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> GetTaxRateByTaxTypeAsync(string xeroTenantId, string taxType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = await GetTaxRateByTaxTypeWithHttpInfoAsync(xeroTenantId, taxType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific tax rate according to given TaxType code 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxType">A valid TaxType code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TaxRates>> GetTaxRateByTaxTypeWithHttpInfoAsync(string xeroTenantId, string taxType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTaxRateByTaxType");
            }

            // verify the required parameter 'taxType' is set
            if (taxType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taxType' when calling AccountingApi->GetTaxRateByTaxType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TaxType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(taxType)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTaxRateByTaxType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaxRates>("/TaxRates/{TaxType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxRateByTaxType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        public TaxRates GetTaxRates(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = GetTaxRatesWithHttpInfo(xeroTenantId, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        public Org.OpenAPITools.Client.ApiResponse<TaxRates> GetTaxRatesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTaxRates");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaxRates>("/TaxRates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> GetTaxRatesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = await GetTaxRatesWithHttpInfoAsync(xeroTenantId, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TaxRates>> GetTaxRatesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTaxRates");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaxRates>("/TaxRates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves tracking categories and options 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        public TrackingCategories GetTrackingCategories(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = GetTrackingCategoriesWithHttpInfo(xeroTenantId, where, order, includeArchived);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves tracking categories and options 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingCategories> GetTrackingCategoriesWithHttpInfo(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTrackingCategories");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (includeArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTrackingCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TrackingCategories>("/TrackingCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackingCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves tracking categories and options 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = await GetTrackingCategoriesWithHttpInfoAsync(xeroTenantId, where, order, includeArchived, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves tracking categories and options 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingCategories>> GetTrackingCategoriesWithHttpInfoAsync(string xeroTenantId, string? where = default(string?), string? order = default(string?), bool? includeArchived = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTrackingCategories");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (includeArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTrackingCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TrackingCategories>("/TrackingCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackingCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        public TrackingCategories GetTrackingCategory(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = GetTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategoryID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingCategories> GetTrackingCategoryWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTrackingCategory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoryAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = await GetTrackingCategoryWithHttpInfoAsync(xeroTenantId, trackingCategoryID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves specific tracking categories and options using a unique tracking category Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingCategories>> GetTrackingCategoryWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTrackingCategory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        public Users GetUser(string xeroTenantId, Guid userID, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Users> localVarResponse = GetUserWithHttpInfo(xeroTenantId, userID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        public Org.OpenAPITools.Client.ApiResponse<Users> GetUserWithHttpInfo(string xeroTenantId, Guid userID, int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetUser");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("UserID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Users>("/Users/{UserID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetUserAsync(string xeroTenantId, Guid userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Users> localVarResponse = await GetUserWithHttpInfoAsync(xeroTenantId, userID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific user 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Users>> GetUserWithHttpInfoAsync(string xeroTenantId, Guid userID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetUser");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("UserID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            localVarRequestOptions.Operation = "AccountingApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Users>("/Users/{UserID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves users 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        public Users GetUsers(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Users> localVarResponse = GetUsersWithHttpInfo(xeroTenantId, ifModifiedSince, where, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves users 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        public Org.OpenAPITools.Client.ApiResponse<Users> GetUsersWithHttpInfo(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetUsers");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Users>("/Users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves users 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetUsersAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Users> localVarResponse = await GetUsersWithHttpInfoAsync(xeroTenantId, ifModifiedSince, where, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves users 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Users>> GetUsersWithHttpInfoAsync(string xeroTenantId, DateTime? ifModifiedSince = default(DateTime?), string? where = default(string?), string? order = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetUsers");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (where != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "where", where));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
            {
                localVarRequestOptions.HeaderParameters.Add("If-Modified-Since", Org.OpenAPITools.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter
            }

            localVarRequestOptions.Operation = "AccountingApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Users>("/Users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImportSummaryObject</returns>
        public ImportSummaryObject PostSetup(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ImportSummaryObject> localVarResponse = PostSetupWithHttpInfo(xeroTenantId, setup, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImportSummaryObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<ImportSummaryObject> PostSetupWithHttpInfo(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->PostSetup");
            }

            // verify the required parameter 'setup' is set
            if (setup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'setup' when calling AccountingApi->PostSetup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = setup;

            localVarRequestOptions.Operation = "AccountingApi.PostSetup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ImportSummaryObject>("/Setup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImportSummaryObject</returns>
        public async System.Threading.Tasks.Task<ImportSummaryObject> PostSetupAsync(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ImportSummaryObject> localVarResponse = await PostSetupWithHttpInfoAsync(xeroTenantId, setup, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the chart of accounts, the conversion date and conversion balances 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="setup">Object including an accounts array, a conversion balances array and a conversion date object in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImportSummaryObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ImportSummaryObject>> PostSetupWithHttpInfoAsync(string xeroTenantId, Setup setup, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->PostSetup");
            }

            // verify the required parameter 'setup' is set
            if (setup == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'setup' when calling AccountingApi->PostSetup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = setup;

            localVarRequestOptions.Operation = "AccountingApi.PostSetup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ImportSummaryObject>("/Setup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Accounts</returns>
        public Accounts UpdateAccount(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = UpdateAccountWithHttpInfo(xeroTenantId, accountID, accounts, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Accounts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Accounts> UpdateAccountWithHttpInfo(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateAccount");
            }

            // verify the required parameter 'accounts' is set
            if (accounts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accounts' when calling AccountingApi->UpdateAccount");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = accounts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Accounts>("/Accounts/{AccountID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> UpdateAccountAsync(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Accounts> localVarResponse = await UpdateAccountWithHttpInfoAsync(xeroTenantId, accountID, accounts, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a chart of accounts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Accounts>> UpdateAccountWithHttpInfoAsync(string xeroTenantId, Guid accountID, Accounts accounts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateAccount");
            }

            // verify the required parameter 'accounts' is set
            if (accounts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accounts' when calling AccountingApi->UpdateAccount");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = accounts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Accounts>("/Accounts/{AccountID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates attachment on a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateAccountAttachmentByFileName(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateAccountAttachmentByFileNameWithHttpInfo(xeroTenantId, accountID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates attachment on a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateAccountAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateAccountAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateAccountAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateAccountAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateAccountAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/Accounts/{AccountID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates attachment on a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateAccountAttachmentByFileNameAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateAccountAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, accountID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates attachment on a specific account by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateAccountAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid accountID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateAccountAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateAccountAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateAccountAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AccountID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateAccountAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/Accounts/{AccountID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a single spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        public BankTransactions UpdateBankTransaction(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = UpdateBankTransactionWithHttpInfo(xeroTenantId, bankTransactionID, bankTransactions, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a single spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransactions> UpdateBankTransactionWithHttpInfo(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransaction");
            }

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->UpdateBankTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransactions;

            localVarRequestOptions.Operation = "AccountingApi.UpdateBankTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransactions>("/BankTransactions/{BankTransactionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBankTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a single spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> UpdateBankTransactionAsync(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = await UpdateBankTransactionWithHttpInfoAsync(xeroTenantId, bankTransactionID, bankTransactions, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a single spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransactions>> UpdateBankTransactionWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransaction");
            }

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->UpdateBankTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransactions;

            localVarRequestOptions.Operation = "AccountingApi.UpdateBankTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransactions>("/BankTransactions/{BankTransactionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBankTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateBankTransactionAttachmentByFileName(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateBankTransactionAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransactionID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateBankTransactionAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateBankTransactionAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBankTransactionAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateBankTransactionAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateBankTransactionAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, bankTransactionID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific bank transaction by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateBankTransactionAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateBankTransactionAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBankTransactionAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateBankTransferAttachmentByFileName(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateBankTransferAttachmentByFileNameWithHttpInfo(xeroTenantId, bankTransferID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateBankTransferAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateBankTransferAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBankTransferAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateBankTransferAttachmentByFileNameAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateBankTransferAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, bankTransferID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateBankTransferAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid bankTransferID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BankTransferID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateBankTransferAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBankTransferAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        public Contacts UpdateContact(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = UpdateContactWithHttpInfo(xeroTenantId, contactID, contacts, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Contacts> UpdateContactWithHttpInfo(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContact");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->UpdateContact");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Contacts>("/Contacts/{ContactID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> UpdateContactAsync(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = await UpdateContactWithHttpInfoAsync(xeroTenantId, contactID, contacts, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Contacts>> UpdateContactWithHttpInfoAsync(string xeroTenantId, Guid contactID, Contacts contacts, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContact");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->UpdateContact");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Contacts>("/Contacts/{ContactID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateContactAttachmentByFileName(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateContactAttachmentByFileNameWithHttpInfo(xeroTenantId, contactID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateContactAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContactAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateContactAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateContactAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateContactAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/Contacts/{ContactID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContactAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateContactAttachmentByFileNameAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateContactAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, contactID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateContactAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid contactID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContactAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateContactAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateContactAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateContactAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/Contacts/{ContactID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContactAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContactGroups</returns>
        public ContactGroups UpdateContactGroup(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = UpdateContactGroupWithHttpInfo(xeroTenantId, contactGroupID, contactGroups, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContactGroups</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContactGroups> UpdateContactGroupWithHttpInfo(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContactGroup");
            }

            // verify the required parameter 'contactGroups' is set
            if (contactGroups == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactGroups' when calling AccountingApi->UpdateContactGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contactGroups;

            localVarRequestOptions.Operation = "AccountingApi.UpdateContactGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ContactGroups>("/ContactGroups/{ContactGroupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContactGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> UpdateContactGroupAsync(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContactGroups> localVarResponse = await UpdateContactGroupWithHttpInfoAsync(xeroTenantId, contactGroupID, contactGroups, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific contact group 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContactGroups>> UpdateContactGroupWithHttpInfoAsync(string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContactGroup");
            }

            // verify the required parameter 'contactGroups' is set
            if (contactGroups == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactGroups' when calling AccountingApi->UpdateContactGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ContactGroupID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contactGroups;

            localVarRequestOptions.Operation = "AccountingApi.UpdateContactGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ContactGroups>("/ContactGroups/{ContactGroupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContactGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        public CreditNotes UpdateCreditNote(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = UpdateCreditNoteWithHttpInfo(xeroTenantId, creditNoteID, creditNotes, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreditNotes> UpdateCreditNoteWithHttpInfo(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateCreditNote");
            }

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->UpdateCreditNote");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = creditNotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateCreditNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreditNotes>("/CreditNotes/{CreditNoteID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCreditNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> UpdateCreditNoteAsync(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = await UpdateCreditNoteWithHttpInfoAsync(xeroTenantId, creditNoteID, creditNotes, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific credit note 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreditNotes>> UpdateCreditNoteWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateCreditNote");
            }

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->UpdateCreditNote");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = creditNotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateCreditNote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreditNotes>("/CreditNotes/{CreditNoteID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCreditNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates attachments on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateCreditNoteAttachmentByFileName(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateCreditNoteAttachmentByFileNameWithHttpInfo(xeroTenantId, creditNoteID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates attachments on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateCreditNoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateCreditNoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCreditNoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates attachments on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateCreditNoteAttachmentByFileNameAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateCreditNoteAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, creditNoteID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates attachments on a specific credit note by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateCreditNoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid creditNoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("CreditNoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateCreditNoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCreditNoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExpenseClaims</returns>
        public ExpenseClaims UpdateExpenseClaim(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = UpdateExpenseClaimWithHttpInfo(xeroTenantId, expenseClaimID, expenseClaims, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExpenseClaims</returns>
        public Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> UpdateExpenseClaimWithHttpInfo(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateExpenseClaim");
            }

            // verify the required parameter 'expenseClaims' is set
            if (expenseClaims == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'expenseClaims' when calling AccountingApi->UpdateExpenseClaim");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = expenseClaims;

            localVarRequestOptions.Operation = "AccountingApi.UpdateExpenseClaim";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExpenseClaims>("/ExpenseClaims/{ExpenseClaimID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExpenseClaim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> UpdateExpenseClaimAsync(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ExpenseClaims> localVarResponse = await UpdateExpenseClaimWithHttpInfoAsync(xeroTenantId, expenseClaimID, expenseClaims, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific expense claims 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ExpenseClaims>> UpdateExpenseClaimWithHttpInfoAsync(string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateExpenseClaim");
            }

            // verify the required parameter 'expenseClaims' is set
            if (expenseClaims == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'expenseClaims' when calling AccountingApi->UpdateExpenseClaim");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ExpenseClaimID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = expenseClaims;

            localVarRequestOptions.Operation = "AccountingApi.UpdateExpenseClaim";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExpenseClaims>("/ExpenseClaims/{ExpenseClaimID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExpenseClaim", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        public Invoices UpdateInvoice(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = UpdateInvoiceWithHttpInfo(xeroTenantId, invoiceID, invoices, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<Invoices> UpdateInvoiceWithHttpInfo(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateInvoice");
            }

            // verify the required parameter 'invoices' is set
            if (invoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->UpdateInvoice");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = invoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Invoices>("/Invoices/{InvoiceID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> UpdateInvoiceAsync(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = await UpdateInvoiceWithHttpInfoAsync(xeroTenantId, invoiceID, invoices, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Invoices>> UpdateInvoiceWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, Invoices invoices, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateInvoice");
            }

            // verify the required parameter 'invoices' is set
            if (invoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->UpdateInvoice");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = invoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Invoices>("/Invoices/{InvoiceID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateInvoiceAttachmentByFileName(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, invoiceID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/Invoices/{InvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateInvoiceAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, invoiceID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an attachment from a specific invoices or purchase bill by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid invoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("InvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/Invoices/{InvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        public Items UpdateItem(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = UpdateItemWithHttpInfo(xeroTenantId, itemID, items, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        public Org.OpenAPITools.Client.ApiResponse<Items> UpdateItemWithHttpInfo(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateItem");
            }

            // verify the required parameter 'items' is set
            if (items == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->UpdateItem");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = items;

            localVarRequestOptions.Operation = "AccountingApi.UpdateItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Items>("/Items/{ItemID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> UpdateItemAsync(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = await UpdateItemWithHttpInfoAsync(xeroTenantId, itemID, items, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific item 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Items>> UpdateItemWithHttpInfoAsync(string xeroTenantId, Guid itemID, Items items, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateItem");
            }

            // verify the required parameter 'items' is set
            if (items == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->UpdateItem");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ItemID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = items;

            localVarRequestOptions.Operation = "AccountingApi.UpdateItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Items>("/Items/{ItemID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LinkedTransactions</returns>
        public LinkedTransactions UpdateLinkedTransaction(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = UpdateLinkedTransactionWithHttpInfo(xeroTenantId, linkedTransactionID, linkedTransactions, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LinkedTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> UpdateLinkedTransactionWithHttpInfo(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateLinkedTransaction");
            }

            // verify the required parameter 'linkedTransactions' is set
            if (linkedTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkedTransactions' when calling AccountingApi->UpdateLinkedTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LinkedTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = linkedTransactions;

            localVarRequestOptions.Operation = "AccountingApi.UpdateLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LinkedTransactions>("/LinkedTransactions/{LinkedTransactionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> UpdateLinkedTransactionAsync(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<LinkedTransactions> localVarResponse = await UpdateLinkedTransactionWithHttpInfoAsync(xeroTenantId, linkedTransactionID, linkedTransactions, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<LinkedTransactions>> UpdateLinkedTransactionWithHttpInfoAsync(string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateLinkedTransaction");
            }

            // verify the required parameter 'linkedTransactions' is set
            if (linkedTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'linkedTransactions' when calling AccountingApi->UpdateLinkedTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LinkedTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = linkedTransactions;

            localVarRequestOptions.Operation = "AccountingApi.UpdateLinkedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LinkedTransactions>("/LinkedTransactions/{LinkedTransactionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLinkedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        public ManualJournals UpdateManualJournal(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = UpdateManualJournalWithHttpInfo(xeroTenantId, manualJournalID, manualJournals, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManualJournals> UpdateManualJournalWithHttpInfo(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateManualJournal");
            }

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->UpdateManualJournal");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manualJournals;

            localVarRequestOptions.Operation = "AccountingApi.UpdateManualJournal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManualJournals>("/ManualJournals/{ManualJournalID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> UpdateManualJournalAsync(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = await UpdateManualJournalWithHttpInfoAsync(xeroTenantId, manualJournalID, manualJournals, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManualJournals>> UpdateManualJournalWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateManualJournal");
            }

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->UpdateManualJournal");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manualJournals;

            localVarRequestOptions.Operation = "AccountingApi.UpdateManualJournal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManualJournals>("/ManualJournals/{ManualJournalID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateManualJournalAttachmentByFileName(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateManualJournalAttachmentByFileNameWithHttpInfo(xeroTenantId, manualJournalID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateManualJournalAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateManualJournalAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManualJournalAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateManualJournalAttachmentByFileNameAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateManualJournalAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, manualJournalID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific manual journal by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateManualJournalAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid manualJournalID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ManualJournalID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateManualJournalAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManualJournalAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BankTransactions</returns>
        public BankTransactions UpdateOrCreateBankTransactions(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = UpdateOrCreateBankTransactionsWithHttpInfo(xeroTenantId, bankTransactions, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BankTransactions</returns>
        public Org.OpenAPITools.Client.ApiResponse<BankTransactions> UpdateOrCreateBankTransactionsWithHttpInfo(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateBankTransactions");
            }

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->UpdateOrCreateBankTransactions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransactions;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateBankTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BankTransactions>("/BankTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateBankTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> UpdateOrCreateBankTransactionsAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BankTransactions> localVarResponse = await UpdateOrCreateBankTransactionsWithHttpInfoAsync(xeroTenantId, bankTransactions, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more spent or received money transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BankTransactions>> UpdateOrCreateBankTransactionsWithHttpInfoAsync(string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateBankTransactions");
            }

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->UpdateOrCreateBankTransactions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = bankTransactions;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateBankTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BankTransactions>("/BankTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateBankTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Contacts</returns>
        public Contacts UpdateOrCreateContacts(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = UpdateOrCreateContactsWithHttpInfo(xeroTenantId, contacts, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Contacts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Contacts> UpdateOrCreateContactsWithHttpInfo(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateContacts");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->UpdateOrCreateContacts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Contacts>("/Contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> UpdateOrCreateContactsAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Contacts> localVarResponse = await UpdateOrCreateContactsWithHttpInfoAsync(xeroTenantId, contacts, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contacts"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Contacts>> UpdateOrCreateContactsWithHttpInfoAsync(string xeroTenantId, Contacts contacts, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateContacts");
            }

            // verify the required parameter 'contacts' is set
            if (contacts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->UpdateOrCreateContacts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = contacts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Contacts>("/Contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreditNotes</returns>
        public CreditNotes UpdateOrCreateCreditNotes(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = UpdateOrCreateCreditNotesWithHttpInfo(xeroTenantId, creditNotes, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreditNotes> UpdateOrCreateCreditNotesWithHttpInfo(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateCreditNotes");
            }

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->UpdateOrCreateCreditNotes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = creditNotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateCreditNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreditNotes>("/CreditNotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateCreditNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> UpdateOrCreateCreditNotesAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreditNotes> localVarResponse = await UpdateOrCreateCreditNotesWithHttpInfoAsync(xeroTenantId, creditNotes, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more credit notes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreditNotes>> UpdateOrCreateCreditNotesWithHttpInfoAsync(string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateCreditNotes");
            }

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->UpdateOrCreateCreditNotes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = creditNotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateCreditNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreditNotes>("/CreditNotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateCreditNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a single new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Employees</returns>
        public Employees UpdateOrCreateEmployees(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = UpdateOrCreateEmployeesWithHttpInfo(xeroTenantId, employees, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a single new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Employees</returns>
        public Org.OpenAPITools.Client.ApiResponse<Employees> UpdateOrCreateEmployeesWithHttpInfo(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateEmployees");
            }

            // verify the required parameter 'employees' is set
            if (employees == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employees' when calling AccountingApi->UpdateOrCreateEmployees");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = employees;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateEmployees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Employees>("/Employees", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateEmployees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a single new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> UpdateOrCreateEmployeesAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Employees> localVarResponse = await UpdateOrCreateEmployeesWithHttpInfoAsync(xeroTenantId, employees, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a single new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees">Employees with array of Employee object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Employees>> UpdateOrCreateEmployeesWithHttpInfoAsync(string xeroTenantId, Employees employees, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateEmployees");
            }

            // verify the required parameter 'employees' is set
            if (employees == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'employees' when calling AccountingApi->UpdateOrCreateEmployees");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = employees;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateEmployees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Employees>("/Employees", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateEmployees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invoices</returns>
        public Invoices UpdateOrCreateInvoices(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = UpdateOrCreateInvoicesWithHttpInfo(xeroTenantId, invoices, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<Invoices> UpdateOrCreateInvoicesWithHttpInfo(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateInvoices");
            }

            // verify the required parameter 'invoices' is set
            if (invoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->UpdateOrCreateInvoices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = invoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Invoices>("/Invoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> UpdateOrCreateInvoicesAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Invoices> localVarResponse = await UpdateOrCreateInvoicesWithHttpInfoAsync(xeroTenantId, invoices, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Invoices>> UpdateOrCreateInvoicesWithHttpInfoAsync(string xeroTenantId, Invoices invoices, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateInvoices");
            }

            // verify the required parameter 'invoices' is set
            if (invoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->UpdateOrCreateInvoices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = invoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Invoices>("/Invoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Items</returns>
        public Items UpdateOrCreateItems(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = UpdateOrCreateItemsWithHttpInfo(xeroTenantId, items, summarizeErrors, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Items</returns>
        public Org.OpenAPITools.Client.ApiResponse<Items> UpdateOrCreateItemsWithHttpInfo(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateItems");
            }

            // verify the required parameter 'items' is set
            if (items == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->UpdateOrCreateItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = items;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Items>("/Items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> UpdateOrCreateItemsAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Items> localVarResponse = await UpdateOrCreateItemsWithHttpInfoAsync(xeroTenantId, items, summarizeErrors, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more items 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Items>> UpdateOrCreateItemsWithHttpInfoAsync(string xeroTenantId, Items items, bool? summarizeErrors = default(bool?), int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateItems");
            }

            // verify the required parameter 'items' is set
            if (items == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->UpdateOrCreateItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = items;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Items>("/Items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates a single manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManualJournals</returns>
        public ManualJournals UpdateOrCreateManualJournals(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = UpdateOrCreateManualJournalsWithHttpInfo(xeroTenantId, manualJournals, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates a single manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManualJournals</returns>
        public Org.OpenAPITools.Client.ApiResponse<ManualJournals> UpdateOrCreateManualJournalsWithHttpInfo(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateManualJournals");
            }

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->UpdateOrCreateManualJournals");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manualJournals;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateManualJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManualJournals>("/ManualJournals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates a single manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> UpdateOrCreateManualJournalsAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ManualJournals> localVarResponse = await UpdateOrCreateManualJournalsWithHttpInfoAsync(xeroTenantId, manualJournals, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates a single manual journal 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals">ManualJournals array with ManualJournal object in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ManualJournals>> UpdateOrCreateManualJournalsWithHttpInfoAsync(string xeroTenantId, ManualJournals manualJournals, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateManualJournals");
            }

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->UpdateOrCreateManualJournals");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = manualJournals;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateManualJournals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManualJournals>("/ManualJournals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        public PurchaseOrders UpdateOrCreatePurchaseOrders(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = UpdateOrCreatePurchaseOrdersWithHttpInfo(xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        public Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> UpdateOrCreatePurchaseOrdersWithHttpInfo(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreatePurchaseOrders");
            }

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->UpdateOrCreatePurchaseOrders");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = purchaseOrders;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreatePurchaseOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PurchaseOrders>("/PurchaseOrders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreatePurchaseOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> UpdateOrCreatePurchaseOrdersAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = await UpdateOrCreatePurchaseOrdersWithHttpInfoAsync(xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more purchase orders 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PurchaseOrders>> UpdateOrCreatePurchaseOrdersWithHttpInfoAsync(string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreatePurchaseOrders");
            }

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->UpdateOrCreatePurchaseOrders");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = purchaseOrders;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreatePurchaseOrders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PurchaseOrders>("/PurchaseOrders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreatePurchaseOrders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        public Quotes UpdateOrCreateQuotes(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = UpdateOrCreateQuotesWithHttpInfo(xeroTenantId, quotes, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Quotes> UpdateOrCreateQuotesWithHttpInfo(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateQuotes");
            }

            // verify the required parameter 'quotes' is set
            if (quotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'quotes' when calling AccountingApi->UpdateOrCreateQuotes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Quotes>("/Quotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates or creates one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        public async System.Threading.Tasks.Task<Quotes> UpdateOrCreateQuotesAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = await UpdateOrCreateQuotesWithHttpInfoAsync(xeroTenantId, quotes, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates or creates one or more quotes 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quotes"></param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Quotes>> UpdateOrCreateQuotesWithHttpInfoAsync(string xeroTenantId, Quotes quotes, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateQuotes");
            }

            // verify the required parameter 'quotes' is set
            if (quotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'quotes' when calling AccountingApi->UpdateOrCreateQuotes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateQuotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Quotes>("/Quotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateQuotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or deletes one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        public RepeatingInvoices UpdateOrCreateRepeatingInvoices(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = UpdateOrCreateRepeatingInvoicesWithHttpInfo(xeroTenantId, repeatingInvoices, summarizeErrors, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or deletes one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> UpdateOrCreateRepeatingInvoicesWithHttpInfo(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateRepeatingInvoices");
            }

            // verify the required parameter 'repeatingInvoices' is set
            if (repeatingInvoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repeatingInvoices' when calling AccountingApi->UpdateOrCreateRepeatingInvoices");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = repeatingInvoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateRepeatingInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RepeatingInvoices>("/RepeatingInvoices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateRepeatingInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or deletes one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        public async System.Threading.Tasks.Task<RepeatingInvoices> UpdateOrCreateRepeatingInvoicesAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = await UpdateOrCreateRepeatingInvoicesWithHttpInfoAsync(xeroTenantId, repeatingInvoices, summarizeErrors, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or deletes one or more repeating invoice templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoices">RepeatingInvoices with an array of repeating invoice objects in body of request</param>
        /// <param name="summarizeErrors">If false return 200 OK and mix of successfully created objects and any with validation errors (optional, default to false)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices>> UpdateOrCreateRepeatingInvoicesWithHttpInfoAsync(string xeroTenantId, RepeatingInvoices repeatingInvoices, bool? summarizeErrors = default(bool?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateOrCreateRepeatingInvoices");
            }

            // verify the required parameter 'repeatingInvoices' is set
            if (repeatingInvoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repeatingInvoices' when calling AccountingApi->UpdateOrCreateRepeatingInvoices");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (summarizeErrors != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "summarizeErrors", summarizeErrors));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = repeatingInvoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateOrCreateRepeatingInvoices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RepeatingInvoices>("/RepeatingInvoices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrCreateRepeatingInvoices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PurchaseOrders</returns>
        public PurchaseOrders UpdatePurchaseOrder(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = UpdatePurchaseOrderWithHttpInfo(xeroTenantId, purchaseOrderID, purchaseOrders, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PurchaseOrders</returns>
        public Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> UpdatePurchaseOrderWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdatePurchaseOrder");
            }

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->UpdatePurchaseOrder");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = purchaseOrders;

            localVarRequestOptions.Operation = "AccountingApi.UpdatePurchaseOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePurchaseOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> UpdatePurchaseOrderAsync(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PurchaseOrders> localVarResponse = await UpdatePurchaseOrderWithHttpInfoAsync(xeroTenantId, purchaseOrderID, purchaseOrders, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific purchase order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PurchaseOrders>> UpdatePurchaseOrderWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdatePurchaseOrder");
            }

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->UpdatePurchaseOrder");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = purchaseOrders;

            localVarRequestOptions.Operation = "AccountingApi.UpdatePurchaseOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePurchaseOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdatePurchaseOrderAttachmentByFileName(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdatePurchaseOrderAttachmentByFileNameWithHttpInfo(xeroTenantId, purchaseOrderID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdatePurchaseOrderAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdatePurchaseOrderAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdatePurchaseOrderAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePurchaseOrderAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdatePurchaseOrderAttachmentByFileNameAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdatePurchaseOrderAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, purchaseOrderID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment for a specific purchase order by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for an Purchase Order</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdatePurchaseOrderAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid purchaseOrderID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdatePurchaseOrderAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdatePurchaseOrderAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PurchaseOrderID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdatePurchaseOrderAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePurchaseOrderAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Quotes</returns>
        public Quotes UpdateQuote(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = UpdateQuoteWithHttpInfo(xeroTenantId, quoteID, quotes, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Quotes</returns>
        public Org.OpenAPITools.Client.ApiResponse<Quotes> UpdateQuoteWithHttpInfo(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateQuote");
            }

            // verify the required parameter 'quotes' is set
            if (quotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'quotes' when calling AccountingApi->UpdateQuote");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Quotes>("/Quotes/{QuoteID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Quotes</returns>
        public async System.Threading.Tasks.Task<Quotes> UpdateQuoteAsync(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Quotes> localVarResponse = await UpdateQuoteWithHttpInfoAsync(xeroTenantId, quoteID, quotes, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific quote 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="quotes"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Quotes)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Quotes>> UpdateQuoteWithHttpInfoAsync(string xeroTenantId, Guid quoteID, Quotes quotes, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateQuote");
            }

            // verify the required parameter 'quotes' is set
            if (quotes == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'quotes' when calling AccountingApi->UpdateQuote");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quotes;

            localVarRequestOptions.Operation = "AccountingApi.UpdateQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Quotes>("/Quotes/{QuoteID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateQuoteAttachmentByFileName(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateQuoteAttachmentByFileNameWithHttpInfo(xeroTenantId, quoteID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateQuoteAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateQuoteAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateQuoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/Quotes/{QuoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateQuoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateQuoteAttachmentByFileNameAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateQuoteAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, quoteID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific quote by filename 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="quoteID">Unique identifier for an Quote</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateQuoteAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid quoteID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateQuoteAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateQuoteAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("QuoteID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quoteID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateQuoteAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/Quotes/{QuoteID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateQuoteAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific draft expense claim receipts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Receipts</returns>
        public Receipts UpdateReceipt(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = UpdateReceiptWithHttpInfo(xeroTenantId, receiptID, receipts, unitdp, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific draft expense claim receipts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Receipts</returns>
        public Org.OpenAPITools.Client.ApiResponse<Receipts> UpdateReceiptWithHttpInfo(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateReceipt");
            }

            // verify the required parameter 'receipts' is set
            if (receipts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'receipts' when calling AccountingApi->UpdateReceipt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = receipts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Receipts>("/Receipts/{ReceiptID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific draft expense claim receipts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> UpdateReceiptAsync(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Receipts> localVarResponse = await UpdateReceiptWithHttpInfoAsync(xeroTenantId, receiptID, receipts, unitdp, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific draft expense claim receipts 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Receipts>> UpdateReceiptWithHttpInfoAsync(string xeroTenantId, Guid receiptID, Receipts receipts, int? unitdp = default(int?), string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateReceipt");
            }

            // verify the required parameter 'receipts' is set
            if (receipts == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'receipts' when calling AccountingApi->UpdateReceipt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (unitdp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp));
            }
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = receipts;

            localVarRequestOptions.Operation = "AccountingApi.UpdateReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Receipts>("/Receipts/{ReceiptID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateReceiptAttachmentByFileName(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateReceiptAttachmentByFileNameWithHttpInfo(xeroTenantId, receiptID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateReceiptAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateReceiptAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateReceiptAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/Receipts/{ReceiptID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReceiptAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateReceiptAttachmentByFileNameAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateReceiptAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, receiptID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment on a specific expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateReceiptAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid receiptID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateReceiptAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateReceiptAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ReceiptID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateReceiptAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/Receipts/{ReceiptID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReceiptAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific repeating invoice template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepeatingInvoices</returns>
        public RepeatingInvoices UpdateRepeatingInvoice(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = UpdateRepeatingInvoiceWithHttpInfo(xeroTenantId, repeatingInvoiceID, repeatingInvoices, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific repeating invoice template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepeatingInvoices</returns>
        public Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> UpdateRepeatingInvoiceWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateRepeatingInvoice");
            }

            // verify the required parameter 'repeatingInvoices' is set
            if (repeatingInvoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repeatingInvoices' when calling AccountingApi->UpdateRepeatingInvoice");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = repeatingInvoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateRepeatingInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RepeatingInvoices>("/RepeatingInvoices/{RepeatingInvoiceID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRepeatingInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific repeating invoice template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepeatingInvoices</returns>
        public async System.Threading.Tasks.Task<RepeatingInvoices> UpdateRepeatingInvoiceAsync(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices> localVarResponse = await UpdateRepeatingInvoiceWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, repeatingInvoices, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a specific repeating invoice template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="repeatingInvoices"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RepeatingInvoices>> UpdateRepeatingInvoiceWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, RepeatingInvoices repeatingInvoices, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateRepeatingInvoice");
            }

            // verify the required parameter 'repeatingInvoices' is set
            if (repeatingInvoices == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'repeatingInvoices' when calling AccountingApi->UpdateRepeatingInvoice");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = repeatingInvoices;

            localVarRequestOptions.Operation = "AccountingApi.UpdateRepeatingInvoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RepeatingInvoices>("/RepeatingInvoices/{RepeatingInvoiceID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRepeatingInvoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Attachments</returns>
        public Attachments UpdateRepeatingInvoiceAttachmentByFileName(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = UpdateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(xeroTenantId, repeatingInvoiceID, fileName, body, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Attachments</returns>
        public Org.OpenAPITools.Client.ApiResponse<Attachments> UpdateRepeatingInvoiceAttachmentByFileNameWithHttpInfo(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateRepeatingInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRepeatingInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateRepeatingInvoiceAttachmentByFileNameAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Attachments> localVarResponse = await UpdateRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(xeroTenantId, repeatingInvoiceID, fileName, body, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific attachment from a specific repeating invoices by file name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Attachments>> UpdateRepeatingInvoiceAttachmentByFileNameWithHttpInfoAsync(string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'fileName' is set
            if (fileName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("RepeatingInvoiceID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            localVarRequestOptions.PathParameters.Add("FileName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AccountingApi.UpdateRepeatingInvoiceAttachmentByFileName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRepeatingInvoiceAttachmentByFileName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        public TaxRates UpdateTaxRate(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = UpdateTaxRateWithHttpInfo(xeroTenantId, taxRates, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        public Org.OpenAPITools.Client.ApiResponse<TaxRates> UpdateTaxRateWithHttpInfo(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTaxRate");
            }

            // verify the required parameter 'taxRates' is set
            if (taxRates == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taxRates' when calling AccountingApi->UpdateTaxRate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = taxRates;

            localVarRequestOptions.Operation = "AccountingApi.UpdateTaxRate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaxRates>("/TaxRates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaxRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> UpdateTaxRateAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TaxRates> localVarResponse = await UpdateTaxRateWithHttpInfoAsync(xeroTenantId, taxRates, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates tax rates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TaxRates>> UpdateTaxRateWithHttpInfoAsync(string xeroTenantId, TaxRates taxRates, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTaxRate");
            }

            // verify the required parameter 'taxRates' is set
            if (taxRates == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'taxRates' when calling AccountingApi->UpdateTaxRate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = taxRates;

            localVarRequestOptions.Operation = "AccountingApi.UpdateTaxRate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TaxRates>("/TaxRates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaxRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingCategories</returns>
        public TrackingCategories UpdateTrackingCategory(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = UpdateTrackingCategoryWithHttpInfo(xeroTenantId, trackingCategoryID, trackingCategory, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingCategories</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingCategories> UpdateTrackingCategoryWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTrackingCategory");
            }

            // verify the required parameter 'trackingCategory' is set
            if (trackingCategory == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingCategory' when calling AccountingApi->UpdateTrackingCategory");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingCategory;

            localVarRequestOptions.Operation = "AccountingApi.UpdateTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> UpdateTrackingCategoryAsync(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingCategories> localVarResponse = await UpdateTrackingCategoryWithHttpInfoAsync(xeroTenantId, trackingCategoryID, trackingCategory, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingCategories>> UpdateTrackingCategoryWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTrackingCategory");
            }

            // verify the required parameter 'trackingCategory' is set
            if (trackingCategory == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingCategory' when calling AccountingApi->UpdateTrackingCategory");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingCategory;

            localVarRequestOptions.Operation = "AccountingApi.UpdateTrackingCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTrackingCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackingOptions</returns>
        public TrackingOptions UpdateTrackingOptions(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingOptions> localVarResponse = UpdateTrackingOptionsWithHttpInfo(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, idempotencyKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackingOptions</returns>
        public Org.OpenAPITools.Client.ApiResponse<TrackingOptions> UpdateTrackingOptionsWithHttpInfo(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTrackingOptions");
            }

            // verify the required parameter 'trackingOption' is set
            if (trackingOption == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingOption' when calling AccountingApi->UpdateTrackingOptions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TrackingOptionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingOptionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingOption;

            localVarRequestOptions.Operation = "AccountingApi.UpdateTrackingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTrackingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackingOptions</returns>
        public async System.Threading.Tasks.Task<TrackingOptions> UpdateTrackingOptionsAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TrackingOptions> localVarResponse = await UpdateTrackingOptionsWithHttpInfoAsync(xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption, idempotencyKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific option for a specific tracking category 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <param name="trackingOption"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TrackingOptions>> UpdateTrackingOptionsWithHttpInfoAsync(string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID, TrackingOption trackingOption, string? idempotencyKey = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTrackingOptions");
            }

            // verify the required parameter 'trackingOption' is set
            if (trackingOption == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trackingOption' when calling AccountingApi->UpdateTrackingOptions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("TrackingCategoryID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TrackingOptionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingOptionID)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("xero-tenant-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Idempotency-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = trackingOption;

            localVarRequestOptions.Operation = "AccountingApi.UpdateTrackingOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTrackingOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
