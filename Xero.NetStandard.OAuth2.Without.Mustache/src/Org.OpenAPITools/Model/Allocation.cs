/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Allocation
    /// </summary>
    [DataContract(Name = "Allocation")]
    public partial class Allocation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Allocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Allocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Allocation" /> class.
        /// </summary>
        /// <param name="allocationID">Xero generated unique identifier.</param>
        /// <param name="invoice">invoice (required).</param>
        /// <param name="overpayment">overpayment.</param>
        /// <param name="prepayment">prepayment.</param>
        /// <param name="creditNote">creditNote.</param>
        /// <param name="amount">the amount being applied to the invoice (required).</param>
        /// <param name="date">the date the allocation is applied YYYY-MM-DD. (required).</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public Allocation(Guid allocationID = default(Guid), Invoice invoice = default(Invoice), Overpayment overpayment = default(Overpayment), Prepayment prepayment = default(Prepayment), CreditNote creditNote = default(CreditNote), double amount = default(double), string date = default(string), string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            // to ensure "invoice" is required (not null)
            if (invoice == null)
            {
                throw new ArgumentNullException("invoice is a required property for Allocation and cannot be null");
            }
            this.Invoice = invoice;
            this.Amount = amount;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for Allocation and cannot be null");
            }
            this.Date = date;
            this.AllocationID = allocationID;
            this.Overpayment = overpayment;
            this.Prepayment = prepayment;
            this.CreditNote = creditNote;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// Xero generated unique identifier
        /// </summary>
        /// <value>Xero generated unique identifier</value>
        [DataMember(Name = "AllocationID", EmitDefaultValue = false)]
        public Guid AllocationID { get; set; }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name = "Invoice", IsRequired = true, EmitDefaultValue = true)]
        public Invoice Invoice { get; set; }

        /// <summary>
        /// Gets or Sets Overpayment
        /// </summary>
        [DataMember(Name = "Overpayment", EmitDefaultValue = false)]
        public Overpayment Overpayment { get; set; }

        /// <summary>
        /// Gets or Sets Prepayment
        /// </summary>
        [DataMember(Name = "Prepayment", EmitDefaultValue = false)]
        public Prepayment Prepayment { get; set; }

        /// <summary>
        /// Gets or Sets CreditNote
        /// </summary>
        [DataMember(Name = "CreditNote", EmitDefaultValue = false)]
        public CreditNote CreditNote { get; set; }

        /// <summary>
        /// the amount being applied to the invoice
        /// </summary>
        /// <value>the amount being applied to the invoice</value>
        [DataMember(Name = "Amount", IsRequired = true, EmitDefaultValue = true)]
        public double Amount { get; set; }

        /// <summary>
        /// the date the allocation is applied YYYY-MM-DD.
        /// </summary>
        /// <value>the date the allocation is applied YYYY-MM-DD.</value>
        [DataMember(Name = "Date", IsRequired = true, EmitDefaultValue = true)]
        public string Date { get; set; }

        /// <summary>
        /// A flag that returns true when the allocation is succesfully deleted
        /// </summary>
        /// <value>A flag that returns true when the allocation is succesfully deleted</value>
        [DataMember(Name = "IsDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; private set; }

        /// <summary>
        /// Returns false as IsDeleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDeleted()
        {
            return false;
        }
        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Allocation {\n");
            sb.Append("  AllocationID: ").Append(AllocationID).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  Overpayment: ").Append(Overpayment).Append("\n");
            sb.Append("  Prepayment: ").Append(Prepayment).Append("\n");
            sb.Append("  CreditNote: ").Append(CreditNote).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
