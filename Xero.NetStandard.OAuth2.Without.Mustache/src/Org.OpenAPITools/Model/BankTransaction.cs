/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BankTransaction
    /// </summary>
    [DataContract(Name = "BankTransaction")]
    public partial class BankTransaction : IValidatableObject
    {
        /// <summary>
        /// See Bank Transaction Types
        /// </summary>
        /// <value>See Bank Transaction Types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum RECEIVE for value: RECEIVE
            /// </summary>
            [EnumMember(Value = "RECEIVE")]
            RECEIVE = 1,

            /// <summary>
            /// Enum RECEIVEOVERPAYMENT for value: RECEIVE-OVERPAYMENT
            /// </summary>
            [EnumMember(Value = "RECEIVE-OVERPAYMENT")]
            RECEIVEOVERPAYMENT = 2,

            /// <summary>
            /// Enum RECEIVEPREPAYMENT for value: RECEIVE-PREPAYMENT
            /// </summary>
            [EnumMember(Value = "RECEIVE-PREPAYMENT")]
            RECEIVEPREPAYMENT = 3,

            /// <summary>
            /// Enum SPEND for value: SPEND
            /// </summary>
            [EnumMember(Value = "SPEND")]
            SPEND = 4,

            /// <summary>
            /// Enum SPENDOVERPAYMENT for value: SPEND-OVERPAYMENT
            /// </summary>
            [EnumMember(Value = "SPEND-OVERPAYMENT")]
            SPENDOVERPAYMENT = 5,

            /// <summary>
            /// Enum SPENDPREPAYMENT for value: SPEND-PREPAYMENT
            /// </summary>
            [EnumMember(Value = "SPEND-PREPAYMENT")]
            SPENDPREPAYMENT = 6,

            /// <summary>
            /// Enum RECEIVETRANSFER for value: RECEIVE-TRANSFER
            /// </summary>
            [EnumMember(Value = "RECEIVE-TRANSFER")]
            RECEIVETRANSFER = 7,

            /// <summary>
            /// Enum SPENDTRANSFER for value: SPEND-TRANSFER
            /// </summary>
            [EnumMember(Value = "SPEND-TRANSFER")]
            SPENDTRANSFER = 8
        }


        /// <summary>
        /// See Bank Transaction Types
        /// </summary>
        /// <value>See Bank Transaction Types</value>
        [DataMember(Name = "Type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public CurrencyCode? CurrencyCode { get; set; }
        /// <summary>
        /// See Bank Transaction Status Codes
        /// </summary>
        /// <value>See Bank Transaction Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 1,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 2,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 3
        }


        /// <summary>
        /// See Bank Transaction Status Codes
        /// </summary>
        /// <value>See Bank Transaction Status Codes</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankTransaction" /> class.
        /// </summary>
        /// <param name="type">See Bank Transaction Types (required).</param>
        /// <param name="contact">contact.</param>
        /// <param name="lineItems">See LineItems (required).</param>
        /// <param name="bankAccount">bankAccount (required).</param>
        /// <param name="isReconciled">Boolean to show if transaction is reconciled.</param>
        /// <param name="date">Date of transaction – YYYY-MM-DD.</param>
        /// <param name="reference">Reference for the transaction. Only supported for SPEND and RECEIVE transactions..</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="currencyRate">Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments..</param>
        /// <param name="url">URL link to a source document – shown as “Go to App Name”.</param>
        /// <param name="status">See Bank Transaction Status Codes.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="subTotal">Total of bank transaction excluding taxes.</param>
        /// <param name="totalTax">Total tax on bank transaction.</param>
        /// <param name="total">Total of bank transaction tax inclusive.</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for bank transaction.</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public BankTransaction(TypeEnum type = default(TypeEnum), Contact contact = default(Contact), List<LineItem> lineItems = default(List<LineItem>), Account bankAccount = default(Account), bool isReconciled = default(bool), string date = default(string), string reference = default(string), CurrencyCode? currencyCode = default(CurrencyCode?), double currencyRate = default(double), string url = default(string), StatusEnum? status = default(StatusEnum?), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), double subTotal = default(double), double totalTax = default(double), double total = default(double), Guid bankTransactionID = default(Guid), string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            this.Type = type;
            // to ensure "lineItems" is required (not null)
            if (lineItems == null)
            {
                throw new ArgumentNullException("lineItems is a required property for BankTransaction and cannot be null");
            }
            this.LineItems = lineItems;
            // to ensure "bankAccount" is required (not null)
            if (bankAccount == null)
            {
                throw new ArgumentNullException("bankAccount is a required property for BankTransaction and cannot be null");
            }
            this.BankAccount = bankAccount;
            this.Contact = contact;
            this.IsReconciled = isReconciled;
            this.Date = date;
            this.Reference = reference;
            this.CurrencyCode = currencyCode;
            this.CurrencyRate = currencyRate;
            this.Url = url;
            this.Status = status;
            this.LineAmountTypes = lineAmountTypes;
            this.SubTotal = subTotal;
            this.TotalTax = totalTax;
            this.Total = total;
            this.BankTransactionID = bankTransactionID;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// See LineItems
        /// </summary>
        /// <value>See LineItems</value>
        [DataMember(Name = "LineItems", IsRequired = true, EmitDefaultValue = true)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name = "BankAccount", IsRequired = true, EmitDefaultValue = true)]
        public Account BankAccount { get; set; }

        /// <summary>
        /// Boolean to show if transaction is reconciled
        /// </summary>
        /// <value>Boolean to show if transaction is reconciled</value>
        [DataMember(Name = "IsReconciled", EmitDefaultValue = true)]
        public bool IsReconciled { get; set; }

        /// <summary>
        /// Date of transaction – YYYY-MM-DD
        /// </summary>
        /// <value>Date of transaction – YYYY-MM-DD</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Reference for the transaction. Only supported for SPEND and RECEIVE transactions.
        /// </summary>
        /// <value>Reference for the transaction. Only supported for SPEND and RECEIVE transactions.</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.
        /// </summary>
        /// <value>Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// URL link to a source document – shown as “Go to App Name”
        /// </summary>
        /// <value>URL link to a source document – shown as “Go to App Name”</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Total of bank transaction excluding taxes
        /// </summary>
        /// <value>Total of bank transaction excluding taxes</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; set; }

        /// <summary>
        /// Total tax on bank transaction
        /// </summary>
        /// <value>Total tax on bank transaction</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; set; }

        /// <summary>
        /// Total of bank transaction tax inclusive
        /// </summary>
        /// <value>Total of bank transaction tax inclusive</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Xero generated unique identifier for bank transaction
        /// </summary>
        /// <value>Xero generated unique identifier for bank transaction</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "BankTransactionID", EmitDefaultValue = false)]
        public Guid BankTransactionID { get; set; }

        /// <summary>
        /// Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
        /// </summary>
        /// <value>Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "PrepaymentID", EmitDefaultValue = false)]
        public Guid PrepaymentID { get; private set; }

        /// <summary>
        /// Returns false as PrepaymentID should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrepaymentID()
        {
            return false;
        }
        /// <summary>
        /// Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
        /// </summary>
        /// <value>Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "OverpaymentID", EmitDefaultValue = false)]
        public Guid OverpaymentID { get; private set; }

        /// <summary>
        /// Returns false as OverpaymentID should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOverpaymentID()
        {
            return false;
        }
        /// <summary>
        /// Last modified date UTC format
        /// </summary>
        /// <value>Last modified date UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Boolean to indicate if a bank transaction has an attachment
        /// </summary>
        /// <value>Boolean to indicate if a bank transaction has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankTransaction {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  IsReconciled: ").Append(IsReconciled).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  BankTransactionID: ").Append(BankTransactionID).Append("\n");
            sb.Append("  PrepaymentID: ").Append(PrepaymentID).Append("\n");
            sb.Append("  OverpaymentID: ").Append(OverpaymentID).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
