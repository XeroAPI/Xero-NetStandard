/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExpenseClaim
    /// </summary>
    [DataContract(Name = "ExpenseClaim")]
    public partial class ExpenseClaim : IValidatableObject
    {
        /// <summary>
        /// Current status of an expense claim – see status types
        /// </summary>
        /// <value>Current status of an expense claim – see status types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            [EnumMember(Value = "SUBMITTED")]
            SUBMITTED = 1,

            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 2,

            /// <summary>
            /// Enum PAID for value: PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAID = 3,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 4,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 5
        }


        /// <summary>
        /// Current status of an expense claim – see status types
        /// </summary>
        /// <value>Current status of an expense claim – see status types</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseClaim" /> class.
        /// </summary>
        /// <param name="expenseClaimID">Xero generated unique identifier for an expense claim.</param>
        /// <param name="status">Current status of an expense claim – see status types.</param>
        /// <param name="payments">See Payments.</param>
        /// <param name="user">user.</param>
        /// <param name="receipts">receipts.</param>
        /// <param name="receiptID">The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9.</param>
        public ExpenseClaim(Guid expenseClaimID = default(Guid), StatusEnum? status = default(StatusEnum?), List<Payment> payments = default(List<Payment>), User user = default(User), List<Receipt> receipts = default(List<Receipt>), Guid receiptID = default(Guid))
        {
            this.ExpenseClaimID = expenseClaimID;
            this.Status = status;
            this.Payments = payments;
            this.User = user;
            this.Receipts = receipts;
            this.ReceiptID = receiptID;
        }

        /// <summary>
        /// Xero generated unique identifier for an expense claim
        /// </summary>
        /// <value>Xero generated unique identifier for an expense claim</value>
        [DataMember(Name = "ExpenseClaimID", EmitDefaultValue = false)]
        public Guid ExpenseClaimID { get; set; }

        /// <summary>
        /// See Payments
        /// </summary>
        /// <value>See Payments</value>
        [DataMember(Name = "Payments", EmitDefaultValue = false)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Receipts
        /// </summary>
        [DataMember(Name = "Receipts", EmitDefaultValue = false)]
        public List<Receipt> Receipts { get; set; }

        /// <summary>
        /// Last modified date UTC format
        /// </summary>
        /// <value>Last modified date UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// The total of an expense claim being paid
        /// </summary>
        /// <value>The total of an expense claim being paid</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; private set; }

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return false;
        }
        /// <summary>
        /// The amount due to be paid for an expense claim
        /// </summary>
        /// <value>The amount due to be paid for an expense claim</value>
        [DataMember(Name = "AmountDue", EmitDefaultValue = false)]
        public double AmountDue { get; private set; }

        /// <summary>
        /// Returns false as AmountDue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDue()
        {
            return false;
        }
        /// <summary>
        /// The amount still to pay for an expense claim
        /// </summary>
        /// <value>The amount still to pay for an expense claim</value>
        [DataMember(Name = "AmountPaid", EmitDefaultValue = false)]
        public double AmountPaid { get; private set; }

        /// <summary>
        /// Returns false as AmountPaid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountPaid()
        {
            return false;
        }
        /// <summary>
        /// The date when the expense claim is due to be paid YYYY-MM-DD
        /// </summary>
        /// <value>The date when the expense claim is due to be paid YYYY-MM-DD</value>
        [DataMember(Name = "PaymentDueDate", EmitDefaultValue = false)]
        public string PaymentDueDate { get; private set; }

        /// <summary>
        /// Returns false as PaymentDueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentDueDate()
        {
            return false;
        }
        /// <summary>
        /// The date the expense claim will be reported in Xero YYYY-MM-DD
        /// </summary>
        /// <value>The date the expense claim will be reported in Xero YYYY-MM-DD</value>
        [DataMember(Name = "ReportingDate", EmitDefaultValue = false)]
        public string ReportingDate { get; private set; }

        /// <summary>
        /// Returns false as ReportingDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReportingDate()
        {
            return false;
        }
        /// <summary>
        /// The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9
        /// </summary>
        /// <value>The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9</value>
        [DataMember(Name = "ReceiptID", EmitDefaultValue = false)]
        public Guid ReceiptID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseClaim {\n");
            sb.Append("  ExpenseClaimID: ").Append(ExpenseClaimID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  ReportingDate: ").Append(ReportingDate).Append("\n");
            sb.Append("  ReceiptID: ").Append(ReceiptID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
