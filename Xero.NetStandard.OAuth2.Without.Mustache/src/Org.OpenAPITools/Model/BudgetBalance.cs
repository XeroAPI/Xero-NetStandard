/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BudgetBalance
    /// </summary>
    [DataContract(Name = "BudgetBalance")]
    public partial class BudgetBalance : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetBalance" /> class.
        /// </summary>
        /// <param name="period">Period the amount applies to (e.g. “2019-08”).</param>
        /// <param name="amount">LineItem Quantity.</param>
        /// <param name="unitAmount">Budgeted amount.</param>
        /// <param name="notes">Any footnotes associated with this balance.</param>
        public BudgetBalance(string period = default(string), double amount = default(double), double unitAmount = default(double), string notes = default(string))
        {
            this.Period = period;
            this.Amount = amount;
            this.UnitAmount = unitAmount;
            this.Notes = notes;
        }

        /// <summary>
        /// Period the amount applies to (e.g. “2019-08”)
        /// </summary>
        /// <value>Period the amount applies to (e.g. “2019-08”)</value>
        [DataMember(Name = "Period", EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// LineItem Quantity
        /// </summary>
        /// <value>LineItem Quantity</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Budgeted amount
        /// </summary>
        /// <value>Budgeted amount</value>
        [DataMember(Name = "UnitAmount", EmitDefaultValue = false)]
        public double UnitAmount { get; set; }

        /// <summary>
        /// Any footnotes associated with this balance
        /// </summary>
        /// <value>Any footnotes associated with this balance</value>
        [DataMember(Name = "Notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BudgetBalance {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Notes (string) maxLength
            if (this.Notes != null && this.Notes.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Notes, length must be less than 255.", new [] { "Notes" });
            }

            yield break;
        }
    }

}
