/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchPayment
    /// </summary>
    [DataContract(Name = "BatchPayment")]
    public partial class BatchPayment : IValidatableObject
    {
        /// <summary>
        /// PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
        /// </summary>
        /// <value>PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PAYBATCH for value: PAYBATCH
            /// </summary>
            [EnumMember(Value = "PAYBATCH")]
            PAYBATCH = 1,

            /// <summary>
            /// Enum RECBATCH for value: RECBATCH
            /// </summary>
            [EnumMember(Value = "RECBATCH")]
            RECBATCH = 2
        }


        /// <summary>
        /// PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
        /// </summary>
        /// <value>PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        /// <summary>
        /// AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
        /// </summary>
        /// <value>AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 1,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 2
        }


        /// <summary>
        /// AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
        /// </summary>
        /// <value>AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchPayment" /> class.
        /// </summary>
        /// <param name="account">account.</param>
        /// <param name="reference">(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero..</param>
        /// <param name="particulars">(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero..</param>
        /// <param name="code">(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero..</param>
        /// <param name="details">(Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18.</param>
        /// <param name="narrative">(UK Only) Only shows on the statement line in Xero. Max length &#x3D;18.</param>
        /// <param name="dateString">Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06.</param>
        /// <param name="date">Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06.</param>
        /// <param name="amount">The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00.</param>
        /// <param name="payments">An array of payments.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public BatchPayment(Account account = default(Account), string reference = default(string), string particulars = default(string), string code = default(string), string details = default(string), string narrative = default(string), string dateString = default(string), string date = default(string), double amount = default(double), List<Payment> payments = default(List<Payment>), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            this.Account = account;
            this.Reference = reference;
            this.Particulars = particulars;
            this.Code = code;
            this.Details = details;
            this.Narrative = narrative;
            this.DateString = dateString;
            this.Date = date;
            this.Amount = amount;
            this.Payments = payments;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "Account", EmitDefaultValue = false)]
        public Account Account { get; set; }

        /// <summary>
        /// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
        /// </summary>
        /// <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
        /// </summary>
        /// <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        [DataMember(Name = "Particulars", EmitDefaultValue = false)]
        public string Particulars { get; set; }

        /// <summary>
        /// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
        /// </summary>
        /// <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        [DataMember(Name = "Code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18
        /// </summary>
        /// <value>(Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18</value>
        [DataMember(Name = "Details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// (UK Only) Only shows on the statement line in Xero. Max length &#x3D;18
        /// </summary>
        /// <value>(UK Only) Only shows on the statement line in Xero. Max length &#x3D;18</value>
        [DataMember(Name = "Narrative", EmitDefaultValue = false)]
        public string Narrative { get; set; }

        /// <summary>
        /// The Xero generated unique identifier for the bank transaction (read-only)
        /// </summary>
        /// <value>The Xero generated unique identifier for the bank transaction (read-only)</value>
        [DataMember(Name = "BatchPaymentID", EmitDefaultValue = false)]
        public Guid BatchPaymentID { get; private set; }

        /// <summary>
        /// Returns false as BatchPaymentID should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBatchPaymentID()
        {
            return false;
        }
        /// <summary>
        /// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
        /// </summary>
        /// <value>Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06</value>
        [DataMember(Name = "DateString", EmitDefaultValue = false)]
        public string DateString { get; set; }

        /// <summary>
        /// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
        /// </summary>
        /// <value>Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
        /// </summary>
        /// <value>The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// An array of payments
        /// </summary>
        /// <value>An array of payments</value>
        [DataMember(Name = "Payments", EmitDefaultValue = false)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// The total of the payments that make up the batch (read-only)
        /// </summary>
        /// <value>The total of the payments that make up the batch (read-only)</value>
        [DataMember(Name = "TotalAmount", EmitDefaultValue = false)]
        public double TotalAmount { get; private set; }

        /// <summary>
        /// Returns false as TotalAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalAmount()
        {
            return false;
        }
        /// <summary>
        /// UTC timestamp of last update to the payment
        /// </summary>
        /// <value>UTC timestamp of last update to the payment</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Booelan that tells you if the batch payment has been reconciled (read-only)
        /// </summary>
        /// <value>Booelan that tells you if the batch payment has been reconciled (read-only)</value>
        [DataMember(Name = "IsReconciled", EmitDefaultValue = true)]
        public bool IsReconciled { get; private set; }

        /// <summary>
        /// Returns false as IsReconciled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsReconciled()
        {
            return false;
        }
        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchPayment {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Particulars: ").Append(Particulars).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  BatchPaymentID: ").Append(BatchPaymentID).Append("\n");
            sb.Append("  DateString: ").Append(DateString).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  IsReconciled: ").Append(IsReconciled).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 255.", new [] { "Reference" });
            }

            // Particulars (string) maxLength
            if (this.Particulars != null && this.Particulars.Length > 12)
            {
                yield return new ValidationResult("Invalid value for Particulars, length must be less than 12.", new [] { "Particulars" });
            }

            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 12)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 12.", new [] { "Code" });
            }

            // Narrative (string) maxLength
            if (this.Narrative != null && this.Narrative.Length > 18)
            {
                yield return new ValidationResult("Invalid value for Narrative, length must be less than 18.", new [] { "Narrative" });
            }

            yield break;
        }
    }

}
