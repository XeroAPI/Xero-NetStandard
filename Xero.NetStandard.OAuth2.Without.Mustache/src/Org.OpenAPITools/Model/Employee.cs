/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract(Name = "Employee")]
    public partial class Employee : IValidatableObject
    {
        /// <summary>
        /// Current status of an employee – see contact status types
        /// </summary>
        /// <value>Current status of an employee – see contact status types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum ARCHIVED for value: ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVED = 2,

            /// <summary>
            /// Enum GDPRREQUEST for value: GDPRREQUEST
            /// </summary>
            [EnumMember(Value = "GDPRREQUEST")]
            GDPRREQUEST = 3,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 4
        }


        /// <summary>
        /// Current status of an employee – see contact status types
        /// </summary>
        /// <value>Current status of an employee – see contact status types</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="employeeID">The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9.</param>
        /// <param name="status">Current status of an employee – see contact status types.</param>
        /// <param name="firstName">First name of an employee (max length &#x3D; 255).</param>
        /// <param name="lastName">Last name of an employee (max length &#x3D; 255).</param>
        /// <param name="externalLink">externalLink.</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public Employee(Guid employeeID = default(Guid), StatusEnum? status = default(StatusEnum?), string firstName = default(string), string lastName = default(string), ExternalLink externalLink = default(ExternalLink), string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            this.EmployeeID = employeeID;
            this.Status = status;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.ExternalLink = externalLink;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
        /// </summary>
        /// <value>The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        [DataMember(Name = "EmployeeID", EmitDefaultValue = false)]
        public Guid EmployeeID { get; set; }

        /// <summary>
        /// First name of an employee (max length &#x3D; 255)
        /// </summary>
        /// <value>First name of an employee (max length &#x3D; 255)</value>
        [DataMember(Name = "FirstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of an employee (max length &#x3D; 255)
        /// </summary>
        /// <value>Last name of an employee (max length &#x3D; 255)</value>
        [DataMember(Name = "LastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets ExternalLink
        /// </summary>
        [DataMember(Name = "ExternalLink", EmitDefaultValue = false)]
        public ExternalLink ExternalLink { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDateUTC
        /// </summary>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        /// <example>ERROR</example>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  EmployeeID: ").Append(EmployeeID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ExternalLink: ").Append(ExternalLink).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 255.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for LastName, length must be less than 255.", new [] { "LastName" });
            }

            yield break;
        }
    }

}
