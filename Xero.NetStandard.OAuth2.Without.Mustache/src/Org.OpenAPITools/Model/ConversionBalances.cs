/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Balance supplied for each account that has a value as at the conversion date.
    /// </summary>
    [DataContract(Name = "ConversionBalances")]
    public partial class ConversionBalances : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionBalances" /> class.
        /// </summary>
        /// <param name="accountCode">The account code for a account.</param>
        /// <param name="balance">The opening balances of the account. Debits are positive, credits are negative values.</param>
        /// <param name="balanceDetails">balanceDetails.</param>
        public ConversionBalances(string accountCode = default(string), double balance = default(double), List<BalanceDetails> balanceDetails = default(List<BalanceDetails>))
        {
            this.AccountCode = accountCode;
            this.Balance = balance;
            this.BalanceDetails = balanceDetails;
        }

        /// <summary>
        /// The account code for a account
        /// </summary>
        /// <value>The account code for a account</value>
        [DataMember(Name = "AccountCode", EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// The opening balances of the account. Debits are positive, credits are negative values
        /// </summary>
        /// <value>The opening balances of the account. Debits are positive, credits are negative values</value>
        [DataMember(Name = "Balance", EmitDefaultValue = false)]
        public double Balance { get; set; }

        /// <summary>
        /// Gets or Sets BalanceDetails
        /// </summary>
        [DataMember(Name = "BalanceDetails", EmitDefaultValue = false)]
        public List<BalanceDetails> BalanceDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversionBalances {\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  BalanceDetails: ").Append(BalanceDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
