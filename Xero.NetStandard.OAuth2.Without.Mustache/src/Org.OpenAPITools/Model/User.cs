/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
        /// </summary>
        /// <value>User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrganisationRoleEnum
        {
            /// <summary>
            /// Enum READONLY for value: READONLY
            /// </summary>
            [EnumMember(Value = "READONLY")]
            READONLY = 1,

            /// <summary>
            /// Enum INVOICEONLY for value: INVOICEONLY
            /// </summary>
            [EnumMember(Value = "INVOICEONLY")]
            INVOICEONLY = 2,

            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 3,

            /// <summary>
            /// Enum FINANCIALADVISER for value: FINANCIALADVISER
            /// </summary>
            [EnumMember(Value = "FINANCIALADVISER")]
            FINANCIALADVISER = 4,

            /// <summary>
            /// Enum MANAGEDCLIENT for value: MANAGEDCLIENT
            /// </summary>
            [EnumMember(Value = "MANAGEDCLIENT")]
            MANAGEDCLIENT = 5,

            /// <summary>
            /// Enum CASHBOOKCLIENT for value: CASHBOOKCLIENT
            /// </summary>
            [EnumMember(Value = "CASHBOOKCLIENT")]
            CASHBOOKCLIENT = 6,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 7
        }


        /// <summary>
        /// User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
        /// </summary>
        /// <value>User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)</value>
        [DataMember(Name = "OrganisationRole", EmitDefaultValue = false)]
        public OrganisationRoleEnum? OrganisationRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="userID">Xero identifier.</param>
        /// <param name="emailAddress">Email address of user.</param>
        /// <param name="firstName">First name of user.</param>
        /// <param name="lastName">Last name of user.</param>
        /// <param name="isSubscriber">Boolean to indicate if user is the subscriber.</param>
        /// <param name="organisationRole">User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc).</param>
        public User(Guid userID = default(Guid), string emailAddress = default(string), string firstName = default(string), string lastName = default(string), bool isSubscriber = default(bool), OrganisationRoleEnum? organisationRole = default(OrganisationRoleEnum?))
        {
            this.UserID = userID;
            this.EmailAddress = emailAddress;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.IsSubscriber = isSubscriber;
            this.OrganisationRole = organisationRole;
        }

        /// <summary>
        /// Xero identifier
        /// </summary>
        /// <value>Xero identifier</value>
        [DataMember(Name = "UserID", EmitDefaultValue = false)]
        public Guid UserID { get; set; }

        /// <summary>
        /// Email address of user
        /// </summary>
        /// <value>Email address of user</value>
        [DataMember(Name = "EmailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// First name of user
        /// </summary>
        /// <value>First name of user</value>
        [DataMember(Name = "FirstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of user
        /// </summary>
        /// <value>Last name of user</value>
        [DataMember(Name = "LastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Timestamp of last change to user
        /// </summary>
        /// <value>Timestamp of last change to user</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Boolean to indicate if user is the subscriber
        /// </summary>
        /// <value>Boolean to indicate if user is the subscriber</value>
        [DataMember(Name = "IsSubscriber", EmitDefaultValue = true)]
        public bool IsSubscriber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  IsSubscriber: ").Append(IsSubscriber).Append("\n");
            sb.Append("  OrganisationRole: ").Append(OrganisationRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
