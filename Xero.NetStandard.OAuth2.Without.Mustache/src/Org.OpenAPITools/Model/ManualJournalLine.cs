/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ManualJournalLine
    /// </summary>
    [DataContract(Name = "ManualJournalLine")]
    public partial class ManualJournalLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournalLine" /> class.
        /// </summary>
        /// <param name="lineAmount">total for line. Debits are positive, credits are negative value.</param>
        /// <param name="accountCode">See Accounts.</param>
        /// <param name="accountID">See Accounts.</param>
        /// <param name="description">Description for journal line.</param>
        /// <param name="taxType">The tax type from TaxRates.</param>
        /// <param name="tracking">Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements..</param>
        /// <param name="taxAmount">The calculated tax amount based on the TaxType and LineAmount.</param>
        /// <param name="isBlank">is the line blank.</param>
        public ManualJournalLine(double lineAmount = default(double), string accountCode = default(string), Guid accountID = default(Guid), string description = default(string), string taxType = default(string), List<TrackingCategory> tracking = default(List<TrackingCategory>), double taxAmount = default(double), bool isBlank = default(bool))
        {
            this.LineAmount = lineAmount;
            this.AccountCode = accountCode;
            this.AccountID = accountID;
            this.Description = description;
            this.TaxType = taxType;
            this.Tracking = tracking;
            this.TaxAmount = taxAmount;
            this.IsBlank = isBlank;
        }

        /// <summary>
        /// total for line. Debits are positive, credits are negative value
        /// </summary>
        /// <value>total for line. Debits are positive, credits are negative value</value>
        /// <example>-2569.0</example>
        [DataMember(Name = "LineAmount", EmitDefaultValue = false)]
        public double LineAmount { get; set; }

        /// <summary>
        /// See Accounts
        /// </summary>
        /// <value>See Accounts</value>
        /// <example>720</example>
        [DataMember(Name = "AccountCode", EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// See Accounts
        /// </summary>
        /// <value>See Accounts</value>
        [DataMember(Name = "AccountID", EmitDefaultValue = false)]
        public Guid AccountID { get; set; }

        /// <summary>
        /// Description for journal line
        /// </summary>
        /// <value>Description for journal line</value>
        /// <example>Coded incorrectly Office Equipment should be Computer Equipment</example>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The tax type from TaxRates
        /// </summary>
        /// <value>The tax type from TaxRates</value>
        [DataMember(Name = "TaxType", EmitDefaultValue = false)]
        public string TaxType { get; set; }

        /// <summary>
        /// Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.
        /// </summary>
        /// <value>Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.</value>
        [DataMember(Name = "Tracking", EmitDefaultValue = false)]
        public List<TrackingCategory> Tracking { get; set; }

        /// <summary>
        /// The calculated tax amount based on the TaxType and LineAmount
        /// </summary>
        /// <value>The calculated tax amount based on the TaxType and LineAmount</value>
        /// <example>0.0</example>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public double TaxAmount { get; set; }

        /// <summary>
        /// is the line blank
        /// </summary>
        /// <value>is the line blank</value>
        /// <example>false</example>
        [DataMember(Name = "IsBlank", EmitDefaultValue = true)]
        public bool IsBlank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManualJournalLine {\n");
            sb.Append("  LineAmount: ").Append(LineAmount).Append("\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  IsBlank: ").Append(IsBlank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
