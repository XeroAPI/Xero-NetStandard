/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RepeatingInvoice
    /// </summary>
    [DataContract(Name = "RepeatingInvoice")]
    public partial class RepeatingInvoice : IValidatableObject
    {
        /// <summary>
        /// See Invoice Types
        /// </summary>
        /// <value>See Invoice Types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ACCPAY for value: ACCPAY
            /// </summary>
            [EnumMember(Value = "ACCPAY")]
            ACCPAY = 1,

            /// <summary>
            /// Enum ACCREC for value: ACCREC
            /// </summary>
            [EnumMember(Value = "ACCREC")]
            ACCREC = 2
        }


        /// <summary>
        /// See Invoice Types
        /// </summary>
        /// <value>See Invoice Types</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public CurrencyCode? CurrencyCode { get; set; }
        /// <summary>
        /// One of the following - DRAFT or AUTHORISED – See Invoice Status Codes
        /// </summary>
        /// <value>One of the following - DRAFT or AUTHORISED – See Invoice Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 1,

            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 2,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 3
        }


        /// <summary>
        /// One of the following - DRAFT or AUTHORISED – See Invoice Status Codes
        /// </summary>
        /// <value>One of the following - DRAFT or AUTHORISED – See Invoice Status Codes</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RepeatingInvoice" /> class.
        /// </summary>
        /// <param name="type">See Invoice Types.</param>
        /// <param name="contact">contact.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="lineItems">See LineItems.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="reference">ACCREC only – additional reference number.</param>
        /// <param name="brandingThemeID">See BrandingThemes.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="status">One of the following - DRAFT or AUTHORISED – See Invoice Status Codes.</param>
        /// <param name="subTotal">Total of invoice excluding taxes.</param>
        /// <param name="totalTax">Total tax on invoice.</param>
        /// <param name="total">Total of Invoice tax inclusive (i.e. SubTotal + TotalTax).</param>
        /// <param name="repeatingInvoiceID">Xero generated unique identifier for repeating invoice template.</param>
        /// <param name="iD">Xero generated unique identifier for repeating invoice template.</param>
        /// <param name="attachments">Displays array of attachments from the API.</param>
        /// <param name="approvedForSending">Boolean to indicate whether the invoice has been approved for sending (default to false).</param>
        /// <param name="sendCopy">Boolean to indicate whether a copy is sent to sender&#39;s email (default to false).</param>
        /// <param name="markAsSent">Boolean to indicate whether the invoice in the Xero app displays as \&quot;sent\&quot; (default to false).</param>
        /// <param name="includePDF">Boolean to indicate whether to include PDF attachment (default to false).</param>
        public RepeatingInvoice(TypeEnum? type = default(TypeEnum?), Contact contact = default(Contact), Schedule schedule = default(Schedule), List<LineItem> lineItems = default(List<LineItem>), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), string reference = default(string), Guid brandingThemeID = default(Guid), CurrencyCode? currencyCode = default(CurrencyCode?), StatusEnum? status = default(StatusEnum?), double subTotal = default(double), double totalTax = default(double), double total = default(double), Guid repeatingInvoiceID = default(Guid), Guid iD = default(Guid), List<Attachment> attachments = default(List<Attachment>), bool approvedForSending = false, bool sendCopy = false, bool markAsSent = false, bool includePDF = false)
        {
            this.Type = type;
            this.Contact = contact;
            this.Schedule = schedule;
            this.LineItems = lineItems;
            this.LineAmountTypes = lineAmountTypes;
            this.Reference = reference;
            this.BrandingThemeID = brandingThemeID;
            this.CurrencyCode = currencyCode;
            this.Status = status;
            this.SubTotal = subTotal;
            this.TotalTax = totalTax;
            this.Total = total;
            this.RepeatingInvoiceID = repeatingInvoiceID;
            this.ID = iD;
            this.Attachments = attachments;
            this.ApprovedForSending = approvedForSending;
            this.SendCopy = sendCopy;
            this.MarkAsSent = markAsSent;
            this.IncludePDF = includePDF;
        }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "Schedule", EmitDefaultValue = false)]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// See LineItems
        /// </summary>
        /// <value>See LineItems</value>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// ACCREC only – additional reference number
        /// </summary>
        /// <value>ACCREC only – additional reference number</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// See BrandingThemes
        /// </summary>
        /// <value>See BrandingThemes</value>
        [DataMember(Name = "BrandingThemeID", EmitDefaultValue = false)]
        public Guid BrandingThemeID { get; set; }

        /// <summary>
        /// Total of invoice excluding taxes
        /// </summary>
        /// <value>Total of invoice excluding taxes</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; set; }

        /// <summary>
        /// Total tax on invoice
        /// </summary>
        /// <value>Total tax on invoice</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; set; }

        /// <summary>
        /// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
        /// </summary>
        /// <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Xero generated unique identifier for repeating invoice template
        /// </summary>
        /// <value>Xero generated unique identifier for repeating invoice template</value>
        [DataMember(Name = "RepeatingInvoiceID", EmitDefaultValue = false)]
        public Guid RepeatingInvoiceID { get; set; }

        /// <summary>
        /// Xero generated unique identifier for repeating invoice template
        /// </summary>
        /// <value>Xero generated unique identifier for repeating invoice template</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public Guid ID { get; set; }

        /// <summary>
        /// Boolean to indicate if an invoice has an attachment
        /// </summary>
        /// <value>Boolean to indicate if an invoice has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// Displays array of attachments from the API
        /// </summary>
        /// <value>Displays array of attachments from the API</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Boolean to indicate whether the invoice has been approved for sending
        /// </summary>
        /// <value>Boolean to indicate whether the invoice has been approved for sending</value>
        /// <example>false</example>
        [DataMember(Name = "ApprovedForSending", EmitDefaultValue = true)]
        public bool ApprovedForSending { get; set; }

        /// <summary>
        /// Boolean to indicate whether a copy is sent to sender&#39;s email
        /// </summary>
        /// <value>Boolean to indicate whether a copy is sent to sender&#39;s email</value>
        /// <example>false</example>
        [DataMember(Name = "SendCopy", EmitDefaultValue = true)]
        public bool SendCopy { get; set; }

        /// <summary>
        /// Boolean to indicate whether the invoice in the Xero app displays as \&quot;sent\&quot;
        /// </summary>
        /// <value>Boolean to indicate whether the invoice in the Xero app displays as \&quot;sent\&quot;</value>
        /// <example>false</example>
        [DataMember(Name = "MarkAsSent", EmitDefaultValue = true)]
        public bool MarkAsSent { get; set; }

        /// <summary>
        /// Boolean to indicate whether to include PDF attachment
        /// </summary>
        /// <value>Boolean to indicate whether to include PDF attachment</value>
        /// <example>false</example>
        [DataMember(Name = "IncludePDF", EmitDefaultValue = true)]
        public bool IncludePDF { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RepeatingInvoice {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  BrandingThemeID: ").Append(BrandingThemeID).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  RepeatingInvoiceID: ").Append(RepeatingInvoiceID).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  ApprovedForSending: ").Append(ApprovedForSending).Append("\n");
            sb.Append("  SendCopy: ").Append(SendCopy).Append("\n");
            sb.Append("  MarkAsSent: ").Append(MarkAsSent).Append("\n");
            sb.Append("  IncludePDF: ").Append(IncludePDF).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
