/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Prepayment
    /// </summary>
    [DataContract(Name = "Prepayment")]
    public partial class Prepayment : IValidatableObject
    {
        /// <summary>
        /// See Prepayment Types
        /// </summary>
        /// <value>See Prepayment Types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum RECEIVEPREPAYMENT for value: RECEIVE-PREPAYMENT
            /// </summary>
            [EnumMember(Value = "RECEIVE-PREPAYMENT")]
            RECEIVEPREPAYMENT = 1,

            /// <summary>
            /// Enum SPENDPREPAYMENT for value: SPEND-PREPAYMENT
            /// </summary>
            [EnumMember(Value = "SPEND-PREPAYMENT")]
            SPENDPREPAYMENT = 2,

            /// <summary>
            /// Enum ARPREPAYMENT for value: ARPREPAYMENT
            /// </summary>
            [EnumMember(Value = "ARPREPAYMENT")]
            ARPREPAYMENT = 3,

            /// <summary>
            /// Enum APPREPAYMENT for value: APPREPAYMENT
            /// </summary>
            [EnumMember(Value = "APPREPAYMENT")]
            APPREPAYMENT = 4
        }


        /// <summary>
        /// See Prepayment Types
        /// </summary>
        /// <value>See Prepayment Types</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// See Prepayment Status Codes
        /// </summary>
        /// <value>See Prepayment Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 1,

            /// <summary>
            /// Enum PAID for value: PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAID = 2,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 3
        }


        /// <summary>
        /// See Prepayment Status Codes
        /// </summary>
        /// <value>See Prepayment Status Codes</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public CurrencyCode? CurrencyCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Prepayment" /> class.
        /// </summary>
        /// <param name="type">See Prepayment Types.</param>
        /// <param name="contact">contact.</param>
        /// <param name="date">The date the prepayment is created YYYY-MM-DD.</param>
        /// <param name="status">See Prepayment Status Codes.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="lineItems">See Prepayment Line Items.</param>
        /// <param name="subTotal">The subtotal of the prepayment excluding taxes.</param>
        /// <param name="totalTax">The total tax on the prepayment.</param>
        /// <param name="total">The total of the prepayment(subtotal + total tax).</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="prepaymentID">Xero generated unique identifier.</param>
        /// <param name="currencyRate">The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used.</param>
        /// <param name="remainingCredit">The remaining credit balance on the prepayment.</param>
        /// <param name="allocations">See Allocations.</param>
        /// <param name="payments">See Payments.</param>
        /// <param name="appliedAmount">The amount of applied to an invoice.</param>
        /// <param name="attachments">See Attachments.</param>
        public Prepayment(TypeEnum? type = default(TypeEnum?), Contact contact = default(Contact), string date = default(string), StatusEnum? status = default(StatusEnum?), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), List<LineItem> lineItems = default(List<LineItem>), double subTotal = default(double), double totalTax = default(double), double total = default(double), CurrencyCode? currencyCode = default(CurrencyCode?), Guid prepaymentID = default(Guid), double currencyRate = default(double), double remainingCredit = default(double), List<Allocation> allocations = default(List<Allocation>), List<Payment> payments = default(List<Payment>), double appliedAmount = default(double), List<Attachment> attachments = default(List<Attachment>))
        {
            this.Type = type;
            this.Contact = contact;
            this.Date = date;
            this.Status = status;
            this.LineAmountTypes = lineAmountTypes;
            this.LineItems = lineItems;
            this.SubTotal = subTotal;
            this.TotalTax = totalTax;
            this.Total = total;
            this.CurrencyCode = currencyCode;
            this.PrepaymentID = prepaymentID;
            this.CurrencyRate = currencyRate;
            this.RemainingCredit = remainingCredit;
            this.Allocations = allocations;
            this.Payments = payments;
            this.AppliedAmount = appliedAmount;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// The date the prepayment is created YYYY-MM-DD
        /// </summary>
        /// <value>The date the prepayment is created YYYY-MM-DD</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// See Prepayment Line Items
        /// </summary>
        /// <value>See Prepayment Line Items</value>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// The subtotal of the prepayment excluding taxes
        /// </summary>
        /// <value>The subtotal of the prepayment excluding taxes</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; set; }

        /// <summary>
        /// The total tax on the prepayment
        /// </summary>
        /// <value>The total tax on the prepayment</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; set; }

        /// <summary>
        /// The total of the prepayment(subtotal + total tax)
        /// </summary>
        /// <value>The total of the prepayment(subtotal + total tax)</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Returns Invoice number field. Reference field isn&#39;t available.
        /// </summary>
        /// <value>Returns Invoice number field. Reference field isn&#39;t available.</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; private set; }

        /// <summary>
        /// Returns false as Reference should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReference()
        {
            return false;
        }
        /// <summary>
        /// UTC timestamp of last update to the prepayment
        /// </summary>
        /// <value>UTC timestamp of last update to the prepayment</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Xero generated unique identifier
        /// </summary>
        /// <value>Xero generated unique identifier</value>
        [DataMember(Name = "PrepaymentID", EmitDefaultValue = false)]
        public Guid PrepaymentID { get; set; }

        /// <summary>
        /// The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used
        /// </summary>
        /// <value>The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// The remaining credit balance on the prepayment
        /// </summary>
        /// <value>The remaining credit balance on the prepayment</value>
        [DataMember(Name = "RemainingCredit", EmitDefaultValue = false)]
        public double RemainingCredit { get; set; }

        /// <summary>
        /// See Allocations
        /// </summary>
        /// <value>See Allocations</value>
        [DataMember(Name = "Allocations", EmitDefaultValue = false)]
        public List<Allocation> Allocations { get; set; }

        /// <summary>
        /// See Payments
        /// </summary>
        /// <value>See Payments</value>
        [DataMember(Name = "Payments", EmitDefaultValue = false)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// The amount of applied to an invoice
        /// </summary>
        /// <value>The amount of applied to an invoice</value>
        /// <example>2.0</example>
        [DataMember(Name = "AppliedAmount", EmitDefaultValue = false)]
        public double AppliedAmount { get; set; }

        /// <summary>
        /// boolean to indicate if a prepayment has an attachment
        /// </summary>
        /// <value>boolean to indicate if a prepayment has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// See Attachments
        /// </summary>
        /// <value>See Attachments</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Prepayment {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PrepaymentID: ").Append(PrepaymentID).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  RemainingCredit: ").Append(RemainingCredit).Append("\n");
            sb.Append("  Allocations: ").Append(Allocations).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  AppliedAmount: ").Append(AppliedAmount).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
