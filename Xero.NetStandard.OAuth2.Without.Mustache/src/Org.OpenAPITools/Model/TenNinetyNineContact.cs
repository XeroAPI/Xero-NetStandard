/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TenNinetyNineContact
    /// </summary>
    [DataContract(Name = "TenNinetyNineContact")]
    public partial class TenNinetyNineContact : IValidatableObject
    {
        /// <summary>
        /// Contact federal tax classification
        /// </summary>
        /// <value>Contact federal tax classification</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FederalTaxClassificationEnum
        {
            /// <summary>
            /// Enum SOLEPROPRIETOR for value: SOLE_PROPRIETOR
            /// </summary>
            [EnumMember(Value = "SOLE_PROPRIETOR")]
            SOLEPROPRIETOR = 1,

            /// <summary>
            /// Enum PARTNERSHIP for value: PARTNERSHIP
            /// </summary>
            [EnumMember(Value = "PARTNERSHIP")]
            PARTNERSHIP = 2,

            /// <summary>
            /// Enum TRUSTORESTATE for value: TRUST_OR_ESTATE
            /// </summary>
            [EnumMember(Value = "TRUST_OR_ESTATE")]
            TRUSTORESTATE = 3,

            /// <summary>
            /// Enum NONPROFIT for value: NONPROFIT
            /// </summary>
            [EnumMember(Value = "NONPROFIT")]
            NONPROFIT = 4,

            /// <summary>
            /// Enum CCORP for value: C_CORP
            /// </summary>
            [EnumMember(Value = "C_CORP")]
            CCORP = 5,

            /// <summary>
            /// Enum SCORP for value: S_CORP
            /// </summary>
            [EnumMember(Value = "S_CORP")]
            SCORP = 6,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 7
        }


        /// <summary>
        /// Contact federal tax classification
        /// </summary>
        /// <value>Contact federal tax classification</value>
        [DataMember(Name = "FederalTaxClassification", EmitDefaultValue = false)]
        public FederalTaxClassificationEnum? FederalTaxClassification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TenNinetyNineContact" /> class.
        /// </summary>
        /// <param name="box1">Box 1 on 1099 Form.</param>
        /// <param name="box2">Box 2 on 1099 Form.</param>
        /// <param name="box3">Box 3 on 1099 Form.</param>
        /// <param name="box4">Box 4 on 1099 Form.</param>
        /// <param name="box5">Box 5 on 1099 Form.</param>
        /// <param name="box6">Box 6 on 1099 Form.</param>
        /// <param name="box7">Box 7 on 1099 Form.</param>
        /// <param name="box8">Box 8 on 1099 Form.</param>
        /// <param name="box9">Box 9 on 1099 Form.</param>
        /// <param name="box10">Box 10 on 1099 Form.</param>
        /// <param name="box11">Box 11 on 1099 Form.</param>
        /// <param name="box13">Box 13 on 1099 Form.</param>
        /// <param name="box14">Box 14 on 1099 Form.</param>
        /// <param name="name">Contact name on 1099 Form.</param>
        /// <param name="federalTaxIDType">Contact Fed Tax ID type.</param>
        /// <param name="city">Contact city on 1099 Form.</param>
        /// <param name="zip">Contact zip on 1099 Form.</param>
        /// <param name="state">Contact State on 1099 Form.</param>
        /// <param name="email">Contact email on 1099 Form.</param>
        /// <param name="streetAddress">Contact address on 1099 Form.</param>
        /// <param name="taxID">Contact tax id on 1099 Form.</param>
        /// <param name="contactId">Contact contact id.</param>
        /// <param name="legalName">Contact legal name.</param>
        /// <param name="businessName">Contact business name.</param>
        /// <param name="federalTaxClassification">Contact federal tax classification.</param>
        public TenNinetyNineContact(double box1 = default(double), double box2 = default(double), double box3 = default(double), double box4 = default(double), double box5 = default(double), double box6 = default(double), double box7 = default(double), double box8 = default(double), double box9 = default(double), double box10 = default(double), double box11 = default(double), double box13 = default(double), double box14 = default(double), string name = default(string), string federalTaxIDType = default(string), string city = default(string), string zip = default(string), string state = default(string), string email = default(string), string streetAddress = default(string), string taxID = default(string), Guid contactId = default(Guid), string legalName = default(string), string businessName = default(string), FederalTaxClassificationEnum? federalTaxClassification = default(FederalTaxClassificationEnum?))
        {
            this.Box1 = box1;
            this.Box2 = box2;
            this.Box3 = box3;
            this.Box4 = box4;
            this.Box5 = box5;
            this.Box6 = box6;
            this.Box7 = box7;
            this.Box8 = box8;
            this.Box9 = box9;
            this.Box10 = box10;
            this.Box11 = box11;
            this.Box13 = box13;
            this.Box14 = box14;
            this.Name = name;
            this.FederalTaxIDType = federalTaxIDType;
            this.City = city;
            this.Zip = zip;
            this.State = state;
            this.Email = email;
            this.StreetAddress = streetAddress;
            this.TaxID = taxID;
            this.ContactId = contactId;
            this.LegalName = legalName;
            this.BusinessName = businessName;
            this.FederalTaxClassification = federalTaxClassification;
        }

        /// <summary>
        /// Box 1 on 1099 Form
        /// </summary>
        /// <value>Box 1 on 1099 Form</value>
        [DataMember(Name = "Box1", EmitDefaultValue = false)]
        public double Box1 { get; set; }

        /// <summary>
        /// Box 2 on 1099 Form
        /// </summary>
        /// <value>Box 2 on 1099 Form</value>
        [DataMember(Name = "Box2", EmitDefaultValue = false)]
        public double Box2 { get; set; }

        /// <summary>
        /// Box 3 on 1099 Form
        /// </summary>
        /// <value>Box 3 on 1099 Form</value>
        [DataMember(Name = "Box3", EmitDefaultValue = false)]
        public double Box3 { get; set; }

        /// <summary>
        /// Box 4 on 1099 Form
        /// </summary>
        /// <value>Box 4 on 1099 Form</value>
        [DataMember(Name = "Box4", EmitDefaultValue = false)]
        public double Box4 { get; set; }

        /// <summary>
        /// Box 5 on 1099 Form
        /// </summary>
        /// <value>Box 5 on 1099 Form</value>
        [DataMember(Name = "Box5", EmitDefaultValue = false)]
        public double Box5 { get; set; }

        /// <summary>
        /// Box 6 on 1099 Form
        /// </summary>
        /// <value>Box 6 on 1099 Form</value>
        [DataMember(Name = "Box6", EmitDefaultValue = false)]
        public double Box6 { get; set; }

        /// <summary>
        /// Box 7 on 1099 Form
        /// </summary>
        /// <value>Box 7 on 1099 Form</value>
        [DataMember(Name = "Box7", EmitDefaultValue = false)]
        public double Box7 { get; set; }

        /// <summary>
        /// Box 8 on 1099 Form
        /// </summary>
        /// <value>Box 8 on 1099 Form</value>
        [DataMember(Name = "Box8", EmitDefaultValue = false)]
        public double Box8 { get; set; }

        /// <summary>
        /// Box 9 on 1099 Form
        /// </summary>
        /// <value>Box 9 on 1099 Form</value>
        [DataMember(Name = "Box9", EmitDefaultValue = false)]
        public double Box9 { get; set; }

        /// <summary>
        /// Box 10 on 1099 Form
        /// </summary>
        /// <value>Box 10 on 1099 Form</value>
        [DataMember(Name = "Box10", EmitDefaultValue = false)]
        public double Box10 { get; set; }

        /// <summary>
        /// Box 11 on 1099 Form
        /// </summary>
        /// <value>Box 11 on 1099 Form</value>
        [DataMember(Name = "Box11", EmitDefaultValue = false)]
        public double Box11 { get; set; }

        /// <summary>
        /// Box 13 on 1099 Form
        /// </summary>
        /// <value>Box 13 on 1099 Form</value>
        [DataMember(Name = "Box13", EmitDefaultValue = false)]
        public double Box13 { get; set; }

        /// <summary>
        /// Box 14 on 1099 Form
        /// </summary>
        /// <value>Box 14 on 1099 Form</value>
        [DataMember(Name = "Box14", EmitDefaultValue = false)]
        public double Box14 { get; set; }

        /// <summary>
        /// Contact name on 1099 Form
        /// </summary>
        /// <value>Contact name on 1099 Form</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Contact Fed Tax ID type
        /// </summary>
        /// <value>Contact Fed Tax ID type</value>
        [DataMember(Name = "FederalTaxIDType", EmitDefaultValue = false)]
        public string FederalTaxIDType { get; set; }

        /// <summary>
        /// Contact city on 1099 Form
        /// </summary>
        /// <value>Contact city on 1099 Form</value>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Contact zip on 1099 Form
        /// </summary>
        /// <value>Contact zip on 1099 Form</value>
        [DataMember(Name = "Zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Contact State on 1099 Form
        /// </summary>
        /// <value>Contact State on 1099 Form</value>
        [DataMember(Name = "State", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Contact email on 1099 Form
        /// </summary>
        /// <value>Contact email on 1099 Form</value>
        [DataMember(Name = "Email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Contact address on 1099 Form
        /// </summary>
        /// <value>Contact address on 1099 Form</value>
        [DataMember(Name = "StreetAddress", EmitDefaultValue = false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Contact tax id on 1099 Form
        /// </summary>
        /// <value>Contact tax id on 1099 Form</value>
        [DataMember(Name = "TaxID", EmitDefaultValue = false)]
        public string TaxID { get; set; }

        /// <summary>
        /// Contact contact id
        /// </summary>
        /// <value>Contact contact id</value>
        [DataMember(Name = "ContactId", EmitDefaultValue = false)]
        public Guid ContactId { get; set; }

        /// <summary>
        /// Contact legal name
        /// </summary>
        /// <value>Contact legal name</value>
        [DataMember(Name = "LegalName", EmitDefaultValue = false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Contact business name
        /// </summary>
        /// <value>Contact business name</value>
        [DataMember(Name = "BusinessName", EmitDefaultValue = false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TenNinetyNineContact {\n");
            sb.Append("  Box1: ").Append(Box1).Append("\n");
            sb.Append("  Box2: ").Append(Box2).Append("\n");
            sb.Append("  Box3: ").Append(Box3).Append("\n");
            sb.Append("  Box4: ").Append(Box4).Append("\n");
            sb.Append("  Box5: ").Append(Box5).Append("\n");
            sb.Append("  Box6: ").Append(Box6).Append("\n");
            sb.Append("  Box7: ").Append(Box7).Append("\n");
            sb.Append("  Box8: ").Append(Box8).Append("\n");
            sb.Append("  Box9: ").Append(Box9).Append("\n");
            sb.Append("  Box10: ").Append(Box10).Append("\n");
            sb.Append("  Box11: ").Append(Box11).Append("\n");
            sb.Append("  Box13: ").Append(Box13).Append("\n");
            sb.Append("  Box14: ").Append(Box14).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FederalTaxIDType: ").Append(FederalTaxIDType).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  TaxID: ").Append(TaxID).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  FederalTaxClassification: ").Append(FederalTaxClassification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
