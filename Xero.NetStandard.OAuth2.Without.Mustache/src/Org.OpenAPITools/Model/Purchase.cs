/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Purchase
    /// </summary>
    [DataContract(Name = "Purchase")]
    public partial class Purchase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Purchase" /> class.
        /// </summary>
        /// <param name="unitPrice">Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp&#x3D;4 querystring parameter to your request..</param>
        /// <param name="accountCode">Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items.</param>
        /// <param name="cOGSAccountCode">Cost of goods sold account. Only applicable to the purchase details of tracked items..</param>
        /// <param name="taxType">The tax type from TaxRates.</param>
        public Purchase(double unitPrice = default(double), string accountCode = default(string), string cOGSAccountCode = default(string), string taxType = default(string))
        {
            this.UnitPrice = unitPrice;
            this.AccountCode = accountCode;
            this.COGSAccountCode = cOGSAccountCode;
            this.TaxType = taxType;
        }

        /// <summary>
        /// Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp&#x3D;4 querystring parameter to your request.
        /// </summary>
        /// <value>Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp&#x3D;4 querystring parameter to your request.</value>
        [DataMember(Name = "UnitPrice", EmitDefaultValue = false)]
        public double UnitPrice { get; set; }

        /// <summary>
        /// Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items
        /// </summary>
        /// <value>Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items</value>
        [DataMember(Name = "AccountCode", EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// Cost of goods sold account. Only applicable to the purchase details of tracked items.
        /// </summary>
        /// <value>Cost of goods sold account. Only applicable to the purchase details of tracked items.</value>
        [DataMember(Name = "COGSAccountCode", EmitDefaultValue = false)]
        public string COGSAccountCode { get; set; }

        /// <summary>
        /// The tax type from TaxRates
        /// </summary>
        /// <value>The tax type from TaxRates</value>
        [DataMember(Name = "TaxType", EmitDefaultValue = false)]
        public string TaxType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Purchase {\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  COGSAccountCode: ").Append(COGSAccountCode).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
