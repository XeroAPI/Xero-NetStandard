/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LineItem
    /// </summary>
    [DataContract(Name = "LineItem")]
    public partial class LineItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="lineItemID">LineItem unique ID.</param>
        /// <param name="description">Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a &lt;Description&gt; element that contains at least 1 character.</param>
        /// <param name="quantity">LineItem Quantity.</param>
        /// <param name="unitAmount">LineItem Unit Amount.</param>
        /// <param name="itemCode">See Items.</param>
        /// <param name="accountCode">See Accounts.</param>
        /// <param name="accountID">The associated account ID related to this line item.</param>
        /// <param name="taxType">The tax type from TaxRates.</param>
        /// <param name="taxAmount">The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated &lt;TaxAmount&gt; is not correct..</param>
        /// <param name="item">item.</param>
        /// <param name="lineAmount">If you wish to omit either the Quantity or UnitAmount you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if either a DiscountRate or DiscountAmount has been used i.e. LineAmount &#x3D; Quantity * Unit Amount * ((100 - DiscountRate)/100) or LineAmount &#x3D; (Quantity * UnitAmount) - DiscountAmount.</param>
        /// <param name="tracking">Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 &lt;TrackingCategory&gt; elements..</param>
        /// <param name="discountRate">Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts.</param>
        /// <param name="discountAmount">Discount amount being applied to a line item. Only supported on ACCREC invoices and quotes. ACCPAY invoices and credit notes in Xero do not support discounts..</param>
        /// <param name="repeatingInvoiceID">The Xero identifier for a Repeating Invoice.</param>
        public LineItem(Guid lineItemID = default(Guid), string description = default(string), double quantity = default(double), double unitAmount = default(double), string itemCode = default(string), string accountCode = default(string), Guid accountID = default(Guid), string taxType = default(string), double taxAmount = default(double), LineItemItem item = default(LineItemItem), double lineAmount = default(double), List<LineItemTracking> tracking = default(List<LineItemTracking>), double discountRate = default(double), double discountAmount = default(double), Guid repeatingInvoiceID = default(Guid))
        {
            this.LineItemID = lineItemID;
            this.Description = description;
            this.Quantity = quantity;
            this.UnitAmount = unitAmount;
            this.ItemCode = itemCode;
            this.AccountCode = accountCode;
            this.AccountID = accountID;
            this.TaxType = taxType;
            this.TaxAmount = taxAmount;
            this.Item = item;
            this.LineAmount = lineAmount;
            this.Tracking = tracking;
            this.DiscountRate = discountRate;
            this.DiscountAmount = discountAmount;
            this.RepeatingInvoiceID = repeatingInvoiceID;
        }

        /// <summary>
        /// LineItem unique ID
        /// </summary>
        /// <value>LineItem unique ID</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "LineItemID", EmitDefaultValue = false)]
        public Guid LineItemID { get; set; }

        /// <summary>
        /// Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a &lt;Description&gt; element that contains at least 1 character
        /// </summary>
        /// <value>Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a &lt;Description&gt; element that contains at least 1 character</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// LineItem Quantity
        /// </summary>
        /// <value>LineItem Quantity</value>
        [DataMember(Name = "Quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// LineItem Unit Amount
        /// </summary>
        /// <value>LineItem Unit Amount</value>
        [DataMember(Name = "UnitAmount", EmitDefaultValue = false)]
        public double UnitAmount { get; set; }

        /// <summary>
        /// See Items
        /// </summary>
        /// <value>See Items</value>
        [DataMember(Name = "ItemCode", EmitDefaultValue = false)]
        public string ItemCode { get; set; }

        /// <summary>
        /// See Accounts
        /// </summary>
        /// <value>See Accounts</value>
        [DataMember(Name = "AccountCode", EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// The associated account ID related to this line item
        /// </summary>
        /// <value>The associated account ID related to this line item</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "AccountID", EmitDefaultValue = false)]
        public Guid AccountID { get; set; }

        /// <summary>
        /// The tax type from TaxRates
        /// </summary>
        /// <value>The tax type from TaxRates</value>
        [DataMember(Name = "TaxType", EmitDefaultValue = false)]
        public string TaxType { get; set; }

        /// <summary>
        /// The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated &lt;TaxAmount&gt; is not correct.
        /// </summary>
        /// <value>The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated &lt;TaxAmount&gt; is not correct.</value>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public double TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name = "Item", EmitDefaultValue = false)]
        public LineItemItem Item { get; set; }

        /// <summary>
        /// If you wish to omit either the Quantity or UnitAmount you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if either a DiscountRate or DiscountAmount has been used i.e. LineAmount &#x3D; Quantity * Unit Amount * ((100 - DiscountRate)/100) or LineAmount &#x3D; (Quantity * UnitAmount) - DiscountAmount
        /// </summary>
        /// <value>If you wish to omit either the Quantity or UnitAmount you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if either a DiscountRate or DiscountAmount has been used i.e. LineAmount &#x3D; Quantity * Unit Amount * ((100 - DiscountRate)/100) or LineAmount &#x3D; (Quantity * UnitAmount) - DiscountAmount</value>
        [DataMember(Name = "LineAmount", EmitDefaultValue = false)]
        public double LineAmount { get; set; }

        /// <summary>
        /// Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 &lt;TrackingCategory&gt; elements.
        /// </summary>
        /// <value>Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 &lt;TrackingCategory&gt; elements.</value>
        [DataMember(Name = "Tracking", EmitDefaultValue = false)]
        public List<LineItemTracking> Tracking { get; set; }

        /// <summary>
        /// Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts
        /// </summary>
        /// <value>Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts</value>
        [DataMember(Name = "DiscountRate", EmitDefaultValue = false)]
        public double DiscountRate { get; set; }

        /// <summary>
        /// Discount amount being applied to a line item. Only supported on ACCREC invoices and quotes. ACCPAY invoices and credit notes in Xero do not support discounts.
        /// </summary>
        /// <value>Discount amount being applied to a line item. Only supported on ACCREC invoices and quotes. ACCPAY invoices and credit notes in Xero do not support discounts.</value>
        [DataMember(Name = "DiscountAmount", EmitDefaultValue = false)]
        public double DiscountAmount { get; set; }

        /// <summary>
        /// The Xero identifier for a Repeating Invoice
        /// </summary>
        /// <value>The Xero identifier for a Repeating Invoice</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "RepeatingInvoiceID", EmitDefaultValue = false)]
        public Guid RepeatingInvoiceID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  LineItemID: ").Append(LineItemID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  LineAmount: ").Append(LineAmount).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  DiscountRate: ").Append(DiscountRate).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  RepeatingInvoiceID: ").Append(RepeatingInvoiceID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
