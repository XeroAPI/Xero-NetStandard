/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PaymentService
    /// </summary>
    [DataContract(Name = "PaymentService")]
    public partial class PaymentService : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentService" /> class.
        /// </summary>
        /// <param name="paymentServiceID">Xero identifier.</param>
        /// <param name="paymentServiceName">Name of payment service.</param>
        /// <param name="paymentServiceUrl">The custom payment URL.</param>
        /// <param name="payNowText">The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card.</param>
        /// <param name="paymentServiceType">This will always be CUSTOM for payment services created via the API..</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public PaymentService(Guid paymentServiceID = default(Guid), string paymentServiceName = default(string), string paymentServiceUrl = default(string), string payNowText = default(string), string paymentServiceType = default(string), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            this.PaymentServiceID = paymentServiceID;
            this.PaymentServiceName = paymentServiceName;
            this.PaymentServiceUrl = paymentServiceUrl;
            this.PayNowText = payNowText;
            this.PaymentServiceType = paymentServiceType;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// Xero identifier
        /// </summary>
        /// <value>Xero identifier</value>
        [DataMember(Name = "PaymentServiceID", EmitDefaultValue = false)]
        public Guid PaymentServiceID { get; set; }

        /// <summary>
        /// Name of payment service
        /// </summary>
        /// <value>Name of payment service</value>
        [DataMember(Name = "PaymentServiceName", EmitDefaultValue = false)]
        public string PaymentServiceName { get; set; }

        /// <summary>
        /// The custom payment URL
        /// </summary>
        /// <value>The custom payment URL</value>
        [DataMember(Name = "PaymentServiceUrl", EmitDefaultValue = false)]
        public string PaymentServiceUrl { get; set; }

        /// <summary>
        /// The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card
        /// </summary>
        /// <value>The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card</value>
        [DataMember(Name = "PayNowText", EmitDefaultValue = false)]
        public string PayNowText { get; set; }

        /// <summary>
        /// This will always be CUSTOM for payment services created via the API.
        /// </summary>
        /// <value>This will always be CUSTOM for payment services created via the API.</value>
        [DataMember(Name = "PaymentServiceType", EmitDefaultValue = false)]
        public string PaymentServiceType { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentService {\n");
            sb.Append("  PaymentServiceID: ").Append(PaymentServiceID).Append("\n");
            sb.Append("  PaymentServiceName: ").Append(PaymentServiceName).Append("\n");
            sb.Append("  PaymentServiceUrl: ").Append(PaymentServiceUrl).Append("\n");
            sb.Append("  PayNowText: ").Append(PayNowText).Append("\n");
            sb.Append("  PaymentServiceType: ").Append(PaymentServiceType).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
