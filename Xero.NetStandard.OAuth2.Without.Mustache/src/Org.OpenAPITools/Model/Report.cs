/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Report
    /// </summary>
    [DataContract(Name = "Report")]
    public partial class Report : IValidatableObject
    {
        /// <summary>
        /// See Prepayment Types
        /// </summary>
        /// <value>See Prepayment Types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportTypeEnum
        {
            /// <summary>
            /// Enum AgedPayablesByContact for value: AgedPayablesByContact
            /// </summary>
            [EnumMember(Value = "AgedPayablesByContact")]
            AgedPayablesByContact = 1
        }


        /// <summary>
        /// See Prepayment Types
        /// </summary>
        /// <value>See Prepayment Types</value>
        [DataMember(Name = "ReportType", EmitDefaultValue = false)]
        public ReportTypeEnum? ReportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        /// <param name="reportName">See Prepayment Types.</param>
        /// <param name="reportType">See Prepayment Types.</param>
        /// <param name="reportTitle">See Prepayment Types.</param>
        /// <param name="reportDate">Date of report.</param>
        /// <param name="contacts">contacts.</param>
        public Report(string reportName = default(string), ReportTypeEnum? reportType = default(ReportTypeEnum?), string reportTitle = default(string), string reportDate = default(string), List<TenNinetyNineContact> contacts = default(List<TenNinetyNineContact>))
        {
            this.ReportName = reportName;
            this.ReportType = reportType;
            this.ReportTitle = reportTitle;
            this.ReportDate = reportDate;
            this.Contacts = contacts;
        }

        /// <summary>
        /// See Prepayment Types
        /// </summary>
        /// <value>See Prepayment Types</value>
        [DataMember(Name = "ReportName", EmitDefaultValue = false)]
        public string ReportName { get; set; }

        /// <summary>
        /// See Prepayment Types
        /// </summary>
        /// <value>See Prepayment Types</value>
        [DataMember(Name = "ReportTitle", EmitDefaultValue = false)]
        public string ReportTitle { get; set; }

        /// <summary>
        /// Date of report
        /// </summary>
        /// <value>Date of report</value>
        [DataMember(Name = "ReportDate", EmitDefaultValue = false)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Updated Date
        /// </summary>
        /// <value>Updated Date</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "Contacts", EmitDefaultValue = false)]
        public List<TenNinetyNineContact> Contacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Report {\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  ReportTitle: ").Append(ReportTitle).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
