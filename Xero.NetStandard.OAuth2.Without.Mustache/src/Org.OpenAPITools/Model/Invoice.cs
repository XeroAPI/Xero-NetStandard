/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Invoice
    /// </summary>
    [DataContract(Name = "Invoice")]
    public partial class Invoice : IValidatableObject
    {
        /// <summary>
        /// See Invoice Types
        /// </summary>
        /// <value>See Invoice Types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ACCPAY for value: ACCPAY
            /// </summary>
            [EnumMember(Value = "ACCPAY")]
            ACCPAY = 1,

            /// <summary>
            /// Enum ACCPAYCREDIT for value: ACCPAYCREDIT
            /// </summary>
            [EnumMember(Value = "ACCPAYCREDIT")]
            ACCPAYCREDIT = 2,

            /// <summary>
            /// Enum APOVERPAYMENT for value: APOVERPAYMENT
            /// </summary>
            [EnumMember(Value = "APOVERPAYMENT")]
            APOVERPAYMENT = 3,

            /// <summary>
            /// Enum APPREPAYMENT for value: APPREPAYMENT
            /// </summary>
            [EnumMember(Value = "APPREPAYMENT")]
            APPREPAYMENT = 4,

            /// <summary>
            /// Enum ACCREC for value: ACCREC
            /// </summary>
            [EnumMember(Value = "ACCREC")]
            ACCREC = 5,

            /// <summary>
            /// Enum ACCRECCREDIT for value: ACCRECCREDIT
            /// </summary>
            [EnumMember(Value = "ACCRECCREDIT")]
            ACCRECCREDIT = 6,

            /// <summary>
            /// Enum AROVERPAYMENT for value: AROVERPAYMENT
            /// </summary>
            [EnumMember(Value = "AROVERPAYMENT")]
            AROVERPAYMENT = 7,

            /// <summary>
            /// Enum ARPREPAYMENT for value: ARPREPAYMENT
            /// </summary>
            [EnumMember(Value = "ARPREPAYMENT")]
            ARPREPAYMENT = 8
        }


        /// <summary>
        /// See Invoice Types
        /// </summary>
        /// <value>See Invoice Types</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public CurrencyCode? CurrencyCode { get; set; }
        /// <summary>
        /// See Invoice Status Codes
        /// </summary>
        /// <value>See Invoice Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 1,

            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            [EnumMember(Value = "SUBMITTED")]
            SUBMITTED = 2,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 3,

            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 4,

            /// <summary>
            /// Enum PAID for value: PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAID = 5,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 6
        }


        /// <summary>
        /// See Invoice Status Codes
        /// </summary>
        /// <value>See Invoice Status Codes</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="type">See Invoice Types.</param>
        /// <param name="contact">contact.</param>
        /// <param name="lineItems">See LineItems.</param>
        /// <param name="date">Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation.</param>
        /// <param name="dueDate">Date invoice is due – YYYY-MM-DD.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="invoiceNumber">ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length &#x3D; 255).</param>
        /// <param name="reference">ACCREC only – additional reference number.</param>
        /// <param name="brandingThemeID">See BrandingThemes.</param>
        /// <param name="url">URL link to a source document – shown as “Go to [appName]” in the Xero app.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="currencyRate">The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length &#x3D; [18].[6]).</param>
        /// <param name="status">See Invoice Status Codes.</param>
        /// <param name="sentToContact">Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved.</param>
        /// <param name="expectedPaymentDate">Shown on sales invoices (Accounts Receivable) when this has been set.</param>
        /// <param name="plannedPaymentDate">Shown on bills (Accounts Payable) when this has been set.</param>
        /// <param name="invoiceID">Xero generated unique identifier for invoice.</param>
        /// <param name="repeatingInvoiceID">Xero generated unique identifier for repeating invoices.</param>
        /// <param name="attachments">Displays array of attachments from the API.</param>
        /// <param name="hasErrors">A boolean to indicate if a invoice has an validation errors (default to false).</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        /// <param name="warnings">Displays array of warning messages from the API.</param>
        public Invoice(TypeEnum? type = default(TypeEnum?), Contact contact = default(Contact), List<LineItem> lineItems = default(List<LineItem>), string date = default(string), string dueDate = default(string), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), string invoiceNumber = default(string), string reference = default(string), Guid brandingThemeID = default(Guid), string url = default(string), CurrencyCode? currencyCode = default(CurrencyCode?), double currencyRate = default(double), StatusEnum? status = default(StatusEnum?), bool sentToContact = default(bool), string expectedPaymentDate = default(string), string plannedPaymentDate = default(string), Guid invoiceID = default(Guid), Guid repeatingInvoiceID = default(Guid), List<Attachment> attachments = default(List<Attachment>), bool hasErrors = false, string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>), List<ValidationError> warnings = default(List<ValidationError>))
        {
            this.Type = type;
            this.Contact = contact;
            this.LineItems = lineItems;
            this.Date = date;
            this.DueDate = dueDate;
            this.LineAmountTypes = lineAmountTypes;
            this.InvoiceNumber = invoiceNumber;
            this.Reference = reference;
            this.BrandingThemeID = brandingThemeID;
            this.Url = url;
            this.CurrencyCode = currencyCode;
            this.CurrencyRate = currencyRate;
            this.Status = status;
            this.SentToContact = sentToContact;
            this.ExpectedPaymentDate = expectedPaymentDate;
            this.PlannedPaymentDate = plannedPaymentDate;
            this.InvoiceID = invoiceID;
            this.RepeatingInvoiceID = repeatingInvoiceID;
            this.Attachments = attachments;
            this.HasErrors = hasErrors;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// See LineItems
        /// </summary>
        /// <value>See LineItems</value>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
        /// </summary>
        /// <value>Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Date invoice is due – YYYY-MM-DD
        /// </summary>
        /// <value>Date invoice is due – YYYY-MM-DD</value>
        [DataMember(Name = "DueDate", EmitDefaultValue = false)]
        public string DueDate { get; set; }

        /// <summary>
        /// ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length &#x3D; 255)
        /// </summary>
        /// <value>ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length &#x3D; 255)</value>
        [DataMember(Name = "InvoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// ACCREC only – additional reference number
        /// </summary>
        /// <value>ACCREC only – additional reference number</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// See BrandingThemes
        /// </summary>
        /// <value>See BrandingThemes</value>
        [DataMember(Name = "BrandingThemeID", EmitDefaultValue = false)]
        public Guid BrandingThemeID { get; set; }

        /// <summary>
        /// URL link to a source document – shown as “Go to [appName]” in the Xero app
        /// </summary>
        /// <value>URL link to a source document – shown as “Go to [appName]” in the Xero app</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length &#x3D; [18].[6])
        /// </summary>
        /// <value>The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length &#x3D; [18].[6])</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved
        /// </summary>
        /// <value>Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved</value>
        [DataMember(Name = "SentToContact", EmitDefaultValue = true)]
        public bool SentToContact { get; set; }

        /// <summary>
        /// Shown on sales invoices (Accounts Receivable) when this has been set
        /// </summary>
        /// <value>Shown on sales invoices (Accounts Receivable) when this has been set</value>
        [DataMember(Name = "ExpectedPaymentDate", EmitDefaultValue = false)]
        public string ExpectedPaymentDate { get; set; }

        /// <summary>
        /// Shown on bills (Accounts Payable) when this has been set
        /// </summary>
        /// <value>Shown on bills (Accounts Payable) when this has been set</value>
        [DataMember(Name = "PlannedPaymentDate", EmitDefaultValue = false)]
        public string PlannedPaymentDate { get; set; }

        /// <summary>
        /// CIS deduction for UK contractors
        /// </summary>
        /// <value>CIS deduction for UK contractors</value>
        [DataMember(Name = "CISDeduction", EmitDefaultValue = false)]
        public double CISDeduction { get; private set; }

        /// <summary>
        /// Returns false as CISDeduction should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCISDeduction()
        {
            return false;
        }
        /// <summary>
        /// CIS Deduction rate for the organisation
        /// </summary>
        /// <value>CIS Deduction rate for the organisation</value>
        [DataMember(Name = "CISRate", EmitDefaultValue = false)]
        public double CISRate { get; private set; }

        /// <summary>
        /// Returns false as CISRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCISRate()
        {
            return false;
        }
        /// <summary>
        /// Total of invoice excluding taxes
        /// </summary>
        /// <value>Total of invoice excluding taxes</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; private set; }

        /// <summary>
        /// Returns false as SubTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubTotal()
        {
            return false;
        }
        /// <summary>
        /// Total tax on invoice
        /// </summary>
        /// <value>Total tax on invoice</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; private set; }

        /// <summary>
        /// Returns false as TotalTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalTax()
        {
            return false;
        }
        /// <summary>
        /// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
        /// </summary>
        /// <value>Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; private set; }

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return false;
        }
        /// <summary>
        /// Total of discounts applied on the invoice line items
        /// </summary>
        /// <value>Total of discounts applied on the invoice line items</value>
        [DataMember(Name = "TotalDiscount", EmitDefaultValue = false)]
        public double TotalDiscount { get; private set; }

        /// <summary>
        /// Returns false as TotalDiscount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalDiscount()
        {
            return false;
        }
        /// <summary>
        /// Xero generated unique identifier for invoice
        /// </summary>
        /// <value>Xero generated unique identifier for invoice</value>
        [DataMember(Name = "InvoiceID", EmitDefaultValue = false)]
        public Guid InvoiceID { get; set; }

        /// <summary>
        /// Xero generated unique identifier for repeating invoices
        /// </summary>
        /// <value>Xero generated unique identifier for repeating invoices</value>
        [DataMember(Name = "RepeatingInvoiceID", EmitDefaultValue = false)]
        public Guid RepeatingInvoiceID { get; set; }

        /// <summary>
        /// boolean to indicate if an invoice has an attachment
        /// </summary>
        /// <value>boolean to indicate if an invoice has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// boolean to indicate if an invoice has a discount
        /// </summary>
        /// <value>boolean to indicate if an invoice has a discount</value>
        [DataMember(Name = "IsDiscounted", EmitDefaultValue = true)]
        public bool IsDiscounted { get; private set; }

        /// <summary>
        /// Returns false as IsDiscounted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDiscounted()
        {
            return false;
        }
        /// <summary>
        /// See Payments
        /// </summary>
        /// <value>See Payments</value>
        [DataMember(Name = "Payments", EmitDefaultValue = false)]
        public List<Payment> Payments { get; private set; }

        /// <summary>
        /// Returns false as Payments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePayments()
        {
            return false;
        }
        /// <summary>
        /// See Prepayments
        /// </summary>
        /// <value>See Prepayments</value>
        [DataMember(Name = "Prepayments", EmitDefaultValue = false)]
        public List<Prepayment> Prepayments { get; private set; }

        /// <summary>
        /// Returns false as Prepayments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrepayments()
        {
            return false;
        }
        /// <summary>
        /// See Overpayments
        /// </summary>
        /// <value>See Overpayments</value>
        [DataMember(Name = "Overpayments", EmitDefaultValue = false)]
        public List<Overpayment> Overpayments { get; private set; }

        /// <summary>
        /// Returns false as Overpayments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOverpayments()
        {
            return false;
        }
        /// <summary>
        /// Amount remaining to be paid on invoice
        /// </summary>
        /// <value>Amount remaining to be paid on invoice</value>
        [DataMember(Name = "AmountDue", EmitDefaultValue = false)]
        public double AmountDue { get; private set; }

        /// <summary>
        /// Returns false as AmountDue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDue()
        {
            return false;
        }
        /// <summary>
        /// Sum of payments received for invoice
        /// </summary>
        /// <value>Sum of payments received for invoice</value>
        [DataMember(Name = "AmountPaid", EmitDefaultValue = false)]
        public double AmountPaid { get; private set; }

        /// <summary>
        /// Returns false as AmountPaid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountPaid()
        {
            return false;
        }
        /// <summary>
        /// The date the invoice was fully paid. Only returned on fully paid invoices
        /// </summary>
        /// <value>The date the invoice was fully paid. Only returned on fully paid invoices</value>
        [DataMember(Name = "FullyPaidOnDate", EmitDefaultValue = false)]
        public string FullyPaidOnDate { get; private set; }

        /// <summary>
        /// Returns false as FullyPaidOnDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullyPaidOnDate()
        {
            return false;
        }
        /// <summary>
        /// Sum of all credit notes, over-payments and pre-payments applied to invoice
        /// </summary>
        /// <value>Sum of all credit notes, over-payments and pre-payments applied to invoice</value>
        [DataMember(Name = "AmountCredited", EmitDefaultValue = false)]
        public double AmountCredited { get; private set; }

        /// <summary>
        /// Returns false as AmountCredited should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCredited()
        {
            return false;
        }
        /// <summary>
        /// Last modified date UTC format
        /// </summary>
        /// <value>Last modified date UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Details of credit notes that have been applied to an invoice
        /// </summary>
        /// <value>Details of credit notes that have been applied to an invoice</value>
        [DataMember(Name = "CreditNotes", EmitDefaultValue = false)]
        public List<CreditNote> CreditNotes { get; private set; }

        /// <summary>
        /// Returns false as CreditNotes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreditNotes()
        {
            return false;
        }
        /// <summary>
        /// Displays array of attachments from the API
        /// </summary>
        /// <value>Displays array of attachments from the API</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// A boolean to indicate if a invoice has an validation errors
        /// </summary>
        /// <value>A boolean to indicate if a invoice has an validation errors</value>
        /// <example>false</example>
        [DataMember(Name = "HasErrors", EmitDefaultValue = true)]
        public bool HasErrors { get; set; }

        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Displays array of warning messages from the API
        /// </summary>
        /// <value>Displays array of warning messages from the API</value>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public List<ValidationError> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  BrandingThemeID: ").Append(BrandingThemeID).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SentToContact: ").Append(SentToContact).Append("\n");
            sb.Append("  ExpectedPaymentDate: ").Append(ExpectedPaymentDate).Append("\n");
            sb.Append("  PlannedPaymentDate: ").Append(PlannedPaymentDate).Append("\n");
            sb.Append("  CISDeduction: ").Append(CISDeduction).Append("\n");
            sb.Append("  CISRate: ").Append(CISRate).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  InvoiceID: ").Append(InvoiceID).Append("\n");
            sb.Append("  RepeatingInvoiceID: ").Append(RepeatingInvoiceID).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  IsDiscounted: ").Append(IsDiscounted).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Prepayments: ").Append(Prepayments).Append("\n");
            sb.Append("  Overpayments: ").Append(Overpayments).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  FullyPaidOnDate: ").Append(FullyPaidOnDate).Append("\n");
            sb.Append("  AmountCredited: ").Append(AmountCredited).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  CreditNotes: ").Append(CreditNotes).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InvoiceNumber (string) maxLength
            if (this.InvoiceNumber != null && this.InvoiceNumber.Length > 255)
            {
                yield return new ValidationResult("Invalid value for InvoiceNumber, length must be less than 255.", new [] { "InvoiceNumber" });
            }

            yield break;
        }
    }

}
