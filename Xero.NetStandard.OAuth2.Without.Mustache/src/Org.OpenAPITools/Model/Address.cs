/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IValidatableObject
    {
        /// <summary>
        /// define the type of address
        /// </summary>
        /// <value>define the type of address</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressTypeEnum
        {
            /// <summary>
            /// Enum POBOX for value: POBOX
            /// </summary>
            [EnumMember(Value = "POBOX")]
            POBOX = 1,

            /// <summary>
            /// Enum STREET for value: STREET
            /// </summary>
            [EnumMember(Value = "STREET")]
            STREET = 2
        }


        /// <summary>
        /// define the type of address
        /// </summary>
        /// <value>define the type of address</value>
        [DataMember(Name = "AddressType", EmitDefaultValue = false)]
        public AddressTypeEnum? AddressType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="addressType">define the type of address.</param>
        /// <param name="addressLine1">max length &#x3D; 500.</param>
        /// <param name="addressLine2">max length &#x3D; 500.</param>
        /// <param name="addressLine3">max length &#x3D; 500.</param>
        /// <param name="addressLine4">max length &#x3D; 500.</param>
        /// <param name="city">max length &#x3D; 255.</param>
        /// <param name="region">max length &#x3D; 255.</param>
        /// <param name="postalCode">max length &#x3D; 50.</param>
        /// <param name="country">max length &#x3D; 50, [A-Z], [a-z] only.</param>
        /// <param name="attentionTo">max length &#x3D; 255.</param>
        public Address(AddressTypeEnum? addressType = default(AddressTypeEnum?), string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string addressLine4 = default(string), string city = default(string), string region = default(string), string postalCode = default(string), string country = default(string), string attentionTo = default(string))
        {
            this.AddressType = addressType;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.AddressLine4 = addressLine4;
            this.City = city;
            this.Region = region;
            this.PostalCode = postalCode;
            this.Country = country;
            this.AttentionTo = attentionTo;
        }

        /// <summary>
        /// max length &#x3D; 500
        /// </summary>
        /// <value>max length &#x3D; 500</value>
        [DataMember(Name = "AddressLine1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// max length &#x3D; 500
        /// </summary>
        /// <value>max length &#x3D; 500</value>
        [DataMember(Name = "AddressLine2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// max length &#x3D; 500
        /// </summary>
        /// <value>max length &#x3D; 500</value>
        [DataMember(Name = "AddressLine3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// max length &#x3D; 500
        /// </summary>
        /// <value>max length &#x3D; 500</value>
        [DataMember(Name = "AddressLine4", EmitDefaultValue = false)]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// max length &#x3D; 255
        /// </summary>
        /// <value>max length &#x3D; 255</value>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// max length &#x3D; 255
        /// </summary>
        /// <value>max length &#x3D; 255</value>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// max length &#x3D; 50
        /// </summary>
        /// <value>max length &#x3D; 50</value>
        [DataMember(Name = "PostalCode", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// max length &#x3D; 50, [A-Z], [a-z] only
        /// </summary>
        /// <value>max length &#x3D; 50, [A-Z], [a-z] only</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// max length &#x3D; 255
        /// </summary>
        /// <value>max length &#x3D; 255</value>
        [DataMember(Name = "AttentionTo", EmitDefaultValue = false)]
        public string AttentionTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AttentionTo: ").Append(AttentionTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 500.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 500.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if (this.AddressLine3 != null && this.AddressLine3.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AddressLine3, length must be less than 500.", new [] { "AddressLine3" });
            }

            // AddressLine4 (string) maxLength
            if (this.AddressLine4 != null && this.AddressLine4.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AddressLine4, length must be less than 500.", new [] { "AddressLine4" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 255)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 255.", new [] { "City" });
            }

            // Region (string) maxLength
            if (this.Region != null && this.Region.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Region, length must be less than 255.", new [] { "Region" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 50)
            {
                yield return new ValidationResult("Invalid value for PostalCode, length must be less than 50.", new [] { "PostalCode" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Country, length must be less than 50.", new [] { "Country" });
            }

            // AttentionTo (string) maxLength
            if (this.AttentionTo != null && this.AttentionTo.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AttentionTo, length must be less than 255.", new [] { "AttentionTo" });
            }

            yield break;
        }
    }

}
