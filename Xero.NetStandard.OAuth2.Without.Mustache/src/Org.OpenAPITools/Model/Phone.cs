/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Phone
    /// </summary>
    [DataContract(Name = "Phone")]
    public partial class Phone : IValidatableObject
    {
        /// <summary>
        /// Defines PhoneType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhoneTypeEnum
        {
            /// <summary>
            /// Enum DEFAULT for value: DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT = 1,

            /// <summary>
            /// Enum DDI for value: DDI
            /// </summary>
            [EnumMember(Value = "DDI")]
            DDI = 2,

            /// <summary>
            /// Enum MOBILE for value: MOBILE
            /// </summary>
            [EnumMember(Value = "MOBILE")]
            MOBILE = 3,

            /// <summary>
            /// Enum FAX for value: FAX
            /// </summary>
            [EnumMember(Value = "FAX")]
            FAX = 4,

            /// <summary>
            /// Enum OFFICE for value: OFFICE
            /// </summary>
            [EnumMember(Value = "OFFICE")]
            OFFICE = 5
        }


        /// <summary>
        /// Gets or Sets PhoneType
        /// </summary>
        [DataMember(Name = "PhoneType", EmitDefaultValue = false)]
        public PhoneTypeEnum? PhoneType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Phone" /> class.
        /// </summary>
        /// <param name="phoneType">phoneType.</param>
        /// <param name="phoneNumber">max length &#x3D; 50.</param>
        /// <param name="phoneAreaCode">max length &#x3D; 10.</param>
        /// <param name="phoneCountryCode">max length &#x3D; 20.</param>
        public Phone(PhoneTypeEnum? phoneType = default(PhoneTypeEnum?), string phoneNumber = default(string), string phoneAreaCode = default(string), string phoneCountryCode = default(string))
        {
            this.PhoneType = phoneType;
            this.PhoneNumber = phoneNumber;
            this.PhoneAreaCode = phoneAreaCode;
            this.PhoneCountryCode = phoneCountryCode;
        }

        /// <summary>
        /// max length &#x3D; 50
        /// </summary>
        /// <value>max length &#x3D; 50</value>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// max length &#x3D; 10
        /// </summary>
        /// <value>max length &#x3D; 10</value>
        [DataMember(Name = "PhoneAreaCode", EmitDefaultValue = false)]
        public string PhoneAreaCode { get; set; }

        /// <summary>
        /// max length &#x3D; 20
        /// </summary>
        /// <value>max length &#x3D; 20</value>
        [DataMember(Name = "PhoneCountryCode", EmitDefaultValue = false)]
        public string PhoneCountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Phone {\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneAreaCode: ").Append(PhoneAreaCode).Append("\n");
            sb.Append("  PhoneCountryCode: ").Append(PhoneCountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 50.", new [] { "PhoneNumber" });
            }

            // PhoneAreaCode (string) maxLength
            if (this.PhoneAreaCode != null && this.PhoneAreaCode.Length > 10)
            {
                yield return new ValidationResult("Invalid value for PhoneAreaCode, length must be less than 10.", new [] { "PhoneAreaCode" });
            }

            // PhoneCountryCode (string) maxLength
            if (this.PhoneCountryCode != null && this.PhoneCountryCode.Length > 20)
            {
                yield return new ValidationResult("Invalid value for PhoneCountryCode, length must be less than 20.", new [] { "PhoneCountryCode" });
            }

            yield break;
        }
    }

}
