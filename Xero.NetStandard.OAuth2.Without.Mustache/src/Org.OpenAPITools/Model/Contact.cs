/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contact
    /// </summary>
    [DataContract(Name = "Contact")]
    public partial class Contact : IValidatableObject
    {
        /// <summary>
        /// Current status of a contact – see contact status types
        /// </summary>
        /// <value>Current status of a contact – see contact status types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContactStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum ARCHIVED for value: ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVED = 2,

            /// <summary>
            /// Enum GDPRREQUEST for value: GDPRREQUEST
            /// </summary>
            [EnumMember(Value = "GDPRREQUEST")]
            GDPRREQUEST = 3
        }


        /// <summary>
        /// Current status of a contact – see contact status types
        /// </summary>
        /// <value>Current status of a contact – see contact status types</value>
        [DataMember(Name = "ContactStatus", EmitDefaultValue = false)]
        public ContactStatusEnum? ContactStatus { get; set; }
        /// <summary>
        /// The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
        /// </summary>
        /// <value>The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalesDefaultLineAmountTypeEnum
        {
            /// <summary>
            /// Enum INCLUSIVE for value: INCLUSIVE
            /// </summary>
            [EnumMember(Value = "INCLUSIVE")]
            INCLUSIVE = 1,

            /// <summary>
            /// Enum EXCLUSIVE for value: EXCLUSIVE
            /// </summary>
            [EnumMember(Value = "EXCLUSIVE")]
            EXCLUSIVE = 2,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 3
        }


        /// <summary>
        /// The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
        /// </summary>
        /// <value>The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        [DataMember(Name = "SalesDefaultLineAmountType", EmitDefaultValue = false)]
        public SalesDefaultLineAmountTypeEnum? SalesDefaultLineAmountType { get; set; }
        /// <summary>
        /// The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
        /// </summary>
        /// <value>The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurchasesDefaultLineAmountTypeEnum
        {
            /// <summary>
            /// Enum INCLUSIVE for value: INCLUSIVE
            /// </summary>
            [EnumMember(Value = "INCLUSIVE")]
            INCLUSIVE = 1,

            /// <summary>
            /// Enum EXCLUSIVE for value: EXCLUSIVE
            /// </summary>
            [EnumMember(Value = "EXCLUSIVE")]
            EXCLUSIVE = 2,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 3
        }


        /// <summary>
        /// The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
        /// </summary>
        /// <value>The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.</value>
        [DataMember(Name = "PurchasesDefaultLineAmountType", EmitDefaultValue = false)]
        public PurchasesDefaultLineAmountTypeEnum? PurchasesDefaultLineAmountType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCurrency
        /// </summary>
        [DataMember(Name = "DefaultCurrency", EmitDefaultValue = false)]
        public CurrencyCode? DefaultCurrency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="contactID">Xero identifier.</param>
        /// <param name="mergedToContactID">ID for the destination of a merged contact. Only returned when using paging or when fetching a contact by ContactId or ContactNumber..</param>
        /// <param name="contactNumber">This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero..</param>
        /// <param name="accountNumber">A user defined account number. This can be updated via the API and the Xero UI (max length &#x3D; 50).</param>
        /// <param name="contactStatus">Current status of a contact – see contact status types.</param>
        /// <param name="name">Full name of contact/organisation (max length &#x3D; 255).</param>
        /// <param name="firstName">First name of contact person (max length &#x3D; 255).</param>
        /// <param name="lastName">Last name of contact person (max length &#x3D; 255).</param>
        /// <param name="companyNumber">Company registration number (max length &#x3D; 50).</param>
        /// <param name="emailAddress">Email address of contact person (umlauts not supported) (max length  &#x3D; 255).</param>
        /// <param name="contactPersons">See contact persons.</param>
        /// <param name="bankAccountDetails">Bank account number of contact.</param>
        /// <param name="taxNumber">Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length &#x3D; 50).</param>
        /// <param name="accountsReceivableTaxType">The tax type from TaxRates.</param>
        /// <param name="accountsPayableTaxType">The tax type from TaxRates.</param>
        /// <param name="addresses">Store certain address types for a contact – see address types.</param>
        /// <param name="phones">Store certain phone types for a contact – see phone types.</param>
        /// <param name="isSupplier">true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact..</param>
        /// <param name="isCustomer">true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact..</param>
        /// <param name="salesDefaultLineAmountType">The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber..</param>
        /// <param name="purchasesDefaultLineAmountType">The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber..</param>
        /// <param name="defaultCurrency">defaultCurrency.</param>
        /// <param name="xeroNetworkKey">Store XeroNetworkKey for contacts..</param>
        /// <param name="salesDefaultAccountCode">The default sales account code for contacts.</param>
        /// <param name="purchasesDefaultAccountCode">The default purchases account code for contacts.</param>
        /// <param name="salesTrackingCategories">The default sales tracking categories for contacts.</param>
        /// <param name="purchasesTrackingCategories">The default purchases tracking categories for contacts.</param>
        /// <param name="trackingCategoryName">The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories.</param>
        /// <param name="trackingCategoryOption">The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        /// <param name="contactGroups">Displays which contact groups a contact is included in.</param>
        /// <param name="brandingTheme">brandingTheme.</param>
        /// <param name="batchPayments">batchPayments.</param>
        /// <param name="balances">balances.</param>
        /// <param name="attachments">Displays array of attachments from the API.</param>
        /// <param name="hasAttachments">A boolean to indicate if a contact has an attachment (default to false).</param>
        /// <param name="validationErrors">Displays validation errors returned from the API.</param>
        /// <param name="hasValidationErrors">A boolean to indicate if a contact has an validation errors (default to false).</param>
        /// <param name="statusAttributeString">Status of object.</param>
        public Contact(Guid contactID = default(Guid), Guid mergedToContactID = default(Guid), string contactNumber = default(string), string accountNumber = default(string), ContactStatusEnum? contactStatus = default(ContactStatusEnum?), string name = default(string), string firstName = default(string), string lastName = default(string), string companyNumber = default(string), string emailAddress = default(string), List<ContactPerson> contactPersons = default(List<ContactPerson>), string bankAccountDetails = default(string), string taxNumber = default(string), string accountsReceivableTaxType = default(string), string accountsPayableTaxType = default(string), List<Address> addresses = default(List<Address>), List<Phone> phones = default(List<Phone>), bool isSupplier = default(bool), bool isCustomer = default(bool), SalesDefaultLineAmountTypeEnum? salesDefaultLineAmountType = default(SalesDefaultLineAmountTypeEnum?), PurchasesDefaultLineAmountTypeEnum? purchasesDefaultLineAmountType = default(PurchasesDefaultLineAmountTypeEnum?), CurrencyCode? defaultCurrency = default(CurrencyCode?), string xeroNetworkKey = default(string), string salesDefaultAccountCode = default(string), string purchasesDefaultAccountCode = default(string), List<SalesTrackingCategory> salesTrackingCategories = default(List<SalesTrackingCategory>), List<SalesTrackingCategory> purchasesTrackingCategories = default(List<SalesTrackingCategory>), string trackingCategoryName = default(string), string trackingCategoryOption = default(string), PaymentTerm paymentTerms = default(PaymentTerm), List<ContactGroup> contactGroups = default(List<ContactGroup>), BrandingTheme brandingTheme = default(BrandingTheme), BatchPaymentDetails batchPayments = default(BatchPaymentDetails), Balances balances = default(Balances), List<Attachment> attachments = default(List<Attachment>), bool hasAttachments = false, List<ValidationError> validationErrors = default(List<ValidationError>), bool hasValidationErrors = false, string statusAttributeString = default(string))
        {
            this.ContactID = contactID;
            this.MergedToContactID = mergedToContactID;
            this.ContactNumber = contactNumber;
            this.AccountNumber = accountNumber;
            this.ContactStatus = contactStatus;
            this.Name = name;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.CompanyNumber = companyNumber;
            this.EmailAddress = emailAddress;
            this.ContactPersons = contactPersons;
            this.BankAccountDetails = bankAccountDetails;
            this.TaxNumber = taxNumber;
            this.AccountsReceivableTaxType = accountsReceivableTaxType;
            this.AccountsPayableTaxType = accountsPayableTaxType;
            this.Addresses = addresses;
            this.Phones = phones;
            this.IsSupplier = isSupplier;
            this.IsCustomer = isCustomer;
            this.SalesDefaultLineAmountType = salesDefaultLineAmountType;
            this.PurchasesDefaultLineAmountType = purchasesDefaultLineAmountType;
            this.DefaultCurrency = defaultCurrency;
            this.XeroNetworkKey = xeroNetworkKey;
            this.SalesDefaultAccountCode = salesDefaultAccountCode;
            this.PurchasesDefaultAccountCode = purchasesDefaultAccountCode;
            this.SalesTrackingCategories = salesTrackingCategories;
            this.PurchasesTrackingCategories = purchasesTrackingCategories;
            this.TrackingCategoryName = trackingCategoryName;
            this.TrackingCategoryOption = trackingCategoryOption;
            this.PaymentTerms = paymentTerms;
            this.ContactGroups = contactGroups;
            this.BrandingTheme = brandingTheme;
            this.BatchPayments = batchPayments;
            this.Balances = balances;
            this.Attachments = attachments;
            this.HasAttachments = hasAttachments;
            this.ValidationErrors = validationErrors;
            this.HasValidationErrors = hasValidationErrors;
            this.StatusAttributeString = statusAttributeString;
        }

        /// <summary>
        /// Xero identifier
        /// </summary>
        /// <value>Xero identifier</value>
        [DataMember(Name = "ContactID", EmitDefaultValue = false)]
        public Guid ContactID { get; set; }

        /// <summary>
        /// ID for the destination of a merged contact. Only returned when using paging or when fetching a contact by ContactId or ContactNumber.
        /// </summary>
        /// <value>ID for the destination of a merged contact. Only returned when using paging or when fetching a contact by ContactId or ContactNumber.</value>
        [DataMember(Name = "MergedToContactID", EmitDefaultValue = false)]
        public Guid MergedToContactID { get; set; }

        /// <summary>
        /// This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.
        /// </summary>
        /// <value>This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length &#x3D; 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero.</value>
        [DataMember(Name = "ContactNumber", EmitDefaultValue = false)]
        public string ContactNumber { get; set; }

        /// <summary>
        /// A user defined account number. This can be updated via the API and the Xero UI (max length &#x3D; 50)
        /// </summary>
        /// <value>A user defined account number. This can be updated via the API and the Xero UI (max length &#x3D; 50)</value>
        [DataMember(Name = "AccountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Full name of contact/organisation (max length &#x3D; 255)
        /// </summary>
        /// <value>Full name of contact/organisation (max length &#x3D; 255)</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// First name of contact person (max length &#x3D; 255)
        /// </summary>
        /// <value>First name of contact person (max length &#x3D; 255)</value>
        [DataMember(Name = "FirstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of contact person (max length &#x3D; 255)
        /// </summary>
        /// <value>Last name of contact person (max length &#x3D; 255)</value>
        [DataMember(Name = "LastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Company registration number (max length &#x3D; 50)
        /// </summary>
        /// <value>Company registration number (max length &#x3D; 50)</value>
        [DataMember(Name = "CompanyNumber", EmitDefaultValue = false)]
        public string CompanyNumber { get; set; }

        /// <summary>
        /// Email address of contact person (umlauts not supported) (max length  &#x3D; 255)
        /// </summary>
        /// <value>Email address of contact person (umlauts not supported) (max length  &#x3D; 255)</value>
        [DataMember(Name = "EmailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// See contact persons
        /// </summary>
        /// <value>See contact persons</value>
        [DataMember(Name = "ContactPersons", EmitDefaultValue = false)]
        public List<ContactPerson> ContactPersons { get; set; }

        /// <summary>
        /// Bank account number of contact
        /// </summary>
        /// <value>Bank account number of contact</value>
        [DataMember(Name = "BankAccountDetails", EmitDefaultValue = false)]
        public string BankAccountDetails { get; set; }

        /// <summary>
        /// Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length &#x3D; 50)
        /// </summary>
        /// <value>Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length &#x3D; 50)</value>
        [DataMember(Name = "TaxNumber", EmitDefaultValue = false)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// The tax type from TaxRates
        /// </summary>
        /// <value>The tax type from TaxRates</value>
        [DataMember(Name = "AccountsReceivableTaxType", EmitDefaultValue = false)]
        public string AccountsReceivableTaxType { get; set; }

        /// <summary>
        /// The tax type from TaxRates
        /// </summary>
        /// <value>The tax type from TaxRates</value>
        [DataMember(Name = "AccountsPayableTaxType", EmitDefaultValue = false)]
        public string AccountsPayableTaxType { get; set; }

        /// <summary>
        /// Store certain address types for a contact – see address types
        /// </summary>
        /// <value>Store certain address types for a contact – see address types</value>
        [DataMember(Name = "Addresses", EmitDefaultValue = false)]
        public List<Address> Addresses { get; set; }

        /// <summary>
        /// Store certain phone types for a contact – see phone types
        /// </summary>
        /// <value>Store certain phone types for a contact – see phone types</value>
        [DataMember(Name = "Phones", EmitDefaultValue = false)]
        public List<Phone> Phones { get; set; }

        /// <summary>
        /// true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.
        /// </summary>
        /// <value>true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact.</value>
        [DataMember(Name = "IsSupplier", EmitDefaultValue = true)]
        public bool IsSupplier { get; set; }

        /// <summary>
        /// true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.
        /// </summary>
        /// <value>true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact.</value>
        [DataMember(Name = "IsCustomer", EmitDefaultValue = true)]
        public bool IsCustomer { get; set; }

        /// <summary>
        /// Store XeroNetworkKey for contacts.
        /// </summary>
        /// <value>Store XeroNetworkKey for contacts.</value>
        [DataMember(Name = "XeroNetworkKey", EmitDefaultValue = false)]
        public string XeroNetworkKey { get; set; }

        /// <summary>
        /// The default sales account code for contacts
        /// </summary>
        /// <value>The default sales account code for contacts</value>
        [DataMember(Name = "SalesDefaultAccountCode", EmitDefaultValue = false)]
        public string SalesDefaultAccountCode { get; set; }

        /// <summary>
        /// The default purchases account code for contacts
        /// </summary>
        /// <value>The default purchases account code for contacts</value>
        [DataMember(Name = "PurchasesDefaultAccountCode", EmitDefaultValue = false)]
        public string PurchasesDefaultAccountCode { get; set; }

        /// <summary>
        /// The default sales tracking categories for contacts
        /// </summary>
        /// <value>The default sales tracking categories for contacts</value>
        [DataMember(Name = "SalesTrackingCategories", EmitDefaultValue = false)]
        public List<SalesTrackingCategory> SalesTrackingCategories { get; set; }

        /// <summary>
        /// The default purchases tracking categories for contacts
        /// </summary>
        /// <value>The default purchases tracking categories for contacts</value>
        [DataMember(Name = "PurchasesTrackingCategories", EmitDefaultValue = false)]
        public List<SalesTrackingCategory> PurchasesTrackingCategories { get; set; }

        /// <summary>
        /// The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
        /// </summary>
        /// <value>The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories</value>
        [DataMember(Name = "TrackingCategoryName", EmitDefaultValue = false)]
        public string TrackingCategoryName { get; set; }

        /// <summary>
        /// The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories
        /// </summary>
        /// <value>The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories</value>
        [DataMember(Name = "TrackingCategoryOption", EmitDefaultValue = false)]
        public string TrackingCategoryOption { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name = "PaymentTerms", EmitDefaultValue = false)]
        public PaymentTerm PaymentTerms { get; set; }

        /// <summary>
        /// UTC timestamp of last update to contact
        /// </summary>
        /// <value>UTC timestamp of last update to contact</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Displays which contact groups a contact is included in
        /// </summary>
        /// <value>Displays which contact groups a contact is included in</value>
        [DataMember(Name = "ContactGroups", EmitDefaultValue = false)]
        public List<ContactGroup> ContactGroups { get; set; }

        /// <summary>
        /// Website address for contact (read only)
        /// </summary>
        /// <value>Website address for contact (read only)</value>
        [DataMember(Name = "Website", EmitDefaultValue = false)]
        public string Website { get; private set; }

        /// <summary>
        /// Returns false as Website should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebsite()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets BrandingTheme
        /// </summary>
        [DataMember(Name = "BrandingTheme", EmitDefaultValue = false)]
        public BrandingTheme BrandingTheme { get; set; }

        /// <summary>
        /// Gets or Sets BatchPayments
        /// </summary>
        [DataMember(Name = "BatchPayments", EmitDefaultValue = false)]
        public BatchPaymentDetails BatchPayments { get; set; }

        /// <summary>
        /// The default discount rate for the contact (read only)
        /// </summary>
        /// <value>The default discount rate for the contact (read only)</value>
        [DataMember(Name = "Discount", EmitDefaultValue = false)]
        public double Discount { get; private set; }

        /// <summary>
        /// Returns false as Discount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Balances
        /// </summary>
        [DataMember(Name = "Balances", EmitDefaultValue = false)]
        public Balances Balances { get; set; }

        /// <summary>
        /// Displays array of attachments from the API
        /// </summary>
        /// <value>Displays array of attachments from the API</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// A boolean to indicate if a contact has an attachment
        /// </summary>
        /// <value>A boolean to indicate if a contact has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; set; }

        /// <summary>
        /// Displays validation errors returned from the API
        /// </summary>
        /// <value>Displays validation errors returned from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// A boolean to indicate if a contact has an validation errors
        /// </summary>
        /// <value>A boolean to indicate if a contact has an validation errors</value>
        /// <example>false</example>
        [DataMember(Name = "HasValidationErrors", EmitDefaultValue = true)]
        public bool HasValidationErrors { get; set; }

        /// <summary>
        /// Status of object
        /// </summary>
        /// <value>Status of object</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  MergedToContactID: ").Append(MergedToContactID).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  ContactStatus: ").Append(ContactStatus).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  CompanyNumber: ").Append(CompanyNumber).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  ContactPersons: ").Append(ContactPersons).Append("\n");
            sb.Append("  BankAccountDetails: ").Append(BankAccountDetails).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("  AccountsReceivableTaxType: ").Append(AccountsReceivableTaxType).Append("\n");
            sb.Append("  AccountsPayableTaxType: ").Append(AccountsPayableTaxType).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  IsSupplier: ").Append(IsSupplier).Append("\n");
            sb.Append("  IsCustomer: ").Append(IsCustomer).Append("\n");
            sb.Append("  SalesDefaultLineAmountType: ").Append(SalesDefaultLineAmountType).Append("\n");
            sb.Append("  PurchasesDefaultLineAmountType: ").Append(PurchasesDefaultLineAmountType).Append("\n");
            sb.Append("  DefaultCurrency: ").Append(DefaultCurrency).Append("\n");
            sb.Append("  XeroNetworkKey: ").Append(XeroNetworkKey).Append("\n");
            sb.Append("  SalesDefaultAccountCode: ").Append(SalesDefaultAccountCode).Append("\n");
            sb.Append("  PurchasesDefaultAccountCode: ").Append(PurchasesDefaultAccountCode).Append("\n");
            sb.Append("  SalesTrackingCategories: ").Append(SalesTrackingCategories).Append("\n");
            sb.Append("  PurchasesTrackingCategories: ").Append(PurchasesTrackingCategories).Append("\n");
            sb.Append("  TrackingCategoryName: ").Append(TrackingCategoryName).Append("\n");
            sb.Append("  TrackingCategoryOption: ").Append(TrackingCategoryOption).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  ContactGroups: ").Append(ContactGroups).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  BrandingTheme: ").Append(BrandingTheme).Append("\n");
            sb.Append("  BatchPayments: ").Append(BatchPayments).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  HasValidationErrors: ").Append(HasValidationErrors).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactNumber (string) maxLength
            if (this.ContactNumber != null && this.ContactNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ContactNumber, length must be less than 50.", new [] { "ContactNumber" });
            }

            // AccountNumber (string) maxLength
            if (this.AccountNumber != null && this.AccountNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for AccountNumber, length must be less than 50.", new [] { "AccountNumber" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 255.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for LastName, length must be less than 255.", new [] { "LastName" });
            }

            // CompanyNumber (string) maxLength
            if (this.CompanyNumber != null && this.CompanyNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for CompanyNumber, length must be less than 50.", new [] { "CompanyNumber" });
            }

            // EmailAddress (string) maxLength
            if (this.EmailAddress != null && this.EmailAddress.Length > 255)
            {
                yield return new ValidationResult("Invalid value for EmailAddress, length must be less than 255.", new [] { "EmailAddress" });
            }

            // TaxNumber (string) maxLength
            if (this.TaxNumber != null && this.TaxNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for TaxNumber, length must be less than 50.", new [] { "TaxNumber" });
            }

            yield break;
        }
    }

}
