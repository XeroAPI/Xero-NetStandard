/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BankTransfer
    /// </summary>
    [DataContract(Name = "BankTransfer")]
    public partial class BankTransfer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankTransfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankTransfer" /> class.
        /// </summary>
        /// <param name="fromBankAccount">fromBankAccount (required).</param>
        /// <param name="toBankAccount">toBankAccount (required).</param>
        /// <param name="amount">amount of the transaction (required).</param>
        /// <param name="date">The date of the Transfer YYYY-MM-DD.</param>
        /// <param name="fromIsReconciled">The Bank Transaction boolean to show if it is reconciled for the source account (default to false).</param>
        /// <param name="toIsReconciled">The Bank Transaction boolean to show if it is reconciled for the destination account (default to false).</param>
        /// <param name="reference">Reference for the transactions..</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public BankTransfer(Account fromBankAccount = default(Account), Account toBankAccount = default(Account), double amount = default(double), string date = default(string), bool fromIsReconciled = false, bool toIsReconciled = false, string reference = default(string), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            // to ensure "fromBankAccount" is required (not null)
            if (fromBankAccount == null)
            {
                throw new ArgumentNullException("fromBankAccount is a required property for BankTransfer and cannot be null");
            }
            this.FromBankAccount = fromBankAccount;
            // to ensure "toBankAccount" is required (not null)
            if (toBankAccount == null)
            {
                throw new ArgumentNullException("toBankAccount is a required property for BankTransfer and cannot be null");
            }
            this.ToBankAccount = toBankAccount;
            this.Amount = amount;
            this.Date = date;
            this.FromIsReconciled = fromIsReconciled;
            this.ToIsReconciled = toIsReconciled;
            this.Reference = reference;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// Gets or Sets FromBankAccount
        /// </summary>
        [DataMember(Name = "FromBankAccount", IsRequired = true, EmitDefaultValue = true)]
        public Account FromBankAccount { get; set; }

        /// <summary>
        /// Gets or Sets ToBankAccount
        /// </summary>
        [DataMember(Name = "ToBankAccount", IsRequired = true, EmitDefaultValue = true)]
        public Account ToBankAccount { get; set; }

        /// <summary>
        /// amount of the transaction
        /// </summary>
        /// <value>amount of the transaction</value>
        [DataMember(Name = "Amount", IsRequired = true, EmitDefaultValue = true)]
        public double Amount { get; set; }

        /// <summary>
        /// The date of the Transfer YYYY-MM-DD
        /// </summary>
        /// <value>The date of the Transfer YYYY-MM-DD</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// The identifier of the Bank Transfer
        /// </summary>
        /// <value>The identifier of the Bank Transfer</value>
        [DataMember(Name = "BankTransferID", EmitDefaultValue = false)]
        public Guid BankTransferID { get; private set; }

        /// <summary>
        /// Returns false as BankTransferID should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankTransferID()
        {
            return false;
        }
        /// <summary>
        /// The currency rate
        /// </summary>
        /// <value>The currency rate</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; private set; }

        /// <summary>
        /// Returns false as CurrencyRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyRate()
        {
            return false;
        }
        /// <summary>
        /// The Bank Transaction ID for the source account
        /// </summary>
        /// <value>The Bank Transaction ID for the source account</value>
        [DataMember(Name = "FromBankTransactionID", EmitDefaultValue = false)]
        public Guid FromBankTransactionID { get; private set; }

        /// <summary>
        /// Returns false as FromBankTransactionID should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFromBankTransactionID()
        {
            return false;
        }
        /// <summary>
        /// The Bank Transaction ID for the destination account
        /// </summary>
        /// <value>The Bank Transaction ID for the destination account</value>
        [DataMember(Name = "ToBankTransactionID", EmitDefaultValue = false)]
        public Guid ToBankTransactionID { get; private set; }

        /// <summary>
        /// Returns false as ToBankTransactionID should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeToBankTransactionID()
        {
            return false;
        }
        /// <summary>
        /// The Bank Transaction boolean to show if it is reconciled for the source account
        /// </summary>
        /// <value>The Bank Transaction boolean to show if it is reconciled for the source account</value>
        /// <example>false</example>
        [DataMember(Name = "FromIsReconciled", EmitDefaultValue = true)]
        public bool FromIsReconciled { get; set; }

        /// <summary>
        /// The Bank Transaction boolean to show if it is reconciled for the destination account
        /// </summary>
        /// <value>The Bank Transaction boolean to show if it is reconciled for the destination account</value>
        /// <example>false</example>
        [DataMember(Name = "ToIsReconciled", EmitDefaultValue = true)]
        public bool ToIsReconciled { get; set; }

        /// <summary>
        /// Reference for the transactions.
        /// </summary>
        /// <value>Reference for the transactions.</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Boolean to indicate if a Bank Transfer has an attachment
        /// </summary>
        /// <value>Boolean to indicate if a Bank Transfer has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// UTC timestamp of creation date of bank transfer
        /// </summary>
        /// <value>UTC timestamp of creation date of bank transfer</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "CreatedDateUTC", EmitDefaultValue = false)]
        public string CreatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as CreatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankTransfer {\n");
            sb.Append("  FromBankAccount: ").Append(FromBankAccount).Append("\n");
            sb.Append("  ToBankAccount: ").Append(ToBankAccount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  BankTransferID: ").Append(BankTransferID).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  FromBankTransactionID: ").Append(FromBankTransactionID).Append("\n");
            sb.Append("  ToBankTransactionID: ").Append(ToBankTransactionID).Append("\n");
            sb.Append("  FromIsReconciled: ").Append(FromIsReconciled).Append("\n");
            sb.Append("  ToIsReconciled: ").Append(ToIsReconciled).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  CreatedDateUTC: ").Append(CreatedDateUTC).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
