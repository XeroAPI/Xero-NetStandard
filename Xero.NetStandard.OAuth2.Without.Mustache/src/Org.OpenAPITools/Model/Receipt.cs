/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Receipt
    /// </summary>
    [DataContract(Name = "Receipt")]
    public partial class Receipt : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }
        /// <summary>
        /// Current status of receipt – see status types
        /// </summary>
        /// <value>Current status of receipt – see status types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 1,

            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            [EnumMember(Value = "SUBMITTED")]
            SUBMITTED = 2,

            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 3,

            /// <summary>
            /// Enum DECLINED for value: DECLINED
            /// </summary>
            [EnumMember(Value = "DECLINED")]
            DECLINED = 4,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 5
        }


        /// <summary>
        /// Current status of receipt – see status types
        /// </summary>
        /// <value>Current status of receipt – see status types</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        /// <param name="date">Date of receipt – YYYY-MM-DD.</param>
        /// <param name="contact">contact.</param>
        /// <param name="lineItems">lineItems.</param>
        /// <param name="user">user.</param>
        /// <param name="reference">Additional reference number.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="subTotal">Total of receipt excluding taxes.</param>
        /// <param name="totalTax">Total tax on receipt.</param>
        /// <param name="total">Total of receipt tax inclusive (i.e. SubTotal + TotalTax).</param>
        /// <param name="receiptID">Xero generated unique identifier for receipt.</param>
        /// <param name="status">Current status of receipt – see status types.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        /// <param name="warnings">Displays array of warning messages from the API.</param>
        /// <param name="attachments">Displays array of attachments from the API.</param>
        public Receipt(string date = default(string), Contact contact = default(Contact), List<LineItem> lineItems = default(List<LineItem>), User user = default(User), string reference = default(string), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), double subTotal = default(double), double totalTax = default(double), double total = default(double), Guid receiptID = default(Guid), StatusEnum? status = default(StatusEnum?), List<ValidationError> validationErrors = default(List<ValidationError>), List<ValidationError> warnings = default(List<ValidationError>), List<Attachment> attachments = default(List<Attachment>))
        {
            this.Date = date;
            this.Contact = contact;
            this.LineItems = lineItems;
            this.User = user;
            this.Reference = reference;
            this.LineAmountTypes = lineAmountTypes;
            this.SubTotal = subTotal;
            this.TotalTax = totalTax;
            this.Total = total;
            this.ReceiptID = receiptID;
            this.Status = status;
            this.ValidationErrors = validationErrors;
            this.Warnings = warnings;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Date of receipt – YYYY-MM-DD
        /// </summary>
        /// <value>Date of receipt – YYYY-MM-DD</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Additional reference number
        /// </summary>
        /// <value>Additional reference number</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Total of receipt excluding taxes
        /// </summary>
        /// <value>Total of receipt excluding taxes</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; set; }

        /// <summary>
        /// Total tax on receipt
        /// </summary>
        /// <value>Total tax on receipt</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; set; }

        /// <summary>
        /// Total of receipt tax inclusive (i.e. SubTotal + TotalTax)
        /// </summary>
        /// <value>Total of receipt tax inclusive (i.e. SubTotal + TotalTax)</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Xero generated unique identifier for receipt
        /// </summary>
        /// <value>Xero generated unique identifier for receipt</value>
        [DataMember(Name = "ReceiptID", EmitDefaultValue = false)]
        public Guid ReceiptID { get; set; }

        /// <summary>
        /// Xero generated sequence number for receipt in current claim for a given user
        /// </summary>
        /// <value>Xero generated sequence number for receipt in current claim for a given user</value>
        [DataMember(Name = "ReceiptNumber", EmitDefaultValue = false)]
        public string ReceiptNumber { get; private set; }

        /// <summary>
        /// Returns false as ReceiptNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReceiptNumber()
        {
            return false;
        }
        /// <summary>
        /// Last modified date UTC format
        /// </summary>
        /// <value>Last modified date UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// boolean to indicate if a receipt has an attachment
        /// </summary>
        /// <value>boolean to indicate if a receipt has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// URL link to a source document – shown as “Go to [appName]” in the Xero app
        /// </summary>
        /// <value>URL link to a source document – shown as “Go to [appName]” in the Xero app</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return false;
        }
        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Displays array of warning messages from the API
        /// </summary>
        /// <value>Displays array of warning messages from the API</value>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public List<ValidationError> Warnings { get; set; }

        /// <summary>
        /// Displays array of attachments from the API
        /// </summary>
        /// <value>Displays array of attachments from the API</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  ReceiptID: ").Append(ReceiptID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReceiptNumber: ").Append(ReceiptNumber).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
