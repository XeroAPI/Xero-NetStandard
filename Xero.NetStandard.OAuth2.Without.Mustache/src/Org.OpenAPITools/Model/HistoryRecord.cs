/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HistoryRecord
    /// </summary>
    [DataContract(Name = "HistoryRecord")]
    public partial class HistoryRecord : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryRecord" /> class.
        /// </summary>
        /// <param name="details">details.</param>
        /// <param name="changes">Name of branding theme.</param>
        /// <param name="user">has a value of 0.</param>
        public HistoryRecord(string details = default(string), string changes = default(string), string user = default(string))
        {
            this.Details = details;
            this.Changes = changes;
            this.User = user;
        }

        /// <summary>
        /// details
        /// </summary>
        /// <value>details</value>
        [DataMember(Name = "Details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Name of branding theme
        /// </summary>
        /// <value>Name of branding theme</value>
        [DataMember(Name = "Changes", EmitDefaultValue = false)]
        public string Changes { get; set; }

        /// <summary>
        /// has a value of 0
        /// </summary>
        /// <value>has a value of 0</value>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// UTC timestamp of creation date of branding theme
        /// </summary>
        /// <value>UTC timestamp of creation date of branding theme</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "DateUTC", EmitDefaultValue = false)]
        public string DateUTC { get; private set; }

        /// <summary>
        /// Returns false as DateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistoryRecord {\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  DateUTC: ").Append(DateUTC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
