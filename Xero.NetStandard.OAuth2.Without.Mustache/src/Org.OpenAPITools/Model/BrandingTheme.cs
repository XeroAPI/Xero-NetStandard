/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BrandingTheme
    /// </summary>
    [DataContract(Name = "BrandingTheme")]
    public partial class BrandingTheme : IValidatableObject
    {
        /// <summary>
        /// Always INVOICE
        /// </summary>
        /// <value>Always INVOICE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum INVOICE for value: INVOICE
            /// </summary>
            [EnumMember(Value = "INVOICE")]
            INVOICE = 1
        }


        /// <summary>
        /// Always INVOICE
        /// </summary>
        /// <value>Always INVOICE</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingTheme" /> class.
        /// </summary>
        /// <param name="brandingThemeID">Xero identifier.</param>
        /// <param name="name">Name of branding theme.</param>
        /// <param name="logoUrl">The location of the image file used as the logo on this branding theme.</param>
        /// <param name="type">Always INVOICE.</param>
        /// <param name="sortOrder">Integer – ranked order of branding theme. The default branding theme has a value of 0.</param>
        public BrandingTheme(Guid brandingThemeID = default(Guid), string name = default(string), string logoUrl = default(string), TypeEnum? type = default(TypeEnum?), int sortOrder = default(int))
        {
            this.BrandingThemeID = brandingThemeID;
            this.Name = name;
            this.LogoUrl = logoUrl;
            this.Type = type;
            this.SortOrder = sortOrder;
        }

        /// <summary>
        /// Xero identifier
        /// </summary>
        /// <value>Xero identifier</value>
        [DataMember(Name = "BrandingThemeID", EmitDefaultValue = false)]
        public Guid BrandingThemeID { get; set; }

        /// <summary>
        /// Name of branding theme
        /// </summary>
        /// <value>Name of branding theme</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The location of the image file used as the logo on this branding theme
        /// </summary>
        /// <value>The location of the image file used as the logo on this branding theme</value>
        [DataMember(Name = "LogoUrl", EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Integer – ranked order of branding theme. The default branding theme has a value of 0
        /// </summary>
        /// <value>Integer – ranked order of branding theme. The default branding theme has a value of 0</value>
        [DataMember(Name = "SortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// UTC timestamp of creation date of branding theme
        /// </summary>
        /// <value>UTC timestamp of creation date of branding theme</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "CreatedDateUTC", EmitDefaultValue = false)]
        public string CreatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as CreatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrandingTheme {\n");
            sb.Append("  BrandingThemeID: ").Append(BrandingThemeID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  CreatedDateUTC: ").Append(CreatedDateUTC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
