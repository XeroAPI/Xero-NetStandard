/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Schedule
    /// </summary>
    [DataContract(Name = "Schedule")]
    public partial class Schedule : IValidatableObject
    {
        /// <summary>
        /// One of the following - WEEKLY or MONTHLY
        /// </summary>
        /// <value>One of the following - WEEKLY or MONTHLY</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum WEEKLY for value: WEEKLY
            /// </summary>
            [EnumMember(Value = "WEEKLY")]
            WEEKLY = 1,

            /// <summary>
            /// Enum MONTHLY for value: MONTHLY
            /// </summary>
            [EnumMember(Value = "MONTHLY")]
            MONTHLY = 2
        }


        /// <summary>
        /// One of the following - WEEKLY or MONTHLY
        /// </summary>
        /// <value>One of the following - WEEKLY or MONTHLY</value>
        [DataMember(Name = "Unit", EmitDefaultValue = false)]
        public UnitEnum? Unit { get; set; }
        /// <summary>
        /// the payment terms
        /// </summary>
        /// <value>the payment terms</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DueDateTypeEnum
        {
            /// <summary>
            /// Enum DAYSAFTERBILLDATE for value: DAYSAFTERBILLDATE
            /// </summary>
            [EnumMember(Value = "DAYSAFTERBILLDATE")]
            DAYSAFTERBILLDATE = 1,

            /// <summary>
            /// Enum DAYSAFTERBILLMONTH for value: DAYSAFTERBILLMONTH
            /// </summary>
            [EnumMember(Value = "DAYSAFTERBILLMONTH")]
            DAYSAFTERBILLMONTH = 2,

            /// <summary>
            /// Enum DAYSAFTERINVOICEDATE for value: DAYSAFTERINVOICEDATE
            /// </summary>
            [EnumMember(Value = "DAYSAFTERINVOICEDATE")]
            DAYSAFTERINVOICEDATE = 3,

            /// <summary>
            /// Enum DAYSAFTERINVOICEMONTH for value: DAYSAFTERINVOICEMONTH
            /// </summary>
            [EnumMember(Value = "DAYSAFTERINVOICEMONTH")]
            DAYSAFTERINVOICEMONTH = 4,

            /// <summary>
            /// Enum OFCURRENTMONTH for value: OFCURRENTMONTH
            /// </summary>
            [EnumMember(Value = "OFCURRENTMONTH")]
            OFCURRENTMONTH = 5,

            /// <summary>
            /// Enum OFFOLLOWINGMONTH for value: OFFOLLOWINGMONTH
            /// </summary>
            [EnumMember(Value = "OFFOLLOWINGMONTH")]
            OFFOLLOWINGMONTH = 6
        }


        /// <summary>
        /// the payment terms
        /// </summary>
        /// <value>the payment terms</value>
        [DataMember(Name = "DueDateType", EmitDefaultValue = false)]
        public DueDateTypeEnum? DueDateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Schedule" /> class.
        /// </summary>
        /// <param name="period">Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months).</param>
        /// <param name="unit">One of the following - WEEKLY or MONTHLY.</param>
        /// <param name="dueDate">Integer used with due date type e.g 20 (of following month), 31 (of current month).</param>
        /// <param name="dueDateType">the payment terms.</param>
        /// <param name="startDate">Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited).</param>
        /// <param name="nextScheduledDate">The calendar date of the next invoice in the schedule to be generated.</param>
        /// <param name="endDate">Invoice end date – only returned if the template has an end date set.</param>
        public Schedule(int period = default(int), UnitEnum? unit = default(UnitEnum?), int dueDate = default(int), DueDateTypeEnum? dueDateType = default(DueDateTypeEnum?), string startDate = default(string), string nextScheduledDate = default(string), string endDate = default(string))
        {
            this.Period = period;
            this.Unit = unit;
            this.DueDate = dueDate;
            this.DueDateType = dueDateType;
            this.StartDate = startDate;
            this.NextScheduledDate = nextScheduledDate;
            this.EndDate = endDate;
        }

        /// <summary>
        /// Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)
        /// </summary>
        /// <value>Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months)</value>
        [DataMember(Name = "Period", EmitDefaultValue = false)]
        public int Period { get; set; }

        /// <summary>
        /// Integer used with due date type e.g 20 (of following month), 31 (of current month)
        /// </summary>
        /// <value>Integer used with due date type e.g 20 (of following month), 31 (of current month)</value>
        [DataMember(Name = "DueDate", EmitDefaultValue = false)]
        public int DueDate { get; set; }

        /// <summary>
        /// Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)
        /// </summary>
        /// <value>Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited)</value>
        [DataMember(Name = "StartDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// The calendar date of the next invoice in the schedule to be generated
        /// </summary>
        /// <value>The calendar date of the next invoice in the schedule to be generated</value>
        [DataMember(Name = "NextScheduledDate", EmitDefaultValue = false)]
        public string NextScheduledDate { get; set; }

        /// <summary>
        /// Invoice end date – only returned if the template has an end date set
        /// </summary>
        /// <value>Invoice end date – only returned if the template has an end date set</value>
        [DataMember(Name = "EndDate", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Schedule {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueDateType: ").Append(DueDateType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  NextScheduledDate: ").Append(NextScheduledDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
