/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Organisation
    /// </summary>
    [DataContract(Name = "Organisation")]
    public partial class Organisation : IValidatableObject
    {
        /// <summary>
        /// See Version Types
        /// </summary>
        /// <value>See Version Types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VarVersionEnum
        {
            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            [EnumMember(Value = "AU")]
            AU = 1,

            /// <summary>
            /// Enum NZ for value: NZ
            /// </summary>
            [EnumMember(Value = "NZ")]
            NZ = 2,

            /// <summary>
            /// Enum GLOBAL for value: GLOBAL
            /// </summary>
            [EnumMember(Value = "GLOBAL")]
            GLOBAL = 3,

            /// <summary>
            /// Enum UK for value: UK
            /// </summary>
            [EnumMember(Value = "UK")]
            UK = 4,

            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 5,

            /// <summary>
            /// Enum AUONRAMP for value: AUONRAMP
            /// </summary>
            [EnumMember(Value = "AUONRAMP")]
            AUONRAMP = 6,

            /// <summary>
            /// Enum NZONRAMP for value: NZONRAMP
            /// </summary>
            [EnumMember(Value = "NZONRAMP")]
            NZONRAMP = 7,

            /// <summary>
            /// Enum GLOBALONRAMP for value: GLOBALONRAMP
            /// </summary>
            [EnumMember(Value = "GLOBALONRAMP")]
            GLOBALONRAMP = 8,

            /// <summary>
            /// Enum UKONRAMP for value: UKONRAMP
            /// </summary>
            [EnumMember(Value = "UKONRAMP")]
            UKONRAMP = 9,

            /// <summary>
            /// Enum USONRAMP for value: USONRAMP
            /// </summary>
            [EnumMember(Value = "USONRAMP")]
            USONRAMP = 10
        }


        /// <summary>
        /// See Version Types
        /// </summary>
        /// <value>See Version Types</value>
        [DataMember(Name = "Version", EmitDefaultValue = false)]
        public VarVersionEnum? VarVersion { get; set; }
        /// <summary>
        /// Organisation Type
        /// </summary>
        /// <value>Organisation Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrganisationTypeEnum
        {
            /// <summary>
            /// Enum ACCOUNTINGPRACTICE for value: ACCOUNTING_PRACTICE
            /// </summary>
            [EnumMember(Value = "ACCOUNTING_PRACTICE")]
            ACCOUNTINGPRACTICE = 1,

            /// <summary>
            /// Enum COMPANY for value: COMPANY
            /// </summary>
            [EnumMember(Value = "COMPANY")]
            COMPANY = 2,

            /// <summary>
            /// Enum CHARITY for value: CHARITY
            /// </summary>
            [EnumMember(Value = "CHARITY")]
            CHARITY = 3,

            /// <summary>
            /// Enum CLUBORSOCIETY for value: CLUB_OR_SOCIETY
            /// </summary>
            [EnumMember(Value = "CLUB_OR_SOCIETY")]
            CLUBORSOCIETY = 4,

            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 5,

            /// <summary>
            /// Enum LOOKTHROUGHCOMPANY for value: LOOK_THROUGH_COMPANY
            /// </summary>
            [EnumMember(Value = "LOOK_THROUGH_COMPANY")]
            LOOKTHROUGHCOMPANY = 6,

            /// <summary>
            /// Enum NOTFORPROFIT for value: NOT_FOR_PROFIT
            /// </summary>
            [EnumMember(Value = "NOT_FOR_PROFIT")]
            NOTFORPROFIT = 7,

            /// <summary>
            /// Enum PARTNERSHIP for value: PARTNERSHIP
            /// </summary>
            [EnumMember(Value = "PARTNERSHIP")]
            PARTNERSHIP = 8,

            /// <summary>
            /// Enum SCORPORATION for value: S_CORPORATION
            /// </summary>
            [EnumMember(Value = "S_CORPORATION")]
            SCORPORATION = 9,

            /// <summary>
            /// Enum SELFMANAGEDSUPERANNUATIONFUND for value: SELF_MANAGED_SUPERANNUATION_FUND
            /// </summary>
            [EnumMember(Value = "SELF_MANAGED_SUPERANNUATION_FUND")]
            SELFMANAGEDSUPERANNUATIONFUND = 10,

            /// <summary>
            /// Enum SOLETRADER for value: SOLE_TRADER
            /// </summary>
            [EnumMember(Value = "SOLE_TRADER")]
            SOLETRADER = 11,

            /// <summary>
            /// Enum SUPERANNUATIONFUND for value: SUPERANNUATION_FUND
            /// </summary>
            [EnumMember(Value = "SUPERANNUATION_FUND")]
            SUPERANNUATIONFUND = 12,

            /// <summary>
            /// Enum TRUST for value: TRUST
            /// </summary>
            [EnumMember(Value = "TRUST")]
            TRUST = 13
        }


        /// <summary>
        /// Organisation Type
        /// </summary>
        /// <value>Organisation Type</value>
        [DataMember(Name = "OrganisationType", EmitDefaultValue = false)]
        public OrganisationTypeEnum? OrganisationType { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurrency
        /// </summary>
        [DataMember(Name = "BaseCurrency", EmitDefaultValue = false)]
        public CurrencyCode? BaseCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "CountryCode", EmitDefaultValue = false)]
        public CountryCode? CountryCode { get; set; }
        /// <summary>
        /// The accounting basis used for tax returns. See Sales Tax Basis
        /// </summary>
        /// <value>The accounting basis used for tax returns. See Sales Tax Basis</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalesTaxBasisEnum
        {
            /// <summary>
            /// Enum PAYMENTS for value: PAYMENTS
            /// </summary>
            [EnumMember(Value = "PAYMENTS")]
            PAYMENTS = 1,

            /// <summary>
            /// Enum INVOICE for value: INVOICE
            /// </summary>
            [EnumMember(Value = "INVOICE")]
            INVOICE = 2,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 3,

            /// <summary>
            /// Enum CASH for value: CASH
            /// </summary>
            [EnumMember(Value = "CASH")]
            CASH = 4,

            /// <summary>
            /// Enum ACCRUAL for value: ACCRUAL
            /// </summary>
            [EnumMember(Value = "ACCRUAL")]
            ACCRUAL = 5,

            /// <summary>
            /// Enum FLATRATECASH for value: FLATRATECASH
            /// </summary>
            [EnumMember(Value = "FLATRATECASH")]
            FLATRATECASH = 6,

            /// <summary>
            /// Enum FLATRATEACCRUAL for value: FLATRATEACCRUAL
            /// </summary>
            [EnumMember(Value = "FLATRATEACCRUAL")]
            FLATRATEACCRUAL = 7,

            /// <summary>
            /// Enum ACCRUALS for value: ACCRUALS
            /// </summary>
            [EnumMember(Value = "ACCRUALS")]
            ACCRUALS = 8
        }


        /// <summary>
        /// The accounting basis used for tax returns. See Sales Tax Basis
        /// </summary>
        /// <value>The accounting basis used for tax returns. See Sales Tax Basis</value>
        [DataMember(Name = "SalesTaxBasis", EmitDefaultValue = false)]
        public SalesTaxBasisEnum? SalesTaxBasis { get; set; }
        /// <summary>
        /// The frequency with which tax returns are processed. See Sales Tax Period
        /// </summary>
        /// <value>The frequency with which tax returns are processed. See Sales Tax Period</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SalesTaxPeriodEnum
        {
            /// <summary>
            /// Enum MONTHLY for value: MONTHLY
            /// </summary>
            [EnumMember(Value = "MONTHLY")]
            MONTHLY = 1,

            /// <summary>
            /// Enum QUARTERLY1 for value: QUARTERLY1
            /// </summary>
            [EnumMember(Value = "QUARTERLY1")]
            QUARTERLY1 = 2,

            /// <summary>
            /// Enum QUARTERLY2 for value: QUARTERLY2
            /// </summary>
            [EnumMember(Value = "QUARTERLY2")]
            QUARTERLY2 = 3,

            /// <summary>
            /// Enum QUARTERLY3 for value: QUARTERLY3
            /// </summary>
            [EnumMember(Value = "QUARTERLY3")]
            QUARTERLY3 = 4,

            /// <summary>
            /// Enum ANNUALLY for value: ANNUALLY
            /// </summary>
            [EnumMember(Value = "ANNUALLY")]
            ANNUALLY = 5,

            /// <summary>
            /// Enum ONEMONTHS for value: ONEMONTHS
            /// </summary>
            [EnumMember(Value = "ONEMONTHS")]
            ONEMONTHS = 6,

            /// <summary>
            /// Enum TWOMONTHS for value: TWOMONTHS
            /// </summary>
            [EnumMember(Value = "TWOMONTHS")]
            TWOMONTHS = 7,

            /// <summary>
            /// Enum SIXMONTHS for value: SIXMONTHS
            /// </summary>
            [EnumMember(Value = "SIXMONTHS")]
            SIXMONTHS = 8,

            /// <summary>
            /// Enum _1MONTHLY for value: 1MONTHLY
            /// </summary>
            [EnumMember(Value = "1MONTHLY")]
            _1MONTHLY = 9,

            /// <summary>
            /// Enum _2MONTHLY for value: 2MONTHLY
            /// </summary>
            [EnumMember(Value = "2MONTHLY")]
            _2MONTHLY = 10,

            /// <summary>
            /// Enum _3MONTHLY for value: 3MONTHLY
            /// </summary>
            [EnumMember(Value = "3MONTHLY")]
            _3MONTHLY = 11,

            /// <summary>
            /// Enum _6MONTHLY for value: 6MONTHLY
            /// </summary>
            [EnumMember(Value = "6MONTHLY")]
            _6MONTHLY = 12,

            /// <summary>
            /// Enum QUARTERLY for value: QUARTERLY
            /// </summary>
            [EnumMember(Value = "QUARTERLY")]
            QUARTERLY = 13,

            /// <summary>
            /// Enum YEARLY for value: YEARLY
            /// </summary>
            [EnumMember(Value = "YEARLY")]
            YEARLY = 14,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 15
        }


        /// <summary>
        /// The frequency with which tax returns are processed. See Sales Tax Period
        /// </summary>
        /// <value>The frequency with which tax returns are processed. See Sales Tax Period</value>
        [DataMember(Name = "SalesTaxPeriod", EmitDefaultValue = false)]
        public SalesTaxPeriodEnum? SalesTaxPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "Timezone", EmitDefaultValue = false)]
        public ModelTimeZone? Timezone { get; set; }
        /// <summary>
        /// Organisation Entity Type
        /// </summary>
        /// <value>Organisation Entity Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrganisationEntityTypeEnum
        {
            /// <summary>
            /// Enum ACCOUNTINGPRACTICE for value: ACCOUNTING_PRACTICE
            /// </summary>
            [EnumMember(Value = "ACCOUNTING_PRACTICE")]
            ACCOUNTINGPRACTICE = 1,

            /// <summary>
            /// Enum COMPANY for value: COMPANY
            /// </summary>
            [EnumMember(Value = "COMPANY")]
            COMPANY = 2,

            /// <summary>
            /// Enum CHARITY for value: CHARITY
            /// </summary>
            [EnumMember(Value = "CHARITY")]
            CHARITY = 3,

            /// <summary>
            /// Enum CLUBORSOCIETY for value: CLUB_OR_SOCIETY
            /// </summary>
            [EnumMember(Value = "CLUB_OR_SOCIETY")]
            CLUBORSOCIETY = 4,

            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 5,

            /// <summary>
            /// Enum LOOKTHROUGHCOMPANY for value: LOOK_THROUGH_COMPANY
            /// </summary>
            [EnumMember(Value = "LOOK_THROUGH_COMPANY")]
            LOOKTHROUGHCOMPANY = 6,

            /// <summary>
            /// Enum NOTFORPROFIT for value: NOT_FOR_PROFIT
            /// </summary>
            [EnumMember(Value = "NOT_FOR_PROFIT")]
            NOTFORPROFIT = 7,

            /// <summary>
            /// Enum PARTNERSHIP for value: PARTNERSHIP
            /// </summary>
            [EnumMember(Value = "PARTNERSHIP")]
            PARTNERSHIP = 8,

            /// <summary>
            /// Enum SCORPORATION for value: S_CORPORATION
            /// </summary>
            [EnumMember(Value = "S_CORPORATION")]
            SCORPORATION = 9,

            /// <summary>
            /// Enum SELFMANAGEDSUPERANNUATIONFUND for value: SELF_MANAGED_SUPERANNUATION_FUND
            /// </summary>
            [EnumMember(Value = "SELF_MANAGED_SUPERANNUATION_FUND")]
            SELFMANAGEDSUPERANNUATIONFUND = 10,

            /// <summary>
            /// Enum SOLETRADER for value: SOLE_TRADER
            /// </summary>
            [EnumMember(Value = "SOLE_TRADER")]
            SOLETRADER = 11,

            /// <summary>
            /// Enum SUPERANNUATIONFUND for value: SUPERANNUATION_FUND
            /// </summary>
            [EnumMember(Value = "SUPERANNUATION_FUND")]
            SUPERANNUATIONFUND = 12,

            /// <summary>
            /// Enum TRUST for value: TRUST
            /// </summary>
            [EnumMember(Value = "TRUST")]
            TRUST = 13
        }


        /// <summary>
        /// Organisation Entity Type
        /// </summary>
        /// <value>Organisation Entity Type</value>
        [DataMember(Name = "OrganisationEntityType", EmitDefaultValue = false)]
        public OrganisationEntityTypeEnum? OrganisationEntityType { get; set; }
        /// <summary>
        /// Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
        /// </summary>
        /// <value>Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClassEnum
        {
            /// <summary>
            /// Enum DEMO for value: DEMO
            /// </summary>
            [EnumMember(Value = "DEMO")]
            DEMO = 1,

            /// <summary>
            /// Enum TRIAL for value: TRIAL
            /// </summary>
            [EnumMember(Value = "TRIAL")]
            TRIAL = 2,

            /// <summary>
            /// Enum STARTER for value: STARTER
            /// </summary>
            [EnumMember(Value = "STARTER")]
            STARTER = 3,

            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 4,

            /// <summary>
            /// Enum PREMIUM for value: PREMIUM
            /// </summary>
            [EnumMember(Value = "PREMIUM")]
            PREMIUM = 5,

            /// <summary>
            /// Enum PREMIUM20 for value: PREMIUM_20
            /// </summary>
            [EnumMember(Value = "PREMIUM_20")]
            PREMIUM20 = 6,

            /// <summary>
            /// Enum PREMIUM50 for value: PREMIUM_50
            /// </summary>
            [EnumMember(Value = "PREMIUM_50")]
            PREMIUM50 = 7,

            /// <summary>
            /// Enum PREMIUM100 for value: PREMIUM_100
            /// </summary>
            [EnumMember(Value = "PREMIUM_100")]
            PREMIUM100 = 8,

            /// <summary>
            /// Enum LEDGER for value: LEDGER
            /// </summary>
            [EnumMember(Value = "LEDGER")]
            LEDGER = 9,

            /// <summary>
            /// Enum GSTCASHBOOK for value: GST_CASHBOOK
            /// </summary>
            [EnumMember(Value = "GST_CASHBOOK")]
            GSTCASHBOOK = 10,

            /// <summary>
            /// Enum NONGSTCASHBOOK for value: NON_GST_CASHBOOK
            /// </summary>
            [EnumMember(Value = "NON_GST_CASHBOOK")]
            NONGSTCASHBOOK = 11,

            /// <summary>
            /// Enum ULTIMATE for value: ULTIMATE
            /// </summary>
            [EnumMember(Value = "ULTIMATE")]
            ULTIMATE = 12,

            /// <summary>
            /// Enum LITE for value: LITE
            /// </summary>
            [EnumMember(Value = "LITE")]
            LITE = 13,

            /// <summary>
            /// Enum ULTIMATE10 for value: ULTIMATE_10
            /// </summary>
            [EnumMember(Value = "ULTIMATE_10")]
            ULTIMATE10 = 14,

            /// <summary>
            /// Enum ULTIMATE20 for value: ULTIMATE_20
            /// </summary>
            [EnumMember(Value = "ULTIMATE_20")]
            ULTIMATE20 = 15,

            /// <summary>
            /// Enum ULTIMATE50 for value: ULTIMATE_50
            /// </summary>
            [EnumMember(Value = "ULTIMATE_50")]
            ULTIMATE50 = 16,

            /// <summary>
            /// Enum ULTIMATE100 for value: ULTIMATE_100
            /// </summary>
            [EnumMember(Value = "ULTIMATE_100")]
            ULTIMATE100 = 17,

            /// <summary>
            /// Enum IGNITE for value: IGNITE
            /// </summary>
            [EnumMember(Value = "IGNITE")]
            IGNITE = 18,

            /// <summary>
            /// Enum GROW for value: GROW
            /// </summary>
            [EnumMember(Value = "GROW")]
            GROW = 19,

            /// <summary>
            /// Enum COMPREHENSIVE for value: COMPREHENSIVE
            /// </summary>
            [EnumMember(Value = "COMPREHENSIVE")]
            COMPREHENSIVE = 20
        }


        /// <summary>
        /// Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
        /// </summary>
        /// <value>Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)</value>
        [DataMember(Name = "Class", EmitDefaultValue = false)]
        public ClassEnum? Class { get; set; }
        /// <summary>
        /// BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
        /// </summary>
        /// <value>BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EditionEnum
        {
            /// <summary>
            /// Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESS = 1,

            /// <summary>
            /// Enum PARTNER for value: PARTNER
            /// </summary>
            [EnumMember(Value = "PARTNER")]
            PARTNER = 2
        }


        /// <summary>
        /// BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
        /// </summary>
        /// <value>BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)</value>
        [DataMember(Name = "Edition", EmitDefaultValue = false)]
        public EditionEnum? Edition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Organisation" /> class.
        /// </summary>
        /// <param name="organisationID">Unique Xero identifier.</param>
        /// <param name="aPIKey">Display a unique key used for Xero-to-Xero transactions.</param>
        /// <param name="name">Display name of organisation shown in Xero.</param>
        /// <param name="legalName">Organisation name shown on Reports.</param>
        /// <param name="paysTax">Boolean to describe if organisation is registered with a local tax authority i.e. true, false.</param>
        /// <param name="varVersion">See Version Types.</param>
        /// <param name="organisationType">Organisation Type.</param>
        /// <param name="baseCurrency">baseCurrency.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="isDemoCompany">Boolean to describe if organisation is a demo company..</param>
        /// <param name="organisationStatus">Will be set to ACTIVE if you can connect to organisation via the Xero API.</param>
        /// <param name="registrationNumber">Shows for New Zealand, Australian and UK organisations.</param>
        /// <param name="employerIdentificationNumber">Shown if set. US Only..</param>
        /// <param name="taxNumber">Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US &amp; Global)..</param>
        /// <param name="financialYearEndDay">Calendar day e.g. 0-31.</param>
        /// <param name="financialYearEndMonth">Calendar Month e.g. 1-12.</param>
        /// <param name="salesTaxBasis">The accounting basis used for tax returns. See Sales Tax Basis.</param>
        /// <param name="salesTaxPeriod">The frequency with which tax returns are processed. See Sales Tax Period.</param>
        /// <param name="defaultSalesTax">The default for LineAmountTypes on sales transactions.</param>
        /// <param name="defaultPurchasesTax">The default for LineAmountTypes on purchase transactions.</param>
        /// <param name="periodLockDate">Shown if set. See lock dates.</param>
        /// <param name="endOfYearLockDate">Shown if set. See lock dates.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="organisationEntityType">Organisation Entity Type.</param>
        /// <param name="shortCode">A unique identifier for the organisation. Potential uses..</param>
        /// <param name="varClass">Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM).</param>
        /// <param name="edition">BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing).</param>
        /// <param name="lineOfBusiness">Description of business type as defined in Organisation settings.</param>
        /// <param name="addresses">Address details for organisation – see Addresses.</param>
        /// <param name="phones">Phones details for organisation – see Phones.</param>
        /// <param name="externalLinks">Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        public Organisation(Guid organisationID = default(Guid), string aPIKey = default(string), string name = default(string), string legalName = default(string), bool paysTax = default(bool), VarVersionEnum? varVersion = default(VarVersionEnum?), OrganisationTypeEnum? organisationType = default(OrganisationTypeEnum?), CurrencyCode? baseCurrency = default(CurrencyCode?), CountryCode? countryCode = default(CountryCode?), bool isDemoCompany = default(bool), string organisationStatus = default(string), string registrationNumber = default(string), string employerIdentificationNumber = default(string), string taxNumber = default(string), int financialYearEndDay = default(int), int financialYearEndMonth = default(int), SalesTaxBasisEnum? salesTaxBasis = default(SalesTaxBasisEnum?), SalesTaxPeriodEnum? salesTaxPeriod = default(SalesTaxPeriodEnum?), string defaultSalesTax = default(string), string defaultPurchasesTax = default(string), string periodLockDate = default(string), string endOfYearLockDate = default(string), ModelTimeZone? timezone = default(ModelTimeZone?), OrganisationEntityTypeEnum? organisationEntityType = default(OrganisationEntityTypeEnum?), string shortCode = default(string), ClassEnum? varClass = default(ClassEnum?), EditionEnum? edition = default(EditionEnum?), string lineOfBusiness = default(string), List<AddressForOrganisation> addresses = default(List<AddressForOrganisation>), List<Phone> phones = default(List<Phone>), List<ExternalLink> externalLinks = default(List<ExternalLink>), PaymentTerm paymentTerms = default(PaymentTerm))
        {
            this.OrganisationID = organisationID;
            this.APIKey = aPIKey;
            this.Name = name;
            this.LegalName = legalName;
            this.PaysTax = paysTax;
            this.VarVersion = varVersion;
            this.OrganisationType = organisationType;
            this.BaseCurrency = baseCurrency;
            this.CountryCode = countryCode;
            this.IsDemoCompany = isDemoCompany;
            this.OrganisationStatus = organisationStatus;
            this.RegistrationNumber = registrationNumber;
            this.EmployerIdentificationNumber = employerIdentificationNumber;
            this.TaxNumber = taxNumber;
            this.FinancialYearEndDay = financialYearEndDay;
            this.FinancialYearEndMonth = financialYearEndMonth;
            this.SalesTaxBasis = salesTaxBasis;
            this.SalesTaxPeriod = salesTaxPeriod;
            this.DefaultSalesTax = defaultSalesTax;
            this.DefaultPurchasesTax = defaultPurchasesTax;
            this.PeriodLockDate = periodLockDate;
            this.EndOfYearLockDate = endOfYearLockDate;
            this.Timezone = timezone;
            this.OrganisationEntityType = organisationEntityType;
            this.ShortCode = shortCode;
            this.Class = varClass;
            this.Edition = edition;
            this.LineOfBusiness = lineOfBusiness;
            this.Addresses = addresses;
            this.Phones = phones;
            this.ExternalLinks = externalLinks;
            this.PaymentTerms = paymentTerms;
        }

        /// <summary>
        /// Unique Xero identifier
        /// </summary>
        /// <value>Unique Xero identifier</value>
        /// <example>8be9db36-3598-4755-ba5c-c2dbc8c4a7a2</example>
        [DataMember(Name = "OrganisationID", EmitDefaultValue = false)]
        public Guid OrganisationID { get; set; }

        /// <summary>
        /// Display a unique key used for Xero-to-Xero transactions
        /// </summary>
        /// <value>Display a unique key used for Xero-to-Xero transactions</value>
        [DataMember(Name = "APIKey", EmitDefaultValue = false)]
        public string APIKey { get; set; }

        /// <summary>
        /// Display name of organisation shown in Xero
        /// </summary>
        /// <value>Display name of organisation shown in Xero</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Organisation name shown on Reports
        /// </summary>
        /// <value>Organisation name shown on Reports</value>
        [DataMember(Name = "LegalName", EmitDefaultValue = false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Boolean to describe if organisation is registered with a local tax authority i.e. true, false
        /// </summary>
        /// <value>Boolean to describe if organisation is registered with a local tax authority i.e. true, false</value>
        [DataMember(Name = "PaysTax", EmitDefaultValue = true)]
        public bool PaysTax { get; set; }

        /// <summary>
        /// Boolean to describe if organisation is a demo company.
        /// </summary>
        /// <value>Boolean to describe if organisation is a demo company.</value>
        [DataMember(Name = "IsDemoCompany", EmitDefaultValue = true)]
        public bool IsDemoCompany { get; set; }

        /// <summary>
        /// Will be set to ACTIVE if you can connect to organisation via the Xero API
        /// </summary>
        /// <value>Will be set to ACTIVE if you can connect to organisation via the Xero API</value>
        [DataMember(Name = "OrganisationStatus", EmitDefaultValue = false)]
        public string OrganisationStatus { get; set; }

        /// <summary>
        /// Shows for New Zealand, Australian and UK organisations
        /// </summary>
        /// <value>Shows for New Zealand, Australian and UK organisations</value>
        [DataMember(Name = "RegistrationNumber", EmitDefaultValue = false)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Shown if set. US Only.
        /// </summary>
        /// <value>Shown if set. US Only.</value>
        [DataMember(Name = "EmployerIdentificationNumber", EmitDefaultValue = false)]
        public string EmployerIdentificationNumber { get; set; }

        /// <summary>
        /// Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US &amp; Global).
        /// </summary>
        /// <value>Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US &amp; Global).</value>
        [DataMember(Name = "TaxNumber", EmitDefaultValue = false)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// Calendar day e.g. 0-31
        /// </summary>
        /// <value>Calendar day e.g. 0-31</value>
        [DataMember(Name = "FinancialYearEndDay", EmitDefaultValue = false)]
        public int FinancialYearEndDay { get; set; }

        /// <summary>
        /// Calendar Month e.g. 1-12
        /// </summary>
        /// <value>Calendar Month e.g. 1-12</value>
        [DataMember(Name = "FinancialYearEndMonth", EmitDefaultValue = false)]
        public int FinancialYearEndMonth { get; set; }

        /// <summary>
        /// The default for LineAmountTypes on sales transactions
        /// </summary>
        /// <value>The default for LineAmountTypes on sales transactions</value>
        [DataMember(Name = "DefaultSalesTax", EmitDefaultValue = false)]
        public string DefaultSalesTax { get; set; }

        /// <summary>
        /// The default for LineAmountTypes on purchase transactions
        /// </summary>
        /// <value>The default for LineAmountTypes on purchase transactions</value>
        [DataMember(Name = "DefaultPurchasesTax", EmitDefaultValue = false)]
        public string DefaultPurchasesTax { get; set; }

        /// <summary>
        /// Shown if set. See lock dates
        /// </summary>
        /// <value>Shown if set. See lock dates</value>
        [DataMember(Name = "PeriodLockDate", EmitDefaultValue = false)]
        public string PeriodLockDate { get; set; }

        /// <summary>
        /// Shown if set. See lock dates
        /// </summary>
        /// <value>Shown if set. See lock dates</value>
        [DataMember(Name = "EndOfYearLockDate", EmitDefaultValue = false)]
        public string EndOfYearLockDate { get; set; }

        /// <summary>
        /// Timestamp when the organisation was created in Xero
        /// </summary>
        /// <value>Timestamp when the organisation was created in Xero</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "CreatedDateUTC", EmitDefaultValue = false)]
        public string CreatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as CreatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// A unique identifier for the organisation. Potential uses.
        /// </summary>
        /// <value>A unique identifier for the organisation. Potential uses.</value>
        [DataMember(Name = "ShortCode", EmitDefaultValue = false)]
        public string ShortCode { get; set; }

        /// <summary>
        /// Description of business type as defined in Organisation settings
        /// </summary>
        /// <value>Description of business type as defined in Organisation settings</value>
        [DataMember(Name = "LineOfBusiness", EmitDefaultValue = false)]
        public string LineOfBusiness { get; set; }

        /// <summary>
        /// Address details for organisation – see Addresses
        /// </summary>
        /// <value>Address details for organisation – see Addresses</value>
        [DataMember(Name = "Addresses", EmitDefaultValue = false)]
        public List<AddressForOrganisation> Addresses { get; set; }

        /// <summary>
        /// Phones details for organisation – see Phones
        /// </summary>
        /// <value>Phones details for organisation – see Phones</value>
        [DataMember(Name = "Phones", EmitDefaultValue = false)]
        public List<Phone> Phones { get; set; }

        /// <summary>
        /// Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below
        /// </summary>
        /// <value>Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below</value>
        [DataMember(Name = "ExternalLinks", EmitDefaultValue = false)]
        public List<ExternalLink> ExternalLinks { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name = "PaymentTerms", EmitDefaultValue = false)]
        public PaymentTerm PaymentTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Organisation {\n");
            sb.Append("  OrganisationID: ").Append(OrganisationID).Append("\n");
            sb.Append("  APIKey: ").Append(APIKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  PaysTax: ").Append(PaysTax).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  OrganisationType: ").Append(OrganisationType).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  IsDemoCompany: ").Append(IsDemoCompany).Append("\n");
            sb.Append("  OrganisationStatus: ").Append(OrganisationStatus).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  EmployerIdentificationNumber: ").Append(EmployerIdentificationNumber).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("  FinancialYearEndDay: ").Append(FinancialYearEndDay).Append("\n");
            sb.Append("  FinancialYearEndMonth: ").Append(FinancialYearEndMonth).Append("\n");
            sb.Append("  SalesTaxBasis: ").Append(SalesTaxBasis).Append("\n");
            sb.Append("  SalesTaxPeriod: ").Append(SalesTaxPeriod).Append("\n");
            sb.Append("  DefaultSalesTax: ").Append(DefaultSalesTax).Append("\n");
            sb.Append("  DefaultPurchasesTax: ").Append(DefaultPurchasesTax).Append("\n");
            sb.Append("  PeriodLockDate: ").Append(PeriodLockDate).Append("\n");
            sb.Append("  EndOfYearLockDate: ").Append(EndOfYearLockDate).Append("\n");
            sb.Append("  CreatedDateUTC: ").Append(CreatedDateUTC).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  OrganisationEntityType: ").Append(OrganisationEntityType).Append("\n");
            sb.Append("  ShortCode: ").Append(ShortCode).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  LineOfBusiness: ").Append(LineOfBusiness).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  ExternalLinks: ").Append(ExternalLinks).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
