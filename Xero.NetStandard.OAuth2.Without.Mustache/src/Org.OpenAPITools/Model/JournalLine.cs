/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JournalLine
    /// </summary>
    [DataContract(Name = "JournalLine")]
    public partial class JournalLine : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name = "AccountType", EmitDefaultValue = false)]
        public AccountType? AccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalLine" /> class.
        /// </summary>
        /// <param name="journalLineID">Xero identifier for Journal.</param>
        /// <param name="accountID">See Accounts.</param>
        /// <param name="accountCode">See Accounts.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="accountName">See AccountCodes.</param>
        /// <param name="description">The description from the source transaction line item. Only returned if populated..</param>
        /// <param name="netAmount">Net amount of journal line. This will be a positive value for a debit and negative for a credit.</param>
        /// <param name="grossAmount">Gross amount of journal line (NetAmount + TaxAmount)..</param>
        /// <param name="taxType">The tax type from taxRates.</param>
        /// <param name="taxName">see TaxRates.</param>
        /// <param name="trackingCategories">Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements..</param>
        public JournalLine(Guid journalLineID = default(Guid), Guid accountID = default(Guid), string accountCode = default(string), AccountType? accountType = default(AccountType?), string accountName = default(string), string description = default(string), double netAmount = default(double), double grossAmount = default(double), string taxType = default(string), string taxName = default(string), List<TrackingCategory> trackingCategories = default(List<TrackingCategory>))
        {
            this.JournalLineID = journalLineID;
            this.AccountID = accountID;
            this.AccountCode = accountCode;
            this.AccountType = accountType;
            this.AccountName = accountName;
            this.Description = description;
            this.NetAmount = netAmount;
            this.GrossAmount = grossAmount;
            this.TaxType = taxType;
            this.TaxName = taxName;
            this.TrackingCategories = trackingCategories;
        }

        /// <summary>
        /// Xero identifier for Journal
        /// </summary>
        /// <value>Xero identifier for Journal</value>
        /// <example>7be9db36-3598-4755-ba5c-c2dbc8c4a7a2</example>
        [DataMember(Name = "JournalLineID", EmitDefaultValue = false)]
        public Guid JournalLineID { get; set; }

        /// <summary>
        /// See Accounts
        /// </summary>
        /// <value>See Accounts</value>
        /// <example>ceef66a5-a545-413b-9312-78a53caadbc4</example>
        [DataMember(Name = "AccountID", EmitDefaultValue = false)]
        public Guid AccountID { get; set; }

        /// <summary>
        /// See Accounts
        /// </summary>
        /// <value>See Accounts</value>
        /// <example>090</example>
        [DataMember(Name = "AccountCode", EmitDefaultValue = false)]
        public string AccountCode { get; set; }

        /// <summary>
        /// See AccountCodes
        /// </summary>
        /// <value>See AccountCodes</value>
        /// <example>Checking Account</example>
        [DataMember(Name = "AccountName", EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The description from the source transaction line item. Only returned if populated.
        /// </summary>
        /// <value>The description from the source transaction line item. Only returned if populated.</value>
        /// <example>My business checking account</example>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Net amount of journal line. This will be a positive value for a debit and negative for a credit
        /// </summary>
        /// <value>Net amount of journal line. This will be a positive value for a debit and negative for a credit</value>
        /// <example>4130.98</example>
        [DataMember(Name = "NetAmount", EmitDefaultValue = false)]
        public double NetAmount { get; set; }

        /// <summary>
        /// Gross amount of journal line (NetAmount + TaxAmount).
        /// </summary>
        /// <value>Gross amount of journal line (NetAmount + TaxAmount).</value>
        /// <example>4130.98</example>
        [DataMember(Name = "GrossAmount", EmitDefaultValue = false)]
        public double GrossAmount { get; set; }

        /// <summary>
        /// Total tax on a journal line
        /// </summary>
        /// <value>Total tax on a journal line</value>
        /// <example>0.0</example>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public double TaxAmount { get; private set; }

        /// <summary>
        /// Returns false as TaxAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxAmount()
        {
            return false;
        }
        /// <summary>
        /// The tax type from taxRates
        /// </summary>
        /// <value>The tax type from taxRates</value>
        [DataMember(Name = "TaxType", EmitDefaultValue = false)]
        public string TaxType { get; set; }

        /// <summary>
        /// see TaxRates
        /// </summary>
        /// <value>see TaxRates</value>
        /// <example>Tax Exempt</example>
        [DataMember(Name = "TaxName", EmitDefaultValue = false)]
        public string TaxName { get; set; }

        /// <summary>
        /// Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.
        /// </summary>
        /// <value>Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 &lt;TrackingCategory&gt; elements.</value>
        [DataMember(Name = "TrackingCategories", EmitDefaultValue = false)]
        public List<TrackingCategory> TrackingCategories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JournalLine {\n");
            sb.Append("  JournalLineID: ").Append(JournalLineID).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  GrossAmount: ").Append(GrossAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxName: ").Append(TaxName).Append("\n");
            sb.Append("  TrackingCategories: ").Append(TrackingCategories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
