/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract(Name = "Item")]
    public partial class Item : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="code">User defined item code (max length &#x3D; 30) (required).</param>
        /// <param name="inventoryAssetAccountCode">The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item.</param>
        /// <param name="name">The name of the item (max length &#x3D; 50).</param>
        /// <param name="isSold">Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled..</param>
        /// <param name="isPurchased">Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled..</param>
        /// <param name="description">The sales description of the item (max length &#x3D; 4000).</param>
        /// <param name="purchaseDescription">The purchase description of the item (max length &#x3D; 4000).</param>
        /// <param name="purchaseDetails">purchaseDetails.</param>
        /// <param name="salesDetails">salesDetails.</param>
        /// <param name="isTrackedAsInventory">True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set..</param>
        /// <param name="totalCostPool">The value of the item on hand. Calculated using average cost accounting..</param>
        /// <param name="quantityOnHand">The quantity of the item on hand.</param>
        /// <param name="itemID">The Xero identifier for an Item.</param>
        /// <param name="statusAttributeString">Status of object.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public Item(string code = default(string), string inventoryAssetAccountCode = default(string), string name = default(string), bool isSold = default(bool), bool isPurchased = default(bool), string description = default(string), string purchaseDescription = default(string), Purchase purchaseDetails = default(Purchase), Purchase salesDetails = default(Purchase), bool isTrackedAsInventory = default(bool), double totalCostPool = default(double), double quantityOnHand = default(double), Guid itemID = default(Guid), string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for Item and cannot be null");
            }
            this.Code = code;
            this.InventoryAssetAccountCode = inventoryAssetAccountCode;
            this.Name = name;
            this.IsSold = isSold;
            this.IsPurchased = isPurchased;
            this.Description = description;
            this.PurchaseDescription = purchaseDescription;
            this.PurchaseDetails = purchaseDetails;
            this.SalesDetails = salesDetails;
            this.IsTrackedAsInventory = isTrackedAsInventory;
            this.TotalCostPool = totalCostPool;
            this.QuantityOnHand = quantityOnHand;
            this.ItemID = itemID;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// User defined item code (max length &#x3D; 30)
        /// </summary>
        /// <value>User defined item code (max length &#x3D; 30)</value>
        [DataMember(Name = "Code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
        /// </summary>
        /// <value>The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item</value>
        [DataMember(Name = "InventoryAssetAccountCode", EmitDefaultValue = false)]
        public string InventoryAssetAccountCode { get; set; }

        /// <summary>
        /// The name of the item (max length &#x3D; 50)
        /// </summary>
        /// <value>The name of the item (max length &#x3D; 50)</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
        /// </summary>
        /// <value>Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.</value>
        [DataMember(Name = "IsSold", EmitDefaultValue = true)]
        public bool IsSold { get; set; }

        /// <summary>
        /// Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
        /// </summary>
        /// <value>Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.</value>
        [DataMember(Name = "IsPurchased", EmitDefaultValue = true)]
        public bool IsPurchased { get; set; }

        /// <summary>
        /// The sales description of the item (max length &#x3D; 4000)
        /// </summary>
        /// <value>The sales description of the item (max length &#x3D; 4000)</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The purchase description of the item (max length &#x3D; 4000)
        /// </summary>
        /// <value>The purchase description of the item (max length &#x3D; 4000)</value>
        [DataMember(Name = "PurchaseDescription", EmitDefaultValue = false)]
        public string PurchaseDescription { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDetails
        /// </summary>
        [DataMember(Name = "PurchaseDetails", EmitDefaultValue = false)]
        public Purchase PurchaseDetails { get; set; }

        /// <summary>
        /// Gets or Sets SalesDetails
        /// </summary>
        [DataMember(Name = "SalesDetails", EmitDefaultValue = false)]
        public Purchase SalesDetails { get; set; }

        /// <summary>
        /// True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
        /// </summary>
        /// <value>True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.</value>
        [DataMember(Name = "IsTrackedAsInventory", EmitDefaultValue = true)]
        public bool IsTrackedAsInventory { get; set; }

        /// <summary>
        /// The value of the item on hand. Calculated using average cost accounting.
        /// </summary>
        /// <value>The value of the item on hand. Calculated using average cost accounting.</value>
        [DataMember(Name = "TotalCostPool", EmitDefaultValue = false)]
        public double TotalCostPool { get; set; }

        /// <summary>
        /// The quantity of the item on hand
        /// </summary>
        /// <value>The quantity of the item on hand</value>
        [DataMember(Name = "QuantityOnHand", EmitDefaultValue = false)]
        public double QuantityOnHand { get; set; }

        /// <summary>
        /// Last modified date in UTC format
        /// </summary>
        /// <value>Last modified date in UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// The Xero identifier for an Item
        /// </summary>
        /// <value>The Xero identifier for an Item</value>
        [DataMember(Name = "ItemID", EmitDefaultValue = false)]
        public Guid ItemID { get; set; }

        /// <summary>
        /// Status of object
        /// </summary>
        /// <value>Status of object</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  InventoryAssetAccountCode: ").Append(InventoryAssetAccountCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsSold: ").Append(IsSold).Append("\n");
            sb.Append("  IsPurchased: ").Append(IsPurchased).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PurchaseDescription: ").Append(PurchaseDescription).Append("\n");
            sb.Append("  PurchaseDetails: ").Append(PurchaseDetails).Append("\n");
            sb.Append("  SalesDetails: ").Append(SalesDetails).Append("\n");
            sb.Append("  IsTrackedAsInventory: ").Append(IsTrackedAsInventory).Append("\n");
            sb.Append("  TotalCostPool: ").Append(TotalCostPool).Append("\n");
            sb.Append("  QuantityOnHand: ").Append(QuantityOnHand).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 30)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 30.", new [] { "Code" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 4000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 4000.", new [] { "Description" });
            }

            // PurchaseDescription (string) maxLength
            if (this.PurchaseDescription != null && this.PurchaseDescription.Length > 4000)
            {
                yield return new ValidationResult("Invalid value for PurchaseDescription, length must be less than 4000.", new [] { "PurchaseDescription" });
            }

            yield break;
        }
    }

}
