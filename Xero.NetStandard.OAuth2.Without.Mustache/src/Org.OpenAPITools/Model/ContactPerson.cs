/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContactPerson
    /// </summary>
    [DataContract(Name = "ContactPerson")]
    public partial class ContactPerson : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactPerson" /> class.
        /// </summary>
        /// <param name="firstName">First name of person.</param>
        /// <param name="lastName">Last name of person.</param>
        /// <param name="emailAddress">Email address of person.</param>
        /// <param name="includeInEmails">boolean to indicate whether contact should be included on emails with invoices etc..</param>
        public ContactPerson(string firstName = default(string), string lastName = default(string), string emailAddress = default(string), bool includeInEmails = default(bool))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
            this.EmailAddress = emailAddress;
            this.IncludeInEmails = includeInEmails;
        }

        /// <summary>
        /// First name of person
        /// </summary>
        /// <value>First name of person</value>
        [DataMember(Name = "FirstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of person
        /// </summary>
        /// <value>Last name of person</value>
        [DataMember(Name = "LastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address of person
        /// </summary>
        /// <value>Email address of person</value>
        [DataMember(Name = "EmailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// boolean to indicate whether contact should be included on emails with invoices etc.
        /// </summary>
        /// <value>boolean to indicate whether contact should be included on emails with invoices etc.</value>
        [DataMember(Name = "IncludeInEmails", EmitDefaultValue = true)]
        public bool IncludeInEmails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactPerson {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  IncludeInEmails: ").Append(IncludeInEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
