/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreditNote
    /// </summary>
    [DataContract(Name = "CreditNote")]
    public partial class CreditNote : IValidatableObject
    {
        /// <summary>
        /// See Credit Note Types
        /// </summary>
        /// <value>See Credit Note Types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ACCPAYCREDIT for value: ACCPAYCREDIT
            /// </summary>
            [EnumMember(Value = "ACCPAYCREDIT")]
            ACCPAYCREDIT = 1,

            /// <summary>
            /// Enum ACCRECCREDIT for value: ACCRECCREDIT
            /// </summary>
            [EnumMember(Value = "ACCRECCREDIT")]
            ACCRECCREDIT = 2
        }


        /// <summary>
        /// See Credit Note Types
        /// </summary>
        /// <value>See Credit Note Types</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// See Credit Note Status Codes
        /// </summary>
        /// <value>See Credit Note Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 1,

            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            [EnumMember(Value = "SUBMITTED")]
            SUBMITTED = 2,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 3,

            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 4,

            /// <summary>
            /// Enum PAID for value: PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAID = 5,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 6
        }


        /// <summary>
        /// See Credit Note Status Codes
        /// </summary>
        /// <value>See Credit Note Status Codes</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public CurrencyCode? CurrencyCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNote" /> class.
        /// </summary>
        /// <param name="type">See Credit Note Types.</param>
        /// <param name="contact">contact.</param>
        /// <param name="date">The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation.</param>
        /// <param name="dueDate">Date invoice is due – YYYY-MM-DD.</param>
        /// <param name="status">See Credit Note Status Codes.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="lineItems">See Invoice Line Items.</param>
        /// <param name="subTotal">The subtotal of the credit note excluding taxes.</param>
        /// <param name="totalTax">The total tax on the credit note.</param>
        /// <param name="total">The total of the Credit Note(subtotal + total tax).</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="fullyPaidOnDate">Date when credit note was fully paid(UTC format).</param>
        /// <param name="creditNoteID">Xero generated unique identifier.</param>
        /// <param name="creditNoteNumber">ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings).</param>
        /// <param name="reference">ACCRECCREDIT only – additional reference number.</param>
        /// <param name="currencyRate">The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used.</param>
        /// <param name="remainingCredit">The remaining credit balance on the Credit Note.</param>
        /// <param name="allocations">See Allocations.</param>
        /// <param name="appliedAmount">The amount of applied to an invoice.</param>
        /// <param name="payments">See Payments.</param>
        /// <param name="brandingThemeID">See BrandingThemes.</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="hasAttachments">boolean to indicate if a credit note has an attachment (default to false).</param>
        /// <param name="hasErrors">A boolean to indicate if a credit note has an validation errors (default to false).</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        /// <param name="warnings">Displays array of warning messages from the API.</param>
        public CreditNote(TypeEnum? type = default(TypeEnum?), Contact contact = default(Contact), string date = default(string), string dueDate = default(string), StatusEnum? status = default(StatusEnum?), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), List<LineItem> lineItems = default(List<LineItem>), double subTotal = default(double), double totalTax = default(double), double total = default(double), CurrencyCode? currencyCode = default(CurrencyCode?), string fullyPaidOnDate = default(string), Guid creditNoteID = default(Guid), string creditNoteNumber = default(string), string reference = default(string), double currencyRate = default(double), double remainingCredit = default(double), List<Allocation> allocations = default(List<Allocation>), double appliedAmount = default(double), List<Payment> payments = default(List<Payment>), Guid brandingThemeID = default(Guid), string statusAttributeString = default(string), bool hasAttachments = false, bool hasErrors = false, List<ValidationError> validationErrors = default(List<ValidationError>), List<ValidationError> warnings = default(List<ValidationError>))
        {
            this.Type = type;
            this.Contact = contact;
            this.Date = date;
            this.DueDate = dueDate;
            this.Status = status;
            this.LineAmountTypes = lineAmountTypes;
            this.LineItems = lineItems;
            this.SubTotal = subTotal;
            this.TotalTax = totalTax;
            this.Total = total;
            this.CurrencyCode = currencyCode;
            this.FullyPaidOnDate = fullyPaidOnDate;
            this.CreditNoteID = creditNoteID;
            this.CreditNoteNumber = creditNoteNumber;
            this.Reference = reference;
            this.CurrencyRate = currencyRate;
            this.RemainingCredit = remainingCredit;
            this.Allocations = allocations;
            this.AppliedAmount = appliedAmount;
            this.Payments = payments;
            this.BrandingThemeID = brandingThemeID;
            this.StatusAttributeString = statusAttributeString;
            this.HasAttachments = hasAttachments;
            this.HasErrors = hasErrors;
            this.ValidationErrors = validationErrors;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
        /// </summary>
        /// <value>The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Date invoice is due – YYYY-MM-DD
        /// </summary>
        /// <value>Date invoice is due – YYYY-MM-DD</value>
        [DataMember(Name = "DueDate", EmitDefaultValue = false)]
        public string DueDate { get; set; }

        /// <summary>
        /// See Invoice Line Items
        /// </summary>
        /// <value>See Invoice Line Items</value>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// The subtotal of the credit note excluding taxes
        /// </summary>
        /// <value>The subtotal of the credit note excluding taxes</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; set; }

        /// <summary>
        /// The total tax on the credit note
        /// </summary>
        /// <value>The total tax on the credit note</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; set; }

        /// <summary>
        /// The total of the Credit Note(subtotal + total tax)
        /// </summary>
        /// <value>The total of the Credit Note(subtotal + total tax)</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// CIS deduction for UK contractors
        /// </summary>
        /// <value>CIS deduction for UK contractors</value>
        [DataMember(Name = "CISDeduction", EmitDefaultValue = false)]
        public double CISDeduction { get; private set; }

        /// <summary>
        /// Returns false as CISDeduction should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCISDeduction()
        {
            return false;
        }
        /// <summary>
        /// CIS Deduction rate for the organisation
        /// </summary>
        /// <value>CIS Deduction rate for the organisation</value>
        [DataMember(Name = "CISRate", EmitDefaultValue = false)]
        public double CISRate { get; private set; }

        /// <summary>
        /// Returns false as CISRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCISRate()
        {
            return false;
        }
        /// <summary>
        /// UTC timestamp of last update to the credit note
        /// </summary>
        /// <value>UTC timestamp of last update to the credit note</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Date when credit note was fully paid(UTC format)
        /// </summary>
        /// <value>Date when credit note was fully paid(UTC format)</value>
        [DataMember(Name = "FullyPaidOnDate", EmitDefaultValue = false)]
        public string FullyPaidOnDate { get; set; }

        /// <summary>
        /// Xero generated unique identifier
        /// </summary>
        /// <value>Xero generated unique identifier</value>
        [DataMember(Name = "CreditNoteID", EmitDefaultValue = false)]
        public Guid CreditNoteID { get; set; }

        /// <summary>
        /// ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)
        /// </summary>
        /// <value>ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)</value>
        [DataMember(Name = "CreditNoteNumber", EmitDefaultValue = false)]
        public string CreditNoteNumber { get; set; }

        /// <summary>
        /// ACCRECCREDIT only – additional reference number
        /// </summary>
        /// <value>ACCRECCREDIT only – additional reference number</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)
        /// </summary>
        /// <value>boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)</value>
        [DataMember(Name = "SentToContact", EmitDefaultValue = true)]
        public bool SentToContact { get; private set; }

        /// <summary>
        /// Returns false as SentToContact should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSentToContact()
        {
            return false;
        }
        /// <summary>
        /// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used
        /// </summary>
        /// <value>The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// The remaining credit balance on the Credit Note
        /// </summary>
        /// <value>The remaining credit balance on the Credit Note</value>
        [DataMember(Name = "RemainingCredit", EmitDefaultValue = false)]
        public double RemainingCredit { get; set; }

        /// <summary>
        /// See Allocations
        /// </summary>
        /// <value>See Allocations</value>
        [DataMember(Name = "Allocations", EmitDefaultValue = false)]
        public List<Allocation> Allocations { get; set; }

        /// <summary>
        /// The amount of applied to an invoice
        /// </summary>
        /// <value>The amount of applied to an invoice</value>
        /// <example>2.0</example>
        [DataMember(Name = "AppliedAmount", EmitDefaultValue = false)]
        public double AppliedAmount { get; set; }

        /// <summary>
        /// See Payments
        /// </summary>
        /// <value>See Payments</value>
        [DataMember(Name = "Payments", EmitDefaultValue = false)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// See BrandingThemes
        /// </summary>
        /// <value>See BrandingThemes</value>
        [DataMember(Name = "BrandingThemeID", EmitDefaultValue = false)]
        public Guid BrandingThemeID { get; set; }

        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// boolean to indicate if a credit note has an attachment
        /// </summary>
        /// <value>boolean to indicate if a credit note has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; set; }

        /// <summary>
        /// A boolean to indicate if a credit note has an validation errors
        /// </summary>
        /// <value>A boolean to indicate if a credit note has an validation errors</value>
        /// <example>false</example>
        [DataMember(Name = "HasErrors", EmitDefaultValue = true)]
        public bool HasErrors { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Displays array of warning messages from the API
        /// </summary>
        /// <value>Displays array of warning messages from the API</value>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public List<ValidationError> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditNote {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  CISDeduction: ").Append(CISDeduction).Append("\n");
            sb.Append("  CISRate: ").Append(CISRate).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  FullyPaidOnDate: ").Append(FullyPaidOnDate).Append("\n");
            sb.Append("  CreditNoteID: ").Append(CreditNoteID).Append("\n");
            sb.Append("  CreditNoteNumber: ").Append(CreditNoteNumber).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SentToContact: ").Append(SentToContact).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  RemainingCredit: ").Append(RemainingCredit).Append("\n");
            sb.Append("  Allocations: ").Append(Allocations).Append("\n");
            sb.Append("  AppliedAmount: ").Append(AppliedAmount).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  BrandingThemeID: ").Append(BrandingThemeID).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  HasErrors: ").Append(HasErrors).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
