/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Budget
    /// </summary>
    [DataContract(Name = "Budget")]
    public partial class Budget : IValidatableObject
    {
        /// <summary>
        /// Type of Budget. OVERALL or TRACKING
        /// </summary>
        /// <value>Type of Budget. OVERALL or TRACKING</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum OVERALL for value: OVERALL
            /// </summary>
            [EnumMember(Value = "OVERALL")]
            OVERALL = 1,

            /// <summary>
            /// Enum TRACKING for value: TRACKING
            /// </summary>
            [EnumMember(Value = "TRACKING")]
            TRACKING = 2
        }


        /// <summary>
        /// Type of Budget. OVERALL or TRACKING
        /// </summary>
        /// <value>Type of Budget. OVERALL or TRACKING</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Budget" /> class.
        /// </summary>
        /// <param name="budgetID">Xero identifier.</param>
        /// <param name="type">Type of Budget. OVERALL or TRACKING.</param>
        /// <param name="description">The Budget description.</param>
        /// <param name="budgetLines">budgetLines.</param>
        /// <param name="tracking">tracking.</param>
        public Budget(Guid budgetID = default(Guid), TypeEnum? type = default(TypeEnum?), string description = default(string), List<BudgetLine> budgetLines = default(List<BudgetLine>), List<TrackingCategory> tracking = default(List<TrackingCategory>))
        {
            this.BudgetID = budgetID;
            this.Type = type;
            this.Description = description;
            this.BudgetLines = budgetLines;
            this.Tracking = tracking;
        }

        /// <summary>
        /// Xero identifier
        /// </summary>
        /// <value>Xero identifier</value>
        [DataMember(Name = "BudgetID", EmitDefaultValue = false)]
        public Guid BudgetID { get; set; }

        /// <summary>
        /// The Budget description
        /// </summary>
        /// <value>The Budget description</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// UTC timestamp of last update to budget
        /// </summary>
        /// <value>UTC timestamp of last update to budget</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets BudgetLines
        /// </summary>
        [DataMember(Name = "BudgetLines", EmitDefaultValue = false)]
        public List<BudgetLine> BudgetLines { get; set; }

        /// <summary>
        /// Gets or Sets Tracking
        /// </summary>
        [DataMember(Name = "Tracking", EmitDefaultValue = false)]
        public List<TrackingCategory> Tracking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Budget {\n");
            sb.Append("  BudgetID: ").Append(BudgetID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  BudgetLines: ").Append(BudgetLines).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            yield break;
        }
    }

}
