/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LinkedTransaction
    /// </summary>
    [DataContract(Name = "LinkedTransaction")]
    public partial class LinkedTransaction : IValidatableObject
    {
        /// <summary>
        /// Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
        /// </summary>
        /// <value>Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 1,

            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 2,

            /// <summary>
            /// Enum ONDRAFT for value: ONDRAFT
            /// </summary>
            [EnumMember(Value = "ONDRAFT")]
            ONDRAFT = 3,

            /// <summary>
            /// Enum BILLED for value: BILLED
            /// </summary>
            [EnumMember(Value = "BILLED")]
            BILLED = 4,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 5
        }


        /// <summary>
        /// Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
        /// </summary>
        /// <value>Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// This will always be BILLABLEEXPENSE. More types may be added in future.
        /// </summary>
        /// <value>This will always be BILLABLEEXPENSE. More types may be added in future.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BILLABLEEXPENSE for value: BILLABLEEXPENSE
            /// </summary>
            [EnumMember(Value = "BILLABLEEXPENSE")]
            BILLABLEEXPENSE = 1
        }


        /// <summary>
        /// This will always be BILLABLEEXPENSE. More types may be added in future.
        /// </summary>
        /// <value>This will always be BILLABLEEXPENSE. More types may be added in future.</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
        /// </summary>
        /// <value>The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceTransactionTypeCodeEnum
        {
            /// <summary>
            /// Enum ACCPAY for value: ACCPAY
            /// </summary>
            [EnumMember(Value = "ACCPAY")]
            ACCPAY = 1,

            /// <summary>
            /// Enum SPEND for value: SPEND
            /// </summary>
            [EnumMember(Value = "SPEND")]
            SPEND = 2
        }


        /// <summary>
        /// The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
        /// </summary>
        /// <value>The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.</value>
        [DataMember(Name = "SourceTransactionTypeCode", EmitDefaultValue = false)]
        public SourceTransactionTypeCodeEnum? SourceTransactionTypeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedTransaction" /> class.
        /// </summary>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice.</param>
        /// <param name="sourceLineItemID">The line item identifier from the source transaction..</param>
        /// <param name="contactID">Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED..</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice.</param>
        /// <param name="targetLineItemID">The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID..</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9.</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED..</param>
        /// <param name="type">This will always be BILLABLEEXPENSE. More types may be added in future..</param>
        /// <param name="sourceTransactionTypeCode">The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction..</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public LinkedTransaction(Guid sourceTransactionID = default(Guid), Guid sourceLineItemID = default(Guid), Guid contactID = default(Guid), Guid targetTransactionID = default(Guid), Guid targetLineItemID = default(Guid), Guid linkedTransactionID = default(Guid), StatusEnum? status = default(StatusEnum?), TypeEnum? type = default(TypeEnum?), SourceTransactionTypeCodeEnum? sourceTransactionTypeCode = default(SourceTransactionTypeCodeEnum?), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            this.SourceTransactionID = sourceTransactionID;
            this.SourceLineItemID = sourceLineItemID;
            this.ContactID = contactID;
            this.TargetTransactionID = targetTransactionID;
            this.TargetLineItemID = targetLineItemID;
            this.LinkedTransactionID = linkedTransactionID;
            this.Status = status;
            this.Type = type;
            this.SourceTransactionTypeCode = sourceTransactionTypeCode;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice
        /// </summary>
        /// <value>Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice</value>
        [DataMember(Name = "SourceTransactionID", EmitDefaultValue = false)]
        public Guid SourceTransactionID { get; set; }

        /// <summary>
        /// The line item identifier from the source transaction.
        /// </summary>
        /// <value>The line item identifier from the source transaction.</value>
        [DataMember(Name = "SourceLineItemID", EmitDefaultValue = false)]
        public Guid SourceLineItemID { get; set; }

        /// <summary>
        /// Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.
        /// </summary>
        /// <value>Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED.</value>
        [DataMember(Name = "ContactID", EmitDefaultValue = false)]
        public Guid ContactID { get; set; }

        /// <summary>
        /// Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice
        /// </summary>
        /// <value>Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice</value>
        [DataMember(Name = "TargetTransactionID", EmitDefaultValue = false)]
        public Guid TargetTransactionID { get; set; }

        /// <summary>
        /// The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.
        /// </summary>
        /// <value>The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.</value>
        [DataMember(Name = "TargetLineItemID", EmitDefaultValue = false)]
        public Guid TargetLineItemID { get; set; }

        /// <summary>
        /// The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
        /// </summary>
        /// <value>The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        [DataMember(Name = "LinkedTransactionID", EmitDefaultValue = false)]
        public Guid LinkedTransactionID { get; set; }

        /// <summary>
        /// The last modified date in UTC format
        /// </summary>
        /// <value>The last modified date in UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkedTransaction {\n");
            sb.Append("  SourceTransactionID: ").Append(SourceTransactionID).Append("\n");
            sb.Append("  SourceLineItemID: ").Append(SourceLineItemID).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  TargetTransactionID: ").Append(TargetTransactionID).Append("\n");
            sb.Append("  TargetLineItemID: ").Append(TargetLineItemID).Append("\n");
            sb.Append("  LinkedTransactionID: ").Append(LinkedTransactionID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  SourceTransactionTypeCode: ").Append(SourceTransactionTypeCode).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
