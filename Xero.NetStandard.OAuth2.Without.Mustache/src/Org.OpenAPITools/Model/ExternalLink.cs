/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExternalLink
    /// </summary>
    [DataContract(Name = "ExternalLink")]
    public partial class ExternalLink : IValidatableObject
    {
        /// <summary>
        /// See External link types
        /// </summary>
        /// <value>See External link types</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LinkTypeEnum
        {
            /// <summary>
            /// Enum Facebook for value: Facebook
            /// </summary>
            [EnumMember(Value = "Facebook")]
            Facebook = 1,

            /// <summary>
            /// Enum GooglePlus for value: GooglePlus
            /// </summary>
            [EnumMember(Value = "GooglePlus")]
            GooglePlus = 2,

            /// <summary>
            /// Enum LinkedIn for value: LinkedIn
            /// </summary>
            [EnumMember(Value = "LinkedIn")]
            LinkedIn = 3,

            /// <summary>
            /// Enum Twitter for value: Twitter
            /// </summary>
            [EnumMember(Value = "Twitter")]
            Twitter = 4,

            /// <summary>
            /// Enum Website for value: Website
            /// </summary>
            [EnumMember(Value = "Website")]
            Website = 5
        }


        /// <summary>
        /// See External link types
        /// </summary>
        /// <value>See External link types</value>
        [DataMember(Name = "LinkType", EmitDefaultValue = false)]
        public LinkTypeEnum? LinkType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalLink" /> class.
        /// </summary>
        /// <param name="linkType">See External link types.</param>
        /// <param name="url">URL for service e.g. http://twitter.com/xeroapi.</param>
        /// <param name="description">description.</param>
        public ExternalLink(LinkTypeEnum? linkType = default(LinkTypeEnum?), string url = default(string), string description = default(string))
        {
            this.LinkType = linkType;
            this.Url = url;
            this.Description = description;
        }

        /// <summary>
        /// URL for service e.g. http://twitter.com/xeroapi
        /// </summary>
        /// <value>URL for service e.g. http://twitter.com/xeroapi</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalLink {\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
