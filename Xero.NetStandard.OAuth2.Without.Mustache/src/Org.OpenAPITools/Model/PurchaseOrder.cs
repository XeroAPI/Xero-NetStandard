/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PurchaseOrder
    /// </summary>
    [DataContract(Name = "PurchaseOrder")]
    public partial class PurchaseOrder : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public CurrencyCode? CurrencyCode { get; set; }
        /// <summary>
        /// See Purchase Order Status Codes
        /// </summary>
        /// <value>See Purchase Order Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 1,

            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            [EnumMember(Value = "SUBMITTED")]
            SUBMITTED = 2,

            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 3,

            /// <summary>
            /// Enum BILLED for value: BILLED
            /// </summary>
            [EnumMember(Value = "BILLED")]
            BILLED = 4,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 5
        }


        /// <summary>
        /// See Purchase Order Status Codes
        /// </summary>
        /// <value>See Purchase Order Status Codes</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrder" /> class.
        /// </summary>
        /// <param name="contact">contact.</param>
        /// <param name="lineItems">See LineItems.</param>
        /// <param name="date">Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation.</param>
        /// <param name="deliveryDate">Date the goods are to be delivered – YYYY-MM-DD.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="purchaseOrderNumber">Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings).</param>
        /// <param name="reference">Additional reference number.</param>
        /// <param name="brandingThemeID">See BrandingThemes.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="status">See Purchase Order Status Codes.</param>
        /// <param name="sentToContact">Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed.</param>
        /// <param name="deliveryAddress">The address the goods are to be delivered to.</param>
        /// <param name="attentionTo">The person that the delivery is going to.</param>
        /// <param name="telephone">The phone number for the person accepting the delivery.</param>
        /// <param name="deliveryInstructions">A free text feild for instructions (500 characters max).</param>
        /// <param name="expectedArrivalDate">The date the goods are expected to arrive..</param>
        /// <param name="purchaseOrderID">Xero generated unique identifier for purchase order.</param>
        /// <param name="currencyRate">The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used..</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        /// <param name="warnings">Displays array of warning messages from the API.</param>
        /// <param name="attachments">Displays array of attachments from the API.</param>
        public PurchaseOrder(Contact contact = default(Contact), List<LineItem> lineItems = default(List<LineItem>), string date = default(string), string deliveryDate = default(string), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), string purchaseOrderNumber = default(string), string reference = default(string), Guid brandingThemeID = default(Guid), CurrencyCode? currencyCode = default(CurrencyCode?), StatusEnum? status = default(StatusEnum?), bool sentToContact = default(bool), string deliveryAddress = default(string), string attentionTo = default(string), string telephone = default(string), string deliveryInstructions = default(string), string expectedArrivalDate = default(string), Guid purchaseOrderID = default(Guid), double currencyRate = default(double), string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>), List<ValidationError> warnings = default(List<ValidationError>), List<Attachment> attachments = default(List<Attachment>))
        {
            this.Contact = contact;
            this.LineItems = lineItems;
            this.Date = date;
            this.DeliveryDate = deliveryDate;
            this.LineAmountTypes = lineAmountTypes;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.Reference = reference;
            this.BrandingThemeID = brandingThemeID;
            this.CurrencyCode = currencyCode;
            this.Status = status;
            this.SentToContact = sentToContact;
            this.DeliveryAddress = deliveryAddress;
            this.AttentionTo = attentionTo;
            this.Telephone = telephone;
            this.DeliveryInstructions = deliveryInstructions;
            this.ExpectedArrivalDate = expectedArrivalDate;
            this.PurchaseOrderID = purchaseOrderID;
            this.CurrencyRate = currencyRate;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
            this.Warnings = warnings;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// See LineItems
        /// </summary>
        /// <value>See LineItems</value>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
        /// </summary>
        /// <value>Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Date the goods are to be delivered – YYYY-MM-DD
        /// </summary>
        /// <value>Date the goods are to be delivered – YYYY-MM-DD</value>
        [DataMember(Name = "DeliveryDate", EmitDefaultValue = false)]
        public string DeliveryDate { get; set; }

        /// <summary>
        /// Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
        /// </summary>
        /// <value>Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)</value>
        [DataMember(Name = "PurchaseOrderNumber", EmitDefaultValue = false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Additional reference number
        /// </summary>
        /// <value>Additional reference number</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// See BrandingThemes
        /// </summary>
        /// <value>See BrandingThemes</value>
        [DataMember(Name = "BrandingThemeID", EmitDefaultValue = false)]
        public Guid BrandingThemeID { get; set; }

        /// <summary>
        /// Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed
        /// </summary>
        /// <value>Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed</value>
        [DataMember(Name = "SentToContact", EmitDefaultValue = true)]
        public bool SentToContact { get; set; }

        /// <summary>
        /// The address the goods are to be delivered to
        /// </summary>
        /// <value>The address the goods are to be delivered to</value>
        [DataMember(Name = "DeliveryAddress", EmitDefaultValue = false)]
        public string DeliveryAddress { get; set; }

        /// <summary>
        /// The person that the delivery is going to
        /// </summary>
        /// <value>The person that the delivery is going to</value>
        [DataMember(Name = "AttentionTo", EmitDefaultValue = false)]
        public string AttentionTo { get; set; }

        /// <summary>
        /// The phone number for the person accepting the delivery
        /// </summary>
        /// <value>The phone number for the person accepting the delivery</value>
        [DataMember(Name = "Telephone", EmitDefaultValue = false)]
        public string Telephone { get; set; }

        /// <summary>
        /// A free text feild for instructions (500 characters max)
        /// </summary>
        /// <value>A free text feild for instructions (500 characters max)</value>
        [DataMember(Name = "DeliveryInstructions", EmitDefaultValue = false)]
        public string DeliveryInstructions { get; set; }

        /// <summary>
        /// The date the goods are expected to arrive.
        /// </summary>
        /// <value>The date the goods are expected to arrive.</value>
        [DataMember(Name = "ExpectedArrivalDate", EmitDefaultValue = false)]
        public string ExpectedArrivalDate { get; set; }

        /// <summary>
        /// Xero generated unique identifier for purchase order
        /// </summary>
        /// <value>Xero generated unique identifier for purchase order</value>
        [DataMember(Name = "PurchaseOrderID", EmitDefaultValue = false)]
        public Guid PurchaseOrderID { get; set; }

        /// <summary>
        /// The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.
        /// </summary>
        /// <value>The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// Total of purchase order excluding taxes
        /// </summary>
        /// <value>Total of purchase order excluding taxes</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; private set; }

        /// <summary>
        /// Returns false as SubTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubTotal()
        {
            return false;
        }
        /// <summary>
        /// Total tax on purchase order
        /// </summary>
        /// <value>Total tax on purchase order</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; private set; }

        /// <summary>
        /// Returns false as TotalTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalTax()
        {
            return false;
        }
        /// <summary>
        /// Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
        /// </summary>
        /// <value>Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; private set; }

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return false;
        }
        /// <summary>
        /// Total of discounts applied on the purchase order line items
        /// </summary>
        /// <value>Total of discounts applied on the purchase order line items</value>
        [DataMember(Name = "TotalDiscount", EmitDefaultValue = false)]
        public double TotalDiscount { get; private set; }

        /// <summary>
        /// Returns false as TotalDiscount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalDiscount()
        {
            return false;
        }
        /// <summary>
        /// boolean to indicate if a purchase order has an attachment
        /// </summary>
        /// <value>boolean to indicate if a purchase order has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// Last modified date UTC format
        /// </summary>
        /// <value>Last modified date UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Displays array of warning messages from the API
        /// </summary>
        /// <value>Displays array of warning messages from the API</value>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public List<ValidationError> Warnings { get; set; }

        /// <summary>
        /// Displays array of attachments from the API
        /// </summary>
        /// <value>Displays array of attachments from the API</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PurchaseOrder {\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  BrandingThemeID: ").Append(BrandingThemeID).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SentToContact: ").Append(SentToContact).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  AttentionTo: ").Append(AttentionTo).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  DeliveryInstructions: ").Append(DeliveryInstructions).Append("\n");
            sb.Append("  ExpectedArrivalDate: ").Append(ExpectedArrivalDate).Append("\n");
            sb.Append("  PurchaseOrderID: ").Append(PurchaseOrderID).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
