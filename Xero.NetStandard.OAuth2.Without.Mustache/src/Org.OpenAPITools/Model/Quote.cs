/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Quote
    /// </summary>
    [DataContract(Name = "Quote")]
    public partial class Quote : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public QuoteStatusCodes? Status { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = false)]
        public CurrencyCode? CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public QuoteLineAmountTypes? LineAmountTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Quote" /> class.
        /// </summary>
        /// <param name="quoteID">QuoteID GUID is automatically generated and is returned after create or GET..</param>
        /// <param name="quoteNumber">Unique alpha numeric code identifying a quote (Max Length &#x3D; 255).</param>
        /// <param name="reference">Additional reference number.</param>
        /// <param name="terms">Terms of the quote.</param>
        /// <param name="contact">contact.</param>
        /// <param name="lineItems">See LineItems.</param>
        /// <param name="date">Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation.</param>
        /// <param name="dateString">Date the quote was issued (YYYY-MM-DD).</param>
        /// <param name="expiryDate">Date the quote expires – YYYY-MM-DD..</param>
        /// <param name="expiryDateString">Date the quote expires – YYYY-MM-DD..</param>
        /// <param name="status">status.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="currencyRate">The currency rate for a multicurrency quote.</param>
        /// <param name="title">Title text for the quote.</param>
        /// <param name="summary">Summary text for the quote.</param>
        /// <param name="brandingThemeID">See BrandingThemes.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        public Quote(Guid quoteID = default(Guid), string quoteNumber = default(string), string reference = default(string), string terms = default(string), Contact contact = default(Contact), List<LineItem> lineItems = default(List<LineItem>), string date = default(string), string dateString = default(string), string expiryDate = default(string), string expiryDateString = default(string), QuoteStatusCodes? status = default(QuoteStatusCodes?), CurrencyCode? currencyCode = default(CurrencyCode?), double currencyRate = default(double), string title = default(string), string summary = default(string), Guid brandingThemeID = default(Guid), QuoteLineAmountTypes? lineAmountTypes = default(QuoteLineAmountTypes?), string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>))
        {
            this.QuoteID = quoteID;
            this.QuoteNumber = quoteNumber;
            this.Reference = reference;
            this.Terms = terms;
            this.Contact = contact;
            this.LineItems = lineItems;
            this.Date = date;
            this.DateString = dateString;
            this.ExpiryDate = expiryDate;
            this.ExpiryDateString = expiryDateString;
            this.Status = status;
            this.CurrencyCode = currencyCode;
            this.CurrencyRate = currencyRate;
            this.Title = title;
            this.Summary = summary;
            this.BrandingThemeID = brandingThemeID;
            this.LineAmountTypes = lineAmountTypes;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// QuoteID GUID is automatically generated and is returned after create or GET.
        /// </summary>
        /// <value>QuoteID GUID is automatically generated and is returned after create or GET.</value>
        [DataMember(Name = "QuoteID", EmitDefaultValue = false)]
        public Guid QuoteID { get; set; }

        /// <summary>
        /// Unique alpha numeric code identifying a quote (Max Length &#x3D; 255)
        /// </summary>
        /// <value>Unique alpha numeric code identifying a quote (Max Length &#x3D; 255)</value>
        [DataMember(Name = "QuoteNumber", EmitDefaultValue = false)]
        public string QuoteNumber { get; set; }

        /// <summary>
        /// Additional reference number
        /// </summary>
        /// <value>Additional reference number</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Terms of the quote
        /// </summary>
        /// <value>Terms of the quote</value>
        [DataMember(Name = "Terms", EmitDefaultValue = false)]
        public string Terms { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name = "Contact", EmitDefaultValue = false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// See LineItems
        /// </summary>
        /// <value>See LineItems</value>
        [DataMember(Name = "LineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
        /// </summary>
        /// <value>Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Date the quote was issued (YYYY-MM-DD)
        /// </summary>
        /// <value>Date the quote was issued (YYYY-MM-DD)</value>
        [DataMember(Name = "DateString", EmitDefaultValue = false)]
        public string DateString { get; set; }

        /// <summary>
        /// Date the quote expires – YYYY-MM-DD.
        /// </summary>
        /// <value>Date the quote expires – YYYY-MM-DD.</value>
        [DataMember(Name = "ExpiryDate", EmitDefaultValue = false)]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// Date the quote expires – YYYY-MM-DD.
        /// </summary>
        /// <value>Date the quote expires – YYYY-MM-DD.</value>
        [DataMember(Name = "ExpiryDateString", EmitDefaultValue = false)]
        public string ExpiryDateString { get; set; }

        /// <summary>
        /// The currency rate for a multicurrency quote
        /// </summary>
        /// <value>The currency rate for a multicurrency quote</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// Total of quote excluding taxes.
        /// </summary>
        /// <value>Total of quote excluding taxes.</value>
        [DataMember(Name = "SubTotal", EmitDefaultValue = false)]
        public double SubTotal { get; private set; }

        /// <summary>
        /// Returns false as SubTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubTotal()
        {
            return false;
        }
        /// <summary>
        /// Total tax on quote
        /// </summary>
        /// <value>Total tax on quote</value>
        [DataMember(Name = "TotalTax", EmitDefaultValue = false)]
        public double TotalTax { get; private set; }

        /// <summary>
        /// Returns false as TotalTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalTax()
        {
            return false;
        }
        /// <summary>
        /// Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
        /// </summary>
        /// <value>Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public double Total { get; private set; }

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return false;
        }
        /// <summary>
        /// Total of discounts applied on the quote line items
        /// </summary>
        /// <value>Total of discounts applied on the quote line items</value>
        [DataMember(Name = "TotalDiscount", EmitDefaultValue = false)]
        public double TotalDiscount { get; private set; }

        /// <summary>
        /// Returns false as TotalDiscount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalDiscount()
        {
            return false;
        }
        /// <summary>
        /// Title text for the quote
        /// </summary>
        /// <value>Title text for the quote</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Summary text for the quote
        /// </summary>
        /// <value>Summary text for the quote</value>
        [DataMember(Name = "Summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// See BrandingThemes
        /// </summary>
        /// <value>See BrandingThemes</value>
        [DataMember(Name = "BrandingThemeID", EmitDefaultValue = false)]
        public Guid BrandingThemeID { get; set; }

        /// <summary>
        /// Last modified date UTC format
        /// </summary>
        /// <value>Last modified date UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Quote {\n");
            sb.Append("  QuoteID: ").Append(QuoteID).Append("\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateString: ").Append(DateString).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  ExpiryDateString: ").Append(ExpiryDateString).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalDiscount: ").Append(TotalDiscount).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  BrandingThemeID: ").Append(BrandingThemeID).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // QuoteNumber (string) maxLength
            if (this.QuoteNumber != null && this.QuoteNumber.Length > 255)
            {
                yield return new ValidationResult("Invalid value for QuoteNumber, length must be less than 255.", new [] { "QuoteNumber" });
            }

            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 4000)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 4000.", new [] { "Reference" });
            }

            // Terms (string) maxLength
            if (this.Terms != null && this.Terms.Length > 4000)
            {
                yield return new ValidationResult("Invalid value for Terms, length must be less than 4000.", new [] { "Terms" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 100.", new [] { "Title" });
            }

            // Summary (string) maxLength
            if (this.Summary != null && this.Summary.Length > 3000)
            {
                yield return new ValidationResult("Invalid value for Summary, length must be less than 3000.", new [] { "Summary" });
            }

            yield break;
        }
    }

}
