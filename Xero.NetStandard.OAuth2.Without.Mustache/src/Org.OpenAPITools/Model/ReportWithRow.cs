/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ReportWithRow
    /// </summary>
    [DataContract(Name = "ReportWithRow")]
    public partial class ReportWithRow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportWithRow" /> class.
        /// </summary>
        /// <param name="reportID">ID of the Report.</param>
        /// <param name="reportName">Name of the report.</param>
        /// <param name="reportTitle">Title of the report.</param>
        /// <param name="reportType">The type of report (BalanceSheet,ProfitLoss, etc).</param>
        /// <param name="reportTitles">Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report).</param>
        /// <param name="reportDate">Date of report.</param>
        /// <param name="rows">rows.</param>
        /// <param name="fields">fields.</param>
        public ReportWithRow(string reportID = default(string), string reportName = default(string), string reportTitle = default(string), string reportType = default(string), List<string> reportTitles = default(List<string>), string reportDate = default(string), List<ReportRows> rows = default(List<ReportRows>), List<ReportFields> fields = default(List<ReportFields>))
        {
            this.ReportID = reportID;
            this.ReportName = reportName;
            this.ReportTitle = reportTitle;
            this.ReportType = reportType;
            this.ReportTitles = reportTitles;
            this.ReportDate = reportDate;
            this.Rows = rows;
            this.Fields = fields;
        }

        /// <summary>
        /// ID of the Report
        /// </summary>
        /// <value>ID of the Report</value>
        [DataMember(Name = "ReportID", EmitDefaultValue = false)]
        public string ReportID { get; set; }

        /// <summary>
        /// Name of the report
        /// </summary>
        /// <value>Name of the report</value>
        [DataMember(Name = "ReportName", EmitDefaultValue = false)]
        public string ReportName { get; set; }

        /// <summary>
        /// Title of the report
        /// </summary>
        /// <value>Title of the report</value>
        [DataMember(Name = "ReportTitle", EmitDefaultValue = false)]
        public string ReportTitle { get; set; }

        /// <summary>
        /// The type of report (BalanceSheet,ProfitLoss, etc)
        /// </summary>
        /// <value>The type of report (BalanceSheet,ProfitLoss, etc)</value>
        [DataMember(Name = "ReportType", EmitDefaultValue = false)]
        public string ReportType { get; set; }

        /// <summary>
        /// Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)
        /// </summary>
        /// <value>Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)</value>
        [DataMember(Name = "ReportTitles", EmitDefaultValue = false)]
        public List<string> ReportTitles { get; set; }

        /// <summary>
        /// Date of report
        /// </summary>
        /// <value>Date of report</value>
        [DataMember(Name = "ReportDate", EmitDefaultValue = false)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name = "Rows", EmitDefaultValue = false)]
        public List<ReportRows> Rows { get; set; }

        /// <summary>
        /// Updated Date
        /// </summary>
        /// <value>Updated Date</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "Fields", EmitDefaultValue = false)]
        public List<ReportFields> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportWithRow {\n");
            sb.Append("  ReportID: ").Append(ReportID).Append("\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  ReportTitle: ").Append(ReportTitle).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  ReportTitles: ").Append(ReportTitles).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
