/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TaxComponent
    /// </summary>
    [DataContract(Name = "TaxComponent")]
    public partial class TaxComponent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxComponent" /> class.
        /// </summary>
        /// <param name="name">Name of Tax Component.</param>
        /// <param name="rate">Tax Rate (up to 4dp).</param>
        /// <param name="isCompound">Boolean to describe if Tax rate is compounded..</param>
        /// <param name="isNonRecoverable">Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations.</param>
        public TaxComponent(string name = default(string), double rate = default(double), bool isCompound = default(bool), bool isNonRecoverable = default(bool))
        {
            this.Name = name;
            this.Rate = rate;
            this.IsCompound = isCompound;
            this.IsNonRecoverable = isNonRecoverable;
        }

        /// <summary>
        /// Name of Tax Component
        /// </summary>
        /// <value>Name of Tax Component</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Tax Rate (up to 4dp)
        /// </summary>
        /// <value>Tax Rate (up to 4dp)</value>
        [DataMember(Name = "Rate", EmitDefaultValue = false)]
        public double Rate { get; set; }

        /// <summary>
        /// Boolean to describe if Tax rate is compounded.
        /// </summary>
        /// <value>Boolean to describe if Tax rate is compounded.</value>
        [DataMember(Name = "IsCompound", EmitDefaultValue = true)]
        public bool IsCompound { get; set; }

        /// <summary>
        /// Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations
        /// </summary>
        /// <value>Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations</value>
        [DataMember(Name = "IsNonRecoverable", EmitDefaultValue = true)]
        public bool IsNonRecoverable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxComponent {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  IsCompound: ").Append(IsCompound).Append("\n");
            sb.Append("  IsNonRecoverable: ").Append(IsNonRecoverable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
