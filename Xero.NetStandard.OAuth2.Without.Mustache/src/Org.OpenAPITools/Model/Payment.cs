/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract(Name = "Payment")]
    public partial class Payment : IValidatableObject
    {
        /// <summary>
        /// The status of the payment.
        /// </summary>
        /// <value>The status of the payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AUTHORISED for value: AUTHORISED
            /// </summary>
            [EnumMember(Value = "AUTHORISED")]
            AUTHORISED = 1,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 2
        }


        /// <summary>
        /// The status of the payment.
        /// </summary>
        /// <value>The status of the payment.</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// See Payment Types.
        /// </summary>
        /// <value>See Payment Types.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeEnum
        {
            /// <summary>
            /// Enum ACCRECPAYMENT for value: ACCRECPAYMENT
            /// </summary>
            [EnumMember(Value = "ACCRECPAYMENT")]
            ACCRECPAYMENT = 1,

            /// <summary>
            /// Enum ACCPAYPAYMENT for value: ACCPAYPAYMENT
            /// </summary>
            [EnumMember(Value = "ACCPAYPAYMENT")]
            ACCPAYPAYMENT = 2,

            /// <summary>
            /// Enum ARCREDITPAYMENT for value: ARCREDITPAYMENT
            /// </summary>
            [EnumMember(Value = "ARCREDITPAYMENT")]
            ARCREDITPAYMENT = 3,

            /// <summary>
            /// Enum APCREDITPAYMENT for value: APCREDITPAYMENT
            /// </summary>
            [EnumMember(Value = "APCREDITPAYMENT")]
            APCREDITPAYMENT = 4,

            /// <summary>
            /// Enum AROVERPAYMENTPAYMENT for value: AROVERPAYMENTPAYMENT
            /// </summary>
            [EnumMember(Value = "AROVERPAYMENTPAYMENT")]
            AROVERPAYMENTPAYMENT = 5,

            /// <summary>
            /// Enum ARPREPAYMENTPAYMENT for value: ARPREPAYMENTPAYMENT
            /// </summary>
            [EnumMember(Value = "ARPREPAYMENTPAYMENT")]
            ARPREPAYMENTPAYMENT = 6,

            /// <summary>
            /// Enum APPREPAYMENTPAYMENT for value: APPREPAYMENTPAYMENT
            /// </summary>
            [EnumMember(Value = "APPREPAYMENTPAYMENT")]
            APPREPAYMENTPAYMENT = 7,

            /// <summary>
            /// Enum APOVERPAYMENTPAYMENT for value: APOVERPAYMENTPAYMENT
            /// </summary>
            [EnumMember(Value = "APOVERPAYMENTPAYMENT")]
            APOVERPAYMENTPAYMENT = 8
        }


        /// <summary>
        /// See Payment Types.
        /// </summary>
        /// <value>See Payment Types.</value>
        [DataMember(Name = "PaymentType", EmitDefaultValue = false)]
        public PaymentTypeEnum? PaymentType { get; set; }

        /// <summary>
        /// Returns false as PaymentType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentType()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="invoice">invoice.</param>
        /// <param name="creditNote">creditNote.</param>
        /// <param name="prepayment">prepayment.</param>
        /// <param name="overpayment">overpayment.</param>
        /// <param name="invoiceNumber">Number of invoice or credit note you are applying payment to e.g.INV-4003.</param>
        /// <param name="creditNoteNumber">Number of invoice or credit note you are applying payment to e.g. INV-4003.</param>
        /// <param name="batchPayment">batchPayment.</param>
        /// <param name="account">account.</param>
        /// <param name="code">Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value).</param>
        /// <param name="date">Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06.</param>
        /// <param name="currencyRate">Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500.</param>
        /// <param name="amount">The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00.</param>
        /// <param name="bankAmount">The amount of the payment in the currency of the bank account..</param>
        /// <param name="reference">An optional description for the payment e.g. Direct Debit.</param>
        /// <param name="isReconciled">An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET.</param>
        /// <param name="status">The status of the payment..</param>
        /// <param name="paymentID">The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9.</param>
        /// <param name="batchPaymentID">Present if the payment was created as part of a batch..</param>
        /// <param name="bankAccountNumber">The suppliers bank account number the payment is being made to.</param>
        /// <param name="particulars">The suppliers bank account number the payment is being made to.</param>
        /// <param name="details">The information to appear on the supplier&#39;s bank account.</param>
        /// <param name="hasAccount">A boolean to indicate if a contact has an validation errors (default to false).</param>
        /// <param name="hasValidationErrors">A boolean to indicate if a contact has an validation errors (default to false).</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        /// <param name="warnings">Displays array of warning messages from the API.</param>
        public Payment(Invoice invoice = default(Invoice), CreditNote creditNote = default(CreditNote), Prepayment prepayment = default(Prepayment), Overpayment overpayment = default(Overpayment), string invoiceNumber = default(string), string creditNoteNumber = default(string), BatchPayment batchPayment = default(BatchPayment), Account account = default(Account), string code = default(string), string date = default(string), double currencyRate = default(double), double amount = default(double), double bankAmount = default(double), string reference = default(string), bool isReconciled = default(bool), StatusEnum? status = default(StatusEnum?), Guid paymentID = default(Guid), Guid batchPaymentID = default(Guid), string bankAccountNumber = default(string), string particulars = default(string), string details = default(string), bool hasAccount = false, bool hasValidationErrors = false, string statusAttributeString = default(string), List<ValidationError> validationErrors = default(List<ValidationError>), List<ValidationError> warnings = default(List<ValidationError>))
        {
            this.Invoice = invoice;
            this.CreditNote = creditNote;
            this.Prepayment = prepayment;
            this.Overpayment = overpayment;
            this.InvoiceNumber = invoiceNumber;
            this.CreditNoteNumber = creditNoteNumber;
            this.BatchPayment = batchPayment;
            this.Account = account;
            this.Code = code;
            this.Date = date;
            this.CurrencyRate = currencyRate;
            this.Amount = amount;
            this.BankAmount = bankAmount;
            this.Reference = reference;
            this.IsReconciled = isReconciled;
            this.Status = status;
            this.PaymentID = paymentID;
            this.BatchPaymentID = batchPaymentID;
            this.BankAccountNumber = bankAccountNumber;
            this.Particulars = particulars;
            this.Details = details;
            this.HasAccount = hasAccount;
            this.HasValidationErrors = hasValidationErrors;
            this.StatusAttributeString = statusAttributeString;
            this.ValidationErrors = validationErrors;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Invoice
        /// </summary>
        [DataMember(Name = "Invoice", EmitDefaultValue = false)]
        public Invoice Invoice { get; set; }

        /// <summary>
        /// Gets or Sets CreditNote
        /// </summary>
        [DataMember(Name = "CreditNote", EmitDefaultValue = false)]
        public CreditNote CreditNote { get; set; }

        /// <summary>
        /// Gets or Sets Prepayment
        /// </summary>
        [DataMember(Name = "Prepayment", EmitDefaultValue = false)]
        public Prepayment Prepayment { get; set; }

        /// <summary>
        /// Gets or Sets Overpayment
        /// </summary>
        [DataMember(Name = "Overpayment", EmitDefaultValue = false)]
        public Overpayment Overpayment { get; set; }

        /// <summary>
        /// Number of invoice or credit note you are applying payment to e.g.INV-4003
        /// </summary>
        /// <value>Number of invoice or credit note you are applying payment to e.g.INV-4003</value>
        [DataMember(Name = "InvoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Number of invoice or credit note you are applying payment to e.g. INV-4003
        /// </summary>
        /// <value>Number of invoice or credit note you are applying payment to e.g. INV-4003</value>
        [DataMember(Name = "CreditNoteNumber", EmitDefaultValue = false)]
        public string CreditNoteNumber { get; set; }

        /// <summary>
        /// Gets or Sets BatchPayment
        /// </summary>
        [DataMember(Name = "BatchPayment", EmitDefaultValue = false)]
        public BatchPayment BatchPayment { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "Account", EmitDefaultValue = false)]
        public Account Account { get; set; }

        /// <summary>
        /// Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)
        /// </summary>
        /// <value>Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)</value>
        [DataMember(Name = "Code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
        /// </summary>
        /// <value>Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
        /// </summary>
        /// <value>Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500</value>
        [DataMember(Name = "CurrencyRate", EmitDefaultValue = false)]
        public double CurrencyRate { get; set; }

        /// <summary>
        /// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
        /// </summary>
        /// <value>The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// The amount of the payment in the currency of the bank account.
        /// </summary>
        /// <value>The amount of the payment in the currency of the bank account.</value>
        [DataMember(Name = "BankAmount", EmitDefaultValue = false)]
        public double BankAmount { get; set; }

        /// <summary>
        /// An optional description for the payment e.g. Direct Debit
        /// </summary>
        /// <value>An optional description for the payment e.g. Direct Debit</value>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
        /// </summary>
        /// <value>An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET</value>
        [DataMember(Name = "IsReconciled", EmitDefaultValue = true)]
        public bool IsReconciled { get; set; }

        /// <summary>
        /// UTC timestamp of last update to the payment
        /// </summary>
        /// <value>UTC timestamp of last update to the payment</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
        /// </summary>
        /// <value>The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "PaymentID", EmitDefaultValue = false)]
        public Guid PaymentID { get; set; }

        /// <summary>
        /// Present if the payment was created as part of a batch.
        /// </summary>
        /// <value>Present if the payment was created as part of a batch.</value>
        /// <example>00000000-0000-0000-0000-000000000000</example>
        [DataMember(Name = "BatchPaymentID", EmitDefaultValue = false)]
        public Guid BatchPaymentID { get; set; }

        /// <summary>
        /// The suppliers bank account number the payment is being made to
        /// </summary>
        /// <value>The suppliers bank account number the payment is being made to</value>
        [DataMember(Name = "BankAccountNumber", EmitDefaultValue = false)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// The suppliers bank account number the payment is being made to
        /// </summary>
        /// <value>The suppliers bank account number the payment is being made to</value>
        [DataMember(Name = "Particulars", EmitDefaultValue = false)]
        public string Particulars { get; set; }

        /// <summary>
        /// The information to appear on the supplier&#39;s bank account
        /// </summary>
        /// <value>The information to appear on the supplier&#39;s bank account</value>
        [DataMember(Name = "Details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// A boolean to indicate if a contact has an validation errors
        /// </summary>
        /// <value>A boolean to indicate if a contact has an validation errors</value>
        /// <example>false</example>
        [DataMember(Name = "HasAccount", EmitDefaultValue = true)]
        public bool HasAccount { get; set; }

        /// <summary>
        /// A boolean to indicate if a contact has an validation errors
        /// </summary>
        /// <value>A boolean to indicate if a contact has an validation errors</value>
        /// <example>false</example>
        [DataMember(Name = "HasValidationErrors", EmitDefaultValue = true)]
        public bool HasValidationErrors { get; set; }

        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Displays array of warning messages from the API
        /// </summary>
        /// <value>Displays array of warning messages from the API</value>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public List<ValidationError> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  CreditNote: ").Append(CreditNote).Append("\n");
            sb.Append("  Prepayment: ").Append(Prepayment).Append("\n");
            sb.Append("  Overpayment: ").Append(Overpayment).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  CreditNoteNumber: ").Append(CreditNoteNumber).Append("\n");
            sb.Append("  BatchPayment: ").Append(BatchPayment).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BankAmount: ").Append(BankAmount).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  IsReconciled: ").Append(IsReconciled).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  PaymentID: ").Append(PaymentID).Append("\n");
            sb.Append("  BatchPaymentID: ").Append(BatchPaymentID).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  Particulars: ").Append(Particulars).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  HasAccount: ").Append(HasAccount).Append("\n");
            sb.Append("  HasValidationErrors: ").Append(HasValidationErrors).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
