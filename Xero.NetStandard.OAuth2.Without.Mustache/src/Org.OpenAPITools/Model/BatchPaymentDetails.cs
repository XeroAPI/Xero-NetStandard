/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Bank details for use on a batch payment stored with each contact
    /// </summary>
    [DataContract(Name = "BatchPaymentDetails")]
    public partial class BatchPaymentDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchPaymentDetails" /> class.
        /// </summary>
        /// <param name="bankAccountNumber">Bank account number for use with Batch Payments.</param>
        /// <param name="bankAccountName">Name of bank for use with Batch Payments.</param>
        /// <param name="details">(Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18.</param>
        /// <param name="code">(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero..</param>
        /// <param name="reference">(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero..</param>
        public BatchPaymentDetails(string bankAccountNumber = default(string), string bankAccountName = default(string), string details = default(string), string code = default(string), string reference = default(string))
        {
            this.BankAccountNumber = bankAccountNumber;
            this.BankAccountName = bankAccountName;
            this.Details = details;
            this.Code = code;
            this.Reference = reference;
        }

        /// <summary>
        /// Bank account number for use with Batch Payments
        /// </summary>
        /// <value>Bank account number for use with Batch Payments</value>
        /// <example>123-456-1111111</example>
        [DataMember(Name = "BankAccountNumber", EmitDefaultValue = false)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Name of bank for use with Batch Payments
        /// </summary>
        /// <value>Name of bank for use with Batch Payments</value>
        /// <example>ACME Bank</example>
        [DataMember(Name = "BankAccountName", EmitDefaultValue = false)]
        public string BankAccountName { get; set; }

        /// <summary>
        /// (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18
        /// </summary>
        /// <value>(Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length &#x3D; 18</value>
        /// <example>Hello World</example>
        [DataMember(Name = "Details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
        /// </summary>
        /// <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        /// <example>ABC</example>
        [DataMember(Name = "Code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
        /// </summary>
        /// <value>(NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find &amp; Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.</value>
        /// <example>Foobar</example>
        [DataMember(Name = "Reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchPaymentDetails {\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankAccountName: ").Append(BankAccountName).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 12)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 12.", new [] { "Code" });
            }

            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 12)
            {
                yield return new ValidationResult("Invalid value for Reference, length must be less than 12.", new [] { "Reference" });
            }

            yield break;
        }
    }

}
