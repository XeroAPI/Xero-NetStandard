/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A summary of the accounts changes
    /// </summary>
    [DataContract(Name = "ImportSummaryAccounts")]
    public partial class ImportSummaryAccounts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportSummaryAccounts" /> class.
        /// </summary>
        /// <param name="total">The total number of accounts in the org.</param>
        /// <param name="varNew">The number of new accounts created.</param>
        /// <param name="updated">The number of accounts updated.</param>
        /// <param name="deleted">The number of accounts deleted.</param>
        /// <param name="locked">The number of locked accounts.</param>
        /// <param name="varSystem">The number of system accounts.</param>
        /// <param name="errored">The number of accounts that had an error.</param>
        /// <param name="present">present.</param>
        /// <param name="newOrUpdated">The number of new or updated accounts.</param>
        public ImportSummaryAccounts(int total = default(int), int varNew = default(int), int updated = default(int), int deleted = default(int), int locked = default(int), int varSystem = default(int), int errored = default(int), bool present = default(bool), int newOrUpdated = default(int))
        {
            this.Total = total;
            this.New = varNew;
            this.Updated = updated;
            this.Deleted = deleted;
            this.Locked = locked;
            this.System = varSystem;
            this.Errored = errored;
            this.Present = present;
            this.NewOrUpdated = newOrUpdated;
        }

        /// <summary>
        /// The total number of accounts in the org
        /// </summary>
        /// <value>The total number of accounts in the org</value>
        [DataMember(Name = "Total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// The number of new accounts created
        /// </summary>
        /// <value>The number of new accounts created</value>
        [DataMember(Name = "New", EmitDefaultValue = false)]
        public int New { get; set; }

        /// <summary>
        /// The number of accounts updated
        /// </summary>
        /// <value>The number of accounts updated</value>
        [DataMember(Name = "Updated", EmitDefaultValue = false)]
        public int Updated { get; set; }

        /// <summary>
        /// The number of accounts deleted
        /// </summary>
        /// <value>The number of accounts deleted</value>
        [DataMember(Name = "Deleted", EmitDefaultValue = false)]
        public int Deleted { get; set; }

        /// <summary>
        /// The number of locked accounts
        /// </summary>
        /// <value>The number of locked accounts</value>
        [DataMember(Name = "Locked", EmitDefaultValue = false)]
        public int Locked { get; set; }

        /// <summary>
        /// The number of system accounts
        /// </summary>
        /// <value>The number of system accounts</value>
        [DataMember(Name = "System", EmitDefaultValue = false)]
        public int System { get; set; }

        /// <summary>
        /// The number of accounts that had an error
        /// </summary>
        /// <value>The number of accounts that had an error</value>
        [DataMember(Name = "Errored", EmitDefaultValue = false)]
        public int Errored { get; set; }

        /// <summary>
        /// Gets or Sets Present
        /// </summary>
        [DataMember(Name = "Present", EmitDefaultValue = true)]
        public bool Present { get; set; }

        /// <summary>
        /// The number of new or updated accounts
        /// </summary>
        /// <value>The number of new or updated accounts</value>
        [DataMember(Name = "NewOrUpdated", EmitDefaultValue = false)]
        public int NewOrUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportSummaryAccounts {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  New: ").Append(New).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Errored: ").Append(Errored).Append("\n");
            sb.Append("  Present: ").Append(Present).Append("\n");
            sb.Append("  NewOrUpdated: ").Append(NewOrUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
