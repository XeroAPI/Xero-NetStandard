/*
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.1.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ManualJournal
    /// </summary>
    [DataContract(Name = "ManualJournal")]
    public partial class ManualJournal : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LineAmountTypes
        /// </summary>
        [DataMember(Name = "LineAmountTypes", EmitDefaultValue = false)]
        public LineAmountTypes? LineAmountTypes { get; set; }
        /// <summary>
        /// See Manual Journal Status Codes
        /// </summary>
        /// <value>See Manual Journal Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 1,

            /// <summary>
            /// Enum POSTED for value: POSTED
            /// </summary>
            [EnumMember(Value = "POSTED")]
            POSTED = 2,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 3,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 4,

            /// <summary>
            /// Enum ARCHIVED for value: ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVED = 5
        }


        /// <summary>
        /// See Manual Journal Status Codes
        /// </summary>
        /// <value>See Manual Journal Status Codes</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManualJournal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournal" /> class.
        /// </summary>
        /// <param name="narration">Description of journal being posted (required).</param>
        /// <param name="journalLines">See JournalLines.</param>
        /// <param name="date">Date journal was posted – YYYY-MM-DD.</param>
        /// <param name="lineAmountTypes">lineAmountTypes.</param>
        /// <param name="status">See Manual Journal Status Codes.</param>
        /// <param name="url">Url link to a source document – shown as “Go to [appName]” in the Xero app.</param>
        /// <param name="showOnCashBasisReports">Boolean – default is true if not specified.</param>
        /// <param name="manualJournalID">The Xero identifier for a Manual Journal.</param>
        /// <param name="statusAttributeString">A string to indicate if a invoice status.</param>
        /// <param name="warnings">Displays array of warning messages from the API.</param>
        /// <param name="validationErrors">Displays array of validation error messages from the API.</param>
        /// <param name="attachments">Displays array of attachments from the API.</param>
        public ManualJournal(string narration = default(string), List<ManualJournalLine> journalLines = default(List<ManualJournalLine>), string date = default(string), LineAmountTypes? lineAmountTypes = default(LineAmountTypes?), StatusEnum? status = default(StatusEnum?), string url = default(string), bool showOnCashBasisReports = default(bool), Guid manualJournalID = default(Guid), string statusAttributeString = default(string), List<ValidationError> warnings = default(List<ValidationError>), List<ValidationError> validationErrors = default(List<ValidationError>), List<Attachment> attachments = default(List<Attachment>))
        {
            // to ensure "narration" is required (not null)
            if (narration == null)
            {
                throw new ArgumentNullException("narration is a required property for ManualJournal and cannot be null");
            }
            this.Narration = narration;
            this.JournalLines = journalLines;
            this.Date = date;
            this.LineAmountTypes = lineAmountTypes;
            this.Status = status;
            this.Url = url;
            this.ShowOnCashBasisReports = showOnCashBasisReports;
            this.ManualJournalID = manualJournalID;
            this.StatusAttributeString = statusAttributeString;
            this.Warnings = warnings;
            this.ValidationErrors = validationErrors;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Description of journal being posted
        /// </summary>
        /// <value>Description of journal being posted</value>
        [DataMember(Name = "Narration", IsRequired = true, EmitDefaultValue = true)]
        public string Narration { get; set; }

        /// <summary>
        /// See JournalLines
        /// </summary>
        /// <value>See JournalLines</value>
        [DataMember(Name = "JournalLines", EmitDefaultValue = false)]
        public List<ManualJournalLine> JournalLines { get; set; }

        /// <summary>
        /// Date journal was posted – YYYY-MM-DD
        /// </summary>
        /// <value>Date journal was posted – YYYY-MM-DD</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Url link to a source document – shown as “Go to [appName]” in the Xero app
        /// </summary>
        /// <value>Url link to a source document – shown as “Go to [appName]” in the Xero app</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Boolean – default is true if not specified
        /// </summary>
        /// <value>Boolean – default is true if not specified</value>
        [DataMember(Name = "ShowOnCashBasisReports", EmitDefaultValue = true)]
        public bool ShowOnCashBasisReports { get; set; }

        /// <summary>
        /// Boolean to indicate if a manual journal has an attachment
        /// </summary>
        /// <value>Boolean to indicate if a manual journal has an attachment</value>
        /// <example>false</example>
        [DataMember(Name = "HasAttachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; private set; }

        /// <summary>
        /// Returns false as HasAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasAttachments()
        {
            return false;
        }
        /// <summary>
        /// Last modified date UTC format
        /// </summary>
        /// <value>Last modified date UTC format</value>
        /// <example>/Date(1573755038314)/</example>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public string UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Returns false as UpdatedDateUTC should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedDateUTC()
        {
            return false;
        }
        /// <summary>
        /// The Xero identifier for a Manual Journal
        /// </summary>
        /// <value>The Xero identifier for a Manual Journal</value>
        [DataMember(Name = "ManualJournalID", EmitDefaultValue = false)]
        public Guid ManualJournalID { get; set; }

        /// <summary>
        /// A string to indicate if a invoice status
        /// </summary>
        /// <value>A string to indicate if a invoice status</value>
        /// <example>ERROR</example>
        [DataMember(Name = "StatusAttributeString", EmitDefaultValue = false)]
        public string StatusAttributeString { get; set; }

        /// <summary>
        /// Displays array of warning messages from the API
        /// </summary>
        /// <value>Displays array of warning messages from the API</value>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public List<ValidationError> Warnings { get; set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Displays array of attachments from the API
        /// </summary>
        /// <value>Displays array of attachments from the API</value>
        [DataMember(Name = "Attachments", EmitDefaultValue = false)]
        public List<Attachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManualJournal {\n");
            sb.Append("  Narration: ").Append(Narration).Append("\n");
            sb.Append("  JournalLines: ").Append(JournalLines).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  LineAmountTypes: ").Append(LineAmountTypes).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ShowOnCashBasisReports: ").Append(ShowOnCashBasisReports).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  ManualJournalID: ").Append(ManualJournalID).Append("\n");
            sb.Append("  StatusAttributeString: ").Append(StatusAttributeString).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
