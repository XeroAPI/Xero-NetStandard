/* 
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Model;

namespace Xero.NetStandard.OAuth2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Allows you to create a new chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Request of type Account</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> CreateAccountAsync (string accessToken, string xeroTenantId, Account account);

        /// <summary>
        /// Allows you to create a new chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Request of type Account</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> CreateAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Account account);
        /// <summary>
        /// Allows you to create Attachment on Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateAccountAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to create Attachment on Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateAccountAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to create a spend or receive money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">response format that shows validation errors for each bank transaction (optional)</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> CreateBankTransactionAsync (string accessToken, string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = null);

        /// <summary>
        /// Allows you to create a spend or receive money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">response format that shows validation errors for each bank transaction (optional)</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> CreateBankTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = null);
        /// <summary>
        /// Allows you to createa an Attachment on BankTransaction by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateBankTransactionAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to createa an Attachment on BankTransaction by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateBankTransactionAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to create history record for a bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateBankTransactionHistoryRecordAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create history record for a bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateBankTransactionHistoryRecordAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create a bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers"></param>
        /// <returns>Task of BankTransfers</returns>
        System.Threading.Tasks.Task<BankTransfers> CreateBankTransferAsync (string accessToken, string xeroTenantId, BankTransfers bankTransfers);

        /// <summary>
        /// Allows you to create a bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers"></param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransfers>> CreateBankTransferAsyncWithHttpInfo (string accessToken, string xeroTenantId, BankTransfers bankTransfers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateBankTransferAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateBankTransferAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateBankTransferHistoryRecordAsync (string accessToken, string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateBankTransferHistoryRecordAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords);
        /// <summary>
        /// Create one or many BatchPayments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">Request of type BatchPayments containing a Payments array with one or more Payment objects</param>
        /// <returns>Task of BatchPayments</returns>
        System.Threading.Tasks.Task<BatchPayments> CreateBatchPaymentAsync (string accessToken, string xeroTenantId, BatchPayments batchPayments);

        /// <summary>
        /// Create one or many BatchPayments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">Request of type BatchPayments containing a Payments array with one or more Payment objects</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPayments>> CreateBatchPaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, BatchPayments batchPayments);
        /// <summary>
        /// Allows you to create a history record for a Batch Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateBatchPaymentHistoryRecordAsync (string accessToken, string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create a history record for a Batch Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateBatchPaymentHistoryRecordAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords);
        /// <summary>
        /// Allow for the creation of new custom payment service for specified Branding Theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentService"></param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> CreateBrandingThemePaymentServicesAsync (string accessToken, string xeroTenantId, Guid brandingThemeID, PaymentService paymentService);

        /// <summary>
        /// Allow for the creation of new custom payment service for specified Branding Theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentService"></param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> CreateBrandingThemePaymentServicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid brandingThemeID, PaymentService paymentService);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contact"></param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> CreateContactAsync (string accessToken, string xeroTenantId, Contact contact);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contact"></param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> CreateContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Contact contact);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateContactAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateContactAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to create a contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">an array of contact groups with names specified</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> CreateContactGroupAsync (string accessToken, string xeroTenantId, ContactGroups contactGroups);

        /// <summary>
        /// Allows you to create a contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">an array of contact groups with names specified</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> CreateContactGroupAsyncWithHttpInfo (string accessToken, string xeroTenantId, ContactGroups contactGroups);
        /// <summary>
        /// Allows you to add Contacts to a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">an array of contacts with ContactID to be added to ContactGroup</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> CreateContactGroupContactsAsync (string accessToken, string xeroTenantId, Guid contactGroupID, Contacts contacts);

        /// <summary>
        /// Allows you to add Contacts to a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">an array of contacts with ContactID to be added to ContactGroup</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> CreateContactGroupContactsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID, Contacts contacts);
        /// <summary>
        /// Allows you to retrieve a history records of an Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateContactHistoryAsync (string accessToken, string xeroTenantId, Guid contactID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to retrieve a history records of an Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateContactHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create a credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">shows validation errors for each credit note (optional)</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> CreateCreditNoteAsync (string accessToken, string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = null);

        /// <summary>
        /// Allows you to create a credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">shows validation errors for each credit note (optional)</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> CreateCreditNoteAsyncWithHttpInfo (string accessToken, string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = null);
        /// <summary>
        /// Allows you to create Allocation on CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">an array of Allocations with single Allocation object defined.</param>
        /// <returns>Task of Allocations</returns>
        System.Threading.Tasks.Task<Allocations> CreateCreditNoteAllocationAsync (string accessToken, string xeroTenantId, Guid creditNoteID, Allocations allocations);

        /// <summary>
        /// Allows you to create Allocation on CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">an array of Allocations with single Allocation object defined.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocations>> CreateCreditNoteAllocationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, Allocations allocations);
        /// <summary>
        /// Allows you to create Attachments on CreditNote by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateCreditNoteAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to create Attachments on CreditNote by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateCreditNoteAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateCreditNoteHistoryAsync (string accessToken, string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateCreditNoteHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency"></param>
        /// <returns>Task of Currencies</returns>
        System.Threading.Tasks.Task<Currencies> CreateCurrencyAsync (string accessToken, string xeroTenantId, Currency currency);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        System.Threading.Tasks.Task<ApiResponse<Currencies>> CreateCurrencyAsyncWithHttpInfo (string accessToken, string xeroTenantId, Currency currency);
        /// <summary>
        /// Allows you to create new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees"></param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> CreateEmployeeAsync (string accessToken, string xeroTenantId, Employees employees);

        /// <summary>
        /// Allows you to create new employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees"></param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Employees employees);
        /// <summary>
        /// Allows you to retrieve expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims"></param>
        /// <param name="summarizeErrors">shows validation errors for each expense claim (optional)</param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> CreateExpenseClaimAsync (string accessToken, string xeroTenantId, ExpenseClaims expenseClaims, bool? summarizeErrors = null);

        /// <summary>
        /// Allows you to retrieve expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims"></param>
        /// <param name="summarizeErrors">shows validation errors for each expense claim (optional)</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> CreateExpenseClaimAsyncWithHttpInfo (string accessToken, string xeroTenantId, ExpenseClaims expenseClaims, bool? summarizeErrors = null);
        /// <summary>
        /// Allows you to create a history records of an ExpenseClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateExpenseClaimHistoryAsync (string accessToken, string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create a history records of an ExpenseClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateExpenseClaimHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create any sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">shows validation errors for each invoice (optional)</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> CreateInvoiceAsync (string accessToken, string xeroTenantId, Invoices invoices, bool? summarizeErrors = null);

        /// <summary>
        /// Allows you to create any sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">shows validation errors for each invoice (optional)</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> CreateInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Invoices invoices, bool? summarizeErrors = null);
        /// <summary>
        /// Allows you to create an Attachment on invoices or purchase bills by it&#39;s filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to create an Attachment on invoices or purchase bills by it&#39;s filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to retrieve a history records of an invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to retrieve a history records of an invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create an item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> CreateItemAsync (string accessToken, string xeroTenantId, Items items);

        /// <summary>
        /// Allows you to create an item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> CreateItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Items items);
        /// <summary>
        /// Allows you to create a history record for items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateItemHistoryAsync (string accessToken, string xeroTenantId, Guid itemID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create a history record for items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateItemHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> CreateLinkedTransactionAsync (string accessToken, string xeroTenantId, LinkedTransactions linkedTransactions);

        /// <summary>
        /// Allows you to create linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> CreateLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, LinkedTransactions linkedTransactions);
        /// <summary>
        /// Allows you to create a manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> CreateManualJournalAsync (string accessToken, string xeroTenantId, ManualJournals manualJournals);

        /// <summary>
        /// Allows you to create a manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> CreateManualJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, ManualJournals manualJournals);
        /// <summary>
        /// Allows you to create a specified Attachment on ManualJournal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateManualJournalAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to create a specified Attachment on ManualJournal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateManualJournalAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to retrieve Allocations for overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations"></param>
        /// <returns>Task of Allocations</returns>
        System.Threading.Tasks.Task<Allocations> CreateOverpaymentAllocationAsync (string accessToken, string xeroTenantId, Guid overpaymentID, Allocations allocations);

        /// <summary>
        /// Allows you to retrieve Allocations for overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations"></param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocations>> CreateOverpaymentAllocationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID, Allocations allocations);
        /// <summary>
        /// Allows you to create history records of an Overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateOverpaymentHistoryAsync (string accessToken, string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create history records of an Overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateOverpaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create payments for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments"></param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> CreatePaymentAsync (string accessToken, string xeroTenantId, Payments payments);

        /// <summary>
        /// Allows you to create payments for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments"></param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> CreatePaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Payments payments);
        /// <summary>
        /// Allows you to create a history record for a payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreatePaymentHistoryAsync (string accessToken, string xeroTenantId, Guid paymentID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create a history record for a payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreatePaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create payment services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices"></param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> CreatePaymentServiceAsync (string accessToken, string xeroTenantId, PaymentServices paymentServices);

        /// <summary>
        /// Allows you to create payment services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices"></param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> CreatePaymentServiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, PaymentServices paymentServices);
        /// <summary>
        /// Allows you to create an Allocation for prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID"></param>
        /// <param name="allocations"></param>
        /// <returns>Task of Allocations</returns>
        System.Threading.Tasks.Task<Allocations> CreatePrepaymentAllocationAsync (string accessToken, string xeroTenantId, Guid prepaymentID, Allocations allocations);

        /// <summary>
        /// Allows you to create an Allocation for prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID"></param>
        /// <param name="allocations"></param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocations>> CreatePrepaymentAllocationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID, Allocations allocations);
        /// <summary>
        /// Allows you to create a history record for an Prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreatePrepaymentHistoryAsync (string accessToken, string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create a history record for an Prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreatePrepaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">shows validation errors for each purchase order. (optional)</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> CreatePurchaseOrderAsync (string accessToken, string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = null);

        /// <summary>
        /// Allows you to create purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">shows validation errors for each purchase order. (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> CreatePurchaseOrderAsyncWithHttpInfo (string accessToken, string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = null);
        /// <summary>
        /// Allows you to create HistoryRecord for purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreatePurchaseOrderHistoryAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create HistoryRecord for purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreatePurchaseOrderHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts"></param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> CreateReceiptAsync (string accessToken, string xeroTenantId, Receipts receipts);

        /// <summary>
        /// Allows you to create draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts"></param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> CreateReceiptAsyncWithHttpInfo (string accessToken, string xeroTenantId, Receipts receipts);
        /// <summary>
        /// Allows you to create Attachment on expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateReceiptAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to create Attachment on expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateReceiptAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to retrieve a history records of an Receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateReceiptHistoryAsync (string accessToken, string xeroTenantId, Guid receiptID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to retrieve a history records of an Receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateReceiptHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create attachment on repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> CreateRepeatingInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to create attachment on repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> CreateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to create history for a repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> CreateRepeatingInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords);

        /// <summary>
        /// Allows you to create history for a repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> CreateRepeatingInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords);
        /// <summary>
        /// Allows you to create Tax Rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> CreateTaxRateAsync (string accessToken, string xeroTenantId, TaxRates taxRates);

        /// <summary>
        /// Allows you to create Tax Rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> CreateTaxRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, TaxRates taxRates);
        /// <summary>
        /// Allows you to create tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> CreateTrackingCategoryAsync (string accessToken, string xeroTenantId, TrackingCategory trackingCategory);

        /// <summary>
        /// Allows you to create tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> CreateTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, TrackingCategory trackingCategory);
        /// <summary>
        /// Allows you to create options for a specified tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption"></param>
        /// <returns>Task of TrackingOptions</returns>
        System.Threading.Tasks.Task<TrackingOptions> CreateTrackingOptionsAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption);

        /// <summary>
        /// Allows you to create options for a specified tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption"></param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingOptions>> CreateTrackingOptionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption);
        /// <summary>
        /// Allows you to delete a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> DeleteAccountAsync (string accessToken, string xeroTenantId, Guid accountID);

        /// <summary>
        /// Allows you to delete a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> DeleteAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID);
        /// <summary>
        /// Allows you to delete a specific Contact from a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactGroupContactAsync (string accessToken, string xeroTenantId, Guid contactGroupID, Guid contactID);

        /// <summary>
        /// Allows you to delete a specific Contact from a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactGroupContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID, Guid contactID);
        /// <summary>
        /// Allows you to delete  all Contacts from a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactGroupContactsAsync (string accessToken, string xeroTenantId, Guid contactGroupID);

        /// <summary>
        /// Allows you to delete  all Contacts from a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactGroupContactsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID);
        /// <summary>
        /// Allows you to delete a specified item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemAsync (string accessToken, string xeroTenantId, Guid itemID);

        /// <summary>
        /// Allows you to delete a specified item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID);
        /// <summary>
        /// Allows you to delete a specified linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLinkedTransactionAsync (string accessToken, string xeroTenantId, Guid linkedTransactionID);

        /// <summary>
        /// Allows you to delete a specified linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid linkedTransactionID);
        /// <summary>
        /// Allows you to update a specified payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="payments"></param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> DeletePaymentAsync (string accessToken, string xeroTenantId, Guid paymentID, Payments payments);

        /// <summary>
        /// Allows you to update a specified payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="payments"></param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> DeletePaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID, Payments payments);
        /// <summary>
        /// Allows you to delete tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> DeleteTrackingCategoryAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID);

        /// <summary>
        /// Allows you to delete tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> DeleteTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID);
        /// <summary>
        /// Allows you to delete a specified option for a specified tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <returns>Task of TrackingOptions</returns>
        System.Threading.Tasks.Task<TrackingOptions> DeleteTrackingOptionsAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID);

        /// <summary>
        /// Allows you to delete a specified option for a specified tracking category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingOptions>> DeleteTrackingOptionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID);
        /// <summary>
        /// Allows you to email a copy of invoice to related Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmailInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty);

        /// <summary>
        /// Allows you to email a copy of invoice to related Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmailInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty);
        /// <summary>
        /// Allows you to retrieve a single chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> GetAccountAsync (string accessToken, string xeroTenantId, Guid accountID);

        /// <summary>
        /// Allows you to retrieve a single chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> GetAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID);
        /// <summary>
        /// Allows you to retrieve Attachment on Account by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid accountID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachment on Account by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAccountAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve specific Attachment on Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid accountID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve specific Attachment on Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetAccountAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments for accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetAccountAttachmentsAsync (string accessToken, string xeroTenantId, Guid accountID);

        /// <summary>
        /// Allows you to retrieve Attachments for accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetAccountAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID);
        /// <summary>
        /// Allows you to retrieve the full chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> GetAccountsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve the full chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> GetAccountsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve a single spend or receive money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> GetBankTransactionAsync (string accessToken, string xeroTenantId, Guid bankTransactionID);

        /// <summary>
        /// Allows you to retrieve a single spend or receive money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> GetBankTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID);
        /// <summary>
        /// Allows you to retrieve Attachments on BankTransaction by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on BankTransaction by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on a specific BankTransaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Xero generated unique identifier for an attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on a specific BankTransaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Xero generated unique identifier for an attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve any attachments to bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetBankTransactionAttachmentsAsync (string accessToken, string xeroTenantId, Guid bankTransactionID);

        /// <summary>
        /// Allows you to retrieve any attachments to bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetBankTransactionAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID);
        /// <summary>
        /// Allows you to retrieve any spend or receive money transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 bank transactions will be returned in a single API call with line items shown for each bank transaction (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> GetBankTransactionsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null);

        /// <summary>
        /// Allows you to retrieve any spend or receive money transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 bank transactions will be returned in a single API call with line items shown for each bank transaction (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> GetBankTransactionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null);
        /// <summary>
        /// Allows you to retrieve history from a bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetBankTransactionsHistoryAsync (string accessToken, string xeroTenantId, Guid bankTransactionID);

        /// <summary>
        /// Allows you to retrieve history from a bank transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetBankTransactionsHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID);
        /// <summary>
        /// Allows you to retrieve any bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of BankTransfers</returns>
        System.Threading.Tasks.Task<BankTransfers> GetBankTransferAsync (string accessToken, string xeroTenantId, Guid bankTransferID);

        /// <summary>
        /// Allows you to retrieve any bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransfers>> GetBankTransferAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID);
        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Xero generated unique identifier for an Attachment to a bank transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Xero generated unique identifier for an Attachment to a bank transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments from  bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetBankTransferAttachmentsAsync (string accessToken, string xeroTenantId, Guid bankTransferID);

        /// <summary>
        /// Allows you to retrieve Attachments from  bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetBankTransferAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID);
        /// <summary>
        /// Allows you to retrieve history from a bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetBankTransferHistoryAsync (string accessToken, string xeroTenantId, Guid bankTransferID);

        /// <summary>
        /// Allows you to retrieve history from a bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetBankTransferHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID);
        /// <summary>
        /// Allows you to retrieve all bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of BankTransfers</returns>
        System.Threading.Tasks.Task<BankTransfers> GetBankTransfersAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve all bank transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransfers>> GetBankTransfersAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve history from a Batch Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetBatchPaymentHistoryAsync (string accessToken, string xeroTenantId, Guid batchPaymentID);

        /// <summary>
        /// Allows you to retrieve history from a Batch Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetBatchPaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid batchPaymentID);
        /// <summary>
        /// Retrieve either one or many BatchPayments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of BatchPayments</returns>
        System.Threading.Tasks.Task<BatchPayments> GetBatchPaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);

        /// <summary>
        /// Retrieve either one or many BatchPayments for invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchPayments>> GetBatchPaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve a specific BrandingThemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of BrandingThemes</returns>
        System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemeAsync (string accessToken, string xeroTenantId, Guid brandingThemeID);

        /// <summary>
        /// Allows you to retrieve a specific BrandingThemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrandingThemes>> GetBrandingThemeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid brandingThemeID);
        /// <summary>
        /// Allows you to retrieve the Payment services for a Branding Theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> GetBrandingThemePaymentServicesAsync (string accessToken, string xeroTenantId, Guid brandingThemeID);

        /// <summary>
        /// Allows you to retrieve the Payment services for a Branding Theme
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> GetBrandingThemePaymentServicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid brandingThemeID);
        /// <summary>
        /// Allows you to retrieve all the BrandingThemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of BrandingThemes</returns>
        System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemesAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Allows you to retrieve all the BrandingThemes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrandingThemes>> GetBrandingThemesAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> GetContactAsync (string accessToken, string xeroTenantId, Guid contactID);

        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> GetContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID);
        /// <summary>
        /// Allows you to retrieve Attachments on Contacts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid contactID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on Contacts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContactAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on Contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid contactID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on Contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetContactAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetContactAttachmentsAsync (string accessToken, string xeroTenantId, Guid contactID);

        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetContactAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID);
        /// <summary>
        /// Allows you to retrieve CISSettings for a contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of CISSettings</returns>
        System.Threading.Tasks.Task<CISSettings> GetContactCISSettingsAsync (string accessToken, string xeroTenantId, Guid contactID);

        /// <summary>
        /// Allows you to retrieve CISSettings for a contact in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (CISSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CISSettings>> GetContactCISSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID);
        /// <summary>
        /// Allows you to retrieve a unique Contract Group by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> GetContactGroupAsync (string accessToken, string xeroTenantId, Guid contactGroupID);

        /// <summary>
        /// Allows you to retrieve a unique Contract Group by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> GetContactGroupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID);
        /// <summary>
        /// Allows you to retrieve the ContactID and Name of all the contacts in a contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> GetContactGroupsAsync (string accessToken, string xeroTenantId, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve the ContactID and Name of all the contacts in a contact group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> GetContactGroupsAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve a history records of an Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetContactHistoryAsync (string accessToken, string xeroTenantId, Guid contactID);

        /// <summary>
        /// Allows you to retrieve a history records of an Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetContactHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID);
        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> GetContactsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, int? page = null, bool? includeArchived = null);

        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> GetContactsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, int? page = null, bool? includeArchived = null);
        /// <summary>
        /// Allows you to retrieve a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> GetCreditNoteAsync (string accessToken, string xeroTenantId, Guid creditNoteID);

        /// <summary>
        /// Allows you to retrieve a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> GetCreditNoteAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID);
        /// <summary>
        /// Allows you to retrieve Credit Note as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAsPdfAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string contentType);

        /// <summary>
        /// Allows you to retrieve Credit Note as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCreditNoteAsPdfAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments for credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetCreditNoteAttachmentsAsync (string accessToken, string xeroTenantId, Guid creditNoteID);

        /// <summary>
        /// Allows you to retrieve Attachments for credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetCreditNoteAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID);
        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetCreditNoteHistoryAsync (string accessToken, string xeroTenantId, Guid creditNoteID);

        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetCreditNoteHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID);
        /// <summary>
        /// Allows you to retrieve any credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> GetCreditNotesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null);

        /// <summary>
        /// Allows you to retrieve any credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> GetCreditNotesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null);
        /// <summary>
        /// Allows you to retrieve currencies for your organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Currencies</returns>
        System.Threading.Tasks.Task<Currencies> GetCurrenciesAsync (string accessToken, string xeroTenantId, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve currencies for your organisation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        System.Threading.Tasks.Task<ApiResponse<Currencies>> GetCurrenciesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve a specific employee used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Allows you to retrieve a specific employee used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Allows you to retrieve employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve employees used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve a specified expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimAsync (string accessToken, string xeroTenantId, Guid expenseClaimID);

        /// <summary>
        /// Allows you to retrieve a specified expense claim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> GetExpenseClaimAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID);
        /// <summary>
        /// Allows you to retrieve a history records of an ExpenseClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetExpenseClaimHistoryAsync (string accessToken, string xeroTenantId, Guid expenseClaimID);

        /// <summary>
        /// Allows you to retrieve a history records of an ExpenseClaim
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetExpenseClaimHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID);
        /// <summary>
        /// Allows you to retrieve expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> GetExpenseClaimsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve a specified sales invoice or purchase bill
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> GetInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID);

        /// <summary>
        /// Allows you to retrieve a specified sales invoice or purchase bill
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> GetInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID);
        /// <summary>
        /// Allows you to retrieve invoices or purchase bills as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAsPdfAsync (string accessToken, string xeroTenantId, Guid invoiceID, string contentType);

        /// <summary>
        /// Allows you to retrieve invoices or purchase bills as PDF files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceAsPdfAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachment on invoices or purchase bills by it&#39;s filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachment on invoices or purchase bills by it&#39;s filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve a specified Attachment on invoices or purchase bills by it&#39;s ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for an Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve a specified Attachment on invoices or purchase bills by it&#39;s ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for an Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetInvoiceAttachmentsAsync (string accessToken, string xeroTenantId, Guid invoiceID);

        /// <summary>
        /// Allows you to retrieve Attachments on invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetInvoiceAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID);
        /// <summary>
        /// Allows you to retrieve a history records of an invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid invoiceID);

        /// <summary>
        /// Allows you to retrieve a history records of an invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID);
        /// <summary>
        /// Allows you to retrieve invoice reminder settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of InvoiceReminders</returns>
        System.Threading.Tasks.Task<InvoiceReminders> GetInvoiceRemindersAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Allows you to retrieve invoice reminder settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (InvoiceReminders)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceReminders>> GetInvoiceRemindersAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Allows you to retrieve any sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> GetInvoicesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, string invoiceNumbers = null, string contactIDs = null, string statuses = null, int? page = null, bool? includeArchived = null, bool? createdByMyApp = null, int? unitdp = null);

        /// <summary>
        /// Allows you to retrieve any sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> GetInvoicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, string invoiceNumbers = null, string contactIDs = null, string statuses = null, int? page = null, bool? includeArchived = null, bool? createdByMyApp = null, int? unitdp = null);
        /// <summary>
        /// Allows you to retrieve a specified item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> GetItemAsync (string accessToken, string xeroTenantId, Guid itemID);

        /// <summary>
        /// Allows you to retrieve a specified item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> GetItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID);
        /// <summary>
        /// Allows you to retrieve history for items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetItemHistoryAsync (string accessToken, string xeroTenantId, Guid itemID);

        /// <summary>
        /// Allows you to retrieve history for items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetItemHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID);
        /// <summary>
        /// Allows you to retrieve any items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> GetItemsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null);

        /// <summary>
        /// Allows you to retrieve any items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> GetItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null);
        /// <summary>
        /// Allows you to retrieve a specified journals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <returns>Task of Journals</returns>
        System.Threading.Tasks.Task<Journals> GetJournalAsync (string accessToken, string xeroTenantId, Guid journalID);

        /// <summary>
        /// Allows you to retrieve a specified journals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        System.Threading.Tasks.Task<ApiResponse<Journals>> GetJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid journalID);
        /// <summary>
        /// Allows you to retrieve any journals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <returns>Task of Journals</returns>
        System.Threading.Tasks.Task<Journals> GetJournalsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, int? offset = null, bool? paymentsOnly = null);

        /// <summary>
        /// Allows you to retrieve any journals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        System.Threading.Tasks.Task<ApiResponse<Journals>> GetJournalsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, int? offset = null, bool? paymentsOnly = null);
        /// <summary>
        /// Allows you to retrieve a specified linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionAsync (string accessToken, string xeroTenantId, Guid linkedTransactionID);

        /// <summary>
        /// Allows you to retrieve a specified linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> GetLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid linkedTransactionID);
        /// <summary>
        /// Retrieve linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED. (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionsAsync (string accessToken, string xeroTenantId, int? page = null, string linkedTransactionID = null, string sourceTransactionID = null, string contactID = null, string status = null, string targetTransactionID = null);

        /// <summary>
        /// Retrieve linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED. (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> GetLinkedTransactionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string linkedTransactionID = null, string sourceTransactionID = null, string contactID = null, string status = null, string targetTransactionID = null);
        /// <summary>
        /// Allows you to retrieve a specified manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> GetManualJournalAsync (string accessToken, string xeroTenantId, Guid manualJournalID);

        /// <summary>
        /// Allows you to retrieve a specified manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> GetManualJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID);
        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachment for manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetManualJournalAttachmentsAsync (string accessToken, string xeroTenantId, Guid manualJournalID);

        /// <summary>
        /// Allows you to retrieve Attachment for manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetManualJournalAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID);
        /// <summary>
        /// Allows you to retrieve any manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> GetManualJournalsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null);

        /// <summary>
        /// Allows you to retrieve any manual journals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> GetManualJournalsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null);
        /// <summary>
        /// Allows you to retrieve a URL to an online invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of OnlineInvoices</returns>
        System.Threading.Tasks.Task<OnlineInvoices> GetOnlineInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID);

        /// <summary>
        /// Allows you to retrieve a URL to an online invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (OnlineInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnlineInvoices>> GetOnlineInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID);
        /// <summary>
        /// Allows you To verify if an organisation is using contruction industry scheme, you can retrieve the CIS settings for the organistaion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID"></param>
        /// <returns>Task of CISOrgSetting</returns>
        System.Threading.Tasks.Task<CISOrgSetting> GetOrganisationCISSettingsAsync (string accessToken, string xeroTenantId, Guid organisationID);

        /// <summary>
        /// Allows you To verify if an organisation is using contruction industry scheme, you can retrieve the CIS settings for the organistaion.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID"></param>
        /// <returns>Task of ApiResponse (CISOrgSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<CISOrgSetting>> GetOrganisationCISSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid organisationID);
        /// <summary>
        /// Allows you to retrieve Organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Organisations</returns>
        System.Threading.Tasks.Task<Organisations> GetOrganisationsAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Allows you to retrieve Organisation details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Organisations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisations>> GetOrganisationsAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Allows you to retrieve a specified overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of Overpayments</returns>
        System.Threading.Tasks.Task<Overpayments> GetOverpaymentAsync (string accessToken, string xeroTenantId, Guid overpaymentID);

        /// <summary>
        /// Allows you to retrieve a specified overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Overpayments>> GetOverpaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID);
        /// <summary>
        /// Allows you to retrieve a history records of an Overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetOverpaymentHistoryAsync (string accessToken, string xeroTenantId, Guid overpaymentID);

        /// <summary>
        /// Allows you to retrieve a history records of an Overpayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetOverpaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID);
        /// <summary>
        /// Allows you to retrieve overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Overpayments</returns>
        System.Threading.Tasks.Task<Overpayments> GetOverpaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null);

        /// <summary>
        /// Allows you to retrieve overpayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Overpayments>> GetOverpaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null);
        /// <summary>
        /// Allows you to retrieve a specified payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> GetPaymentAsync (string accessToken, string xeroTenantId, Guid paymentID);

        /// <summary>
        /// Allows you to retrieve a specified payment for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> GetPaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID);
        /// <summary>
        /// Allows you to retrieve history records of a payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetPaymentHistoryAsync (string accessToken, string xeroTenantId, Guid paymentID);

        /// <summary>
        /// Allows you to retrieve history records of a payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetPaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID);
        /// <summary>
        /// Allows you to retrieve payment services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of PaymentServices</returns>
        System.Threading.Tasks.Task<PaymentServices> GetPaymentServicesAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Allows you to retrieve payment services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentServices>> GetPaymentServicesAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Allows you to retrieve payments for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Payments</returns>
        System.Threading.Tasks.Task<Payments> GetPaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve payments for invoices and credit notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payments>> GetPaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve a specified prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of Prepayments</returns>
        System.Threading.Tasks.Task<Prepayments> GetPrepaymentAsync (string accessToken, string xeroTenantId, Guid prepaymentID);

        /// <summary>
        /// Allows you to retrieve a specified prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prepayments>> GetPrepaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID);
        /// <summary>
        /// Allows you to retrieve a history records of an Prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetPrepaymentHistoryAsync (string accessToken, string xeroTenantId, Guid prepaymentID);

        /// <summary>
        /// Allows you to retrieve a history records of an Prepayment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetPrepaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID);
        /// <summary>
        /// Allows you to retrieve prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Prepayments</returns>
        System.Threading.Tasks.Task<Prepayments> GetPrepaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null);

        /// <summary>
        /// Allows you to retrieve prepayments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prepayments>> GetPrepaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null);
        /// <summary>
        /// Allows you to retrieve a specified purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrderAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID);

        /// <summary>
        /// Allows you to retrieve a specified purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> GetPurchaseOrderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID);
        /// <summary>
        /// Allows you to retrieve history for PurchaseOrder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetPurchaseOrderHistoryAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID);

        /// <summary>
        /// Allows you to retrieve history for PurchaseOrder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetPurchaseOrderHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID);
        /// <summary>
        /// Allows you to retrieve purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrdersAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string status = null, string dateFrom = null, string dateTo = null, string order = null, int? page = null);

        /// <summary>
        /// Allows you to retrieve purchase orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> GetPurchaseOrdersAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string status = null, string dateFrom = null, string dateTo = null, string order = null, int? page = null);
        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> GetReceiptAsync (string accessToken, string xeroTenantId, Guid receiptID);

        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> GetReceiptAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID);
        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid receiptID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetReceiptAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetReceiptAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments for expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetReceiptAttachmentsAsync (string accessToken, string xeroTenantId, Guid receiptID);

        /// <summary>
        /// Allows you to retrieve Attachments for expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetReceiptAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID);
        /// <summary>
        /// Allows you to retrieve a history records of an Receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetReceiptHistoryAsync (string accessToken, string xeroTenantId, Guid receiptID);

        /// <summary>
        /// Allows you to retrieve a history records of an Receipt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetReceiptHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID);
        /// <summary>
        /// Allows you to retrieve draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> GetReceiptsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null);

        /// <summary>
        /// Allows you to retrieve draft expense claim receipts for any user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> GetReceiptsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null);
        /// <summary>
        /// Allows you to retrieve a specified repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of RepeatingInvoices</returns>
        System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoiceAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID);

        /// <summary>
        /// Allows you to retrieve a specified repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepeatingInvoices>> GetRepeatingInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID);
        /// <summary>
        /// Allows you to retrieve specified attachment on repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType);

        /// <summary>
        /// Allows you to retrieve specified attachment on repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType);
        /// <summary>
        /// Allows you to retrieve a specified Attachments on repeating invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType);

        /// <summary>
        /// Allows you to retrieve a specified Attachments on repeating invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType);
        /// <summary>
        /// Allows you to retrieve Attachments on repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> GetRepeatingInvoiceAttachmentsAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID);

        /// <summary>
        /// Allows you to retrieve Attachments on repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> GetRepeatingInvoiceAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID);
        /// <summary>
        /// Allows you to retrieve history for a repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of HistoryRecords</returns>
        System.Threading.Tasks.Task<HistoryRecords> GetRepeatingInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID);

        /// <summary>
        /// Allows you to retrieve history for a repeating invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryRecords>> GetRepeatingInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID);
        /// <summary>
        /// Allows you to retrieve any repeating invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of RepeatingInvoices</returns>
        System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoicesAsync (string accessToken, string xeroTenantId, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve any repeating invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepeatingInvoices>> GetRepeatingInvoicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null);
        /// <summary>
        /// Allows you to retrieve report for AgedPayablesByContact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Payables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Payables By Contact report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportAgedPayablesByContactAsync (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// Allows you to retrieve report for AgedPayablesByContact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Payables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Payables By Contact report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportAgedPayablesByContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// Allows you to retrieve report for AgedReceivablesByContact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Receivables By Contact report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportAgedReceivablesByContactAsync (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// Allows you to retrieve report for AgedReceivablesByContact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Receivables By Contact report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportAgedReceivablesByContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBASorGSTAsync (string accessToken, string xeroTenantId, string reportID);

        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBASorGSTAsyncWithHttpInfo (string accessToken, string xeroTenantId, string reportID);
        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBASorGSTListAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBASorGSTListAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Allows you to retrieve report for BalanceSheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBalanceSheetAsync (string accessToken, string xeroTenantId, string date = null, int? periods = null, string timeframe = null, string trackingOptionID1 = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null);

        /// <summary>
        /// Allows you to retrieve report for BalanceSheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBalanceSheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, string date = null, int? periods = null, string timeframe = null, string trackingOptionID1 = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null);
        /// <summary>
        /// Allows you to retrieve report for BankSummary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBankSummaryAsync (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null);

        /// <summary>
        /// Allows you to retrieve report for BankSummary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBankSummaryAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null);
        /// <summary>
        /// Allows you to retrieve report for Budget Summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportBudgetSummaryAsync (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null);

        /// <summary>
        /// Allows you to retrieve report for Budget Summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportBudgetSummaryAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null);
        /// <summary>
        /// Allows you to retrieve report for ExecutiveSummary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportExecutiveSummaryAsync (string accessToken, string xeroTenantId, DateTime? date = null);

        /// <summary>
        /// Allows you to retrieve report for ExecutiveSummary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportExecutiveSummaryAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null);
        /// <summary>
        /// Allows you to retrieve report for ProfitAndLoss
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="toDate">The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportProfitAndLossAsync (string accessToken, string xeroTenantId, DateTime? fromDate = null, DateTime? toDate = null, int? periods = null, string timeframe = null, string trackingCategoryID = null, string trackingCategoryID2 = null, string trackingOptionID = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null);

        /// <summary>
        /// Allows you to retrieve report for ProfitAndLoss
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="toDate">The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportProfitAndLossAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? fromDate = null, DateTime? toDate = null, int? periods = null, string timeframe = null, string trackingCategoryID = null, string trackingCategoryID2 = null, string trackingOptionID = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null);
        /// <summary>
        /// Allows you to retrieve report for TenNinetyNine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <returns>Task of Reports</returns>
        System.Threading.Tasks.Task<Reports> GetReportTenNinetyNineAsync (string accessToken, string xeroTenantId, string reportYear = null);

        /// <summary>
        /// Allows you to retrieve report for TenNinetyNine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <returns>Task of ApiResponse (Reports)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reports>> GetReportTenNinetyNineAsyncWithHttpInfo (string accessToken, string xeroTenantId, string reportYear = null);
        /// <summary>
        /// Allows you to retrieve report for TrialBalance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        System.Threading.Tasks.Task<ReportWithRows> GetReportTrialBalanceAsync (string accessToken, string xeroTenantId, DateTime? date = null, bool? paymentsOnly = null);

        /// <summary>
        /// Allows you to retrieve report for TrialBalance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportWithRows>> GetReportTrialBalanceAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null, bool? paymentsOnly = null);
        /// <summary>
        /// Allows you to retrieve Tax Rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="taxType">Filter by tax type (optional)</param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> GetTaxRatesAsync (string accessToken, string xeroTenantId, string where = null, string order = null, string taxType = null);

        /// <summary>
        /// Allows you to retrieve Tax Rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="taxType">Filter by tax type (optional)</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> GetTaxRatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null, string taxType = null);
        /// <summary>
        /// Allows you to retrieve tracking categories and options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync (string accessToken, string xeroTenantId, string where = null, string order = null, bool? includeArchived = null);

        /// <summary>
        /// Allows you to retrieve tracking categories and options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> GetTrackingCategoriesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null, bool? includeArchived = null);
        /// <summary>
        /// Allows you to retrieve tracking categories and options for specified category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoryAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID);

        /// <summary>
        /// Allows you to retrieve tracking categories and options for specified category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> GetTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID);
        /// <summary>
        /// Allows you to retrieve a specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetUserAsync (string accessToken, string xeroTenantId, Guid userID);

        /// <summary>
        /// Allows you to retrieve a specified user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetUserAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid userID);
        /// <summary>
        /// Allows you to retrieve users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetUsersAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);

        /// <summary>
        /// Allows you to retrieve users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetUsersAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null);
        /// <summary>
        /// Allows you to update a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <returns>Task of Accounts</returns>
        System.Threading.Tasks.Task<Accounts> UpdateAccountAsync (string accessToken, string xeroTenantId, Guid accountID, Accounts accounts);

        /// <summary>
        /// Allows you to update a chart of accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Accounts>> UpdateAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, Accounts accounts);
        /// <summary>
        /// Allows you to update Attachment on Account by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateAccountAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to update Attachment on Account by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateAccountAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to update a single spend or receive money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <returns>Task of BankTransactions</returns>
        System.Threading.Tasks.Task<BankTransactions> UpdateBankTransactionAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions);

        /// <summary>
        /// Allows you to update a single spend or receive money transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankTransactions>> UpdateBankTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions);
        /// <summary>
        /// Allows you to update an Attachment on BankTransaction by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateBankTransactionAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to update an Attachment on BankTransaction by Filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateBankTransactionAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateBankTransferAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateBankTransferAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <returns>Task of Contacts</returns>
        System.Threading.Tasks.Task<Contacts> UpdateContactAsync (string accessToken, string xeroTenantId, Guid contactID, Contacts contacts);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contacts>> UpdateContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, Contacts contacts);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateContactAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateContactAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to update a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <returns>Task of ContactGroups</returns>
        System.Threading.Tasks.Task<ContactGroups> UpdateContactGroupAsync (string accessToken, string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups);

        /// <summary>
        /// Allows you to update a Contract Group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactGroups>> UpdateContactGroupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups);
        /// <summary>
        /// Allows you to update a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> UpdateCreditNoteAsync (string accessToken, string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes);

        /// <summary>
        /// Allows you to update a specific credit note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> UpdateCreditNoteAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes);
        /// <summary>
        /// Allows you to update Attachments on CreditNote by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateCreditNoteAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to update Attachments on CreditNote by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateCreditNoteAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to update a specific employee used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="employees"></param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, Employees employees);

        /// <summary>
        /// Allows you to update a specific employee used in Xero payrun
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="employees"></param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Employees employees);
        /// <summary>
        /// Allows you to update specified expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <returns>Task of ExpenseClaims</returns>
        System.Threading.Tasks.Task<ExpenseClaims> UpdateExpenseClaimAsync (string accessToken, string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims);

        /// <summary>
        /// Allows you to update specified expense claims
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseClaims>> UpdateExpenseClaimAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims);
        /// <summary>
        /// Allows you to update a specified sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <returns>Task of Invoices</returns>
        System.Threading.Tasks.Task<Invoices> UpdateInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID, Invoices invoices);

        /// <summary>
        /// Allows you to update a specified sales invoices or purchase bills
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoices>> UpdateInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, Invoices invoices);
        /// <summary>
        /// Allows you to update Attachment on invoices or purchase bills by it&#39;s filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to update Attachment on invoices or purchase bills by it&#39;s filename
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to udpate a specified item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <returns>Task of Items</returns>
        System.Threading.Tasks.Task<Items> UpdateItemAsync (string accessToken, string xeroTenantId, Guid itemID, Items items);

        /// <summary>
        /// Allows you to udpate a specified item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <returns>Task of ApiResponse (Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<Items>> UpdateItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID, Items items);
        /// <summary>
        /// Allows you to update a specified linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of LinkedTransactions</returns>
        System.Threading.Tasks.Task<LinkedTransactions> UpdateLinkedTransactionAsync (string accessToken, string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions);

        /// <summary>
        /// Allows you to update a specified linked transactions (billable expenses)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkedTransactions>> UpdateLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions);
        /// <summary>
        /// Allows you to update a specified manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ManualJournals</returns>
        System.Threading.Tasks.Task<ManualJournals> UpdateManualJournalAsync (string accessToken, string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals);

        /// <summary>
        /// Allows you to update a specified manual journal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournals>> UpdateManualJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals);
        /// <summary>
        /// Allows you to update a specified Attachment on ManualJournal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateManualJournalAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to update a specified Attachment on ManualJournal by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateManualJournalAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to update a specified purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="purchaseOrders"></param>
        /// <returns>Task of PurchaseOrders</returns>
        System.Threading.Tasks.Task<PurchaseOrders> UpdatePurchaseOrderAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders);

        /// <summary>
        /// Allows you to update a specified purchase order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="purchaseOrders"></param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseOrders>> UpdatePurchaseOrderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders);
        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <returns>Task of Receipts</returns>
        System.Threading.Tasks.Task<Receipts> UpdateReceiptAsync (string accessToken, string xeroTenantId, Guid receiptID, Receipts receipts);

        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receipts>> UpdateReceiptAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, Receipts receipts);
        /// <summary>
        /// Allows you to update Attachment on expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateReceiptAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to update Attachment on expense claim receipts by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateReceiptAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to update specified attachment on repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        System.Threading.Tasks.Task<Attachments> UpdateRepeatingInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body);

        /// <summary>
        /// Allows you to update specified attachment on repeating invoices by file name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachments>> UpdateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body);
        /// <summary>
        /// Allows you to update Tax Rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> UpdateTaxRateAsync (string accessToken, string xeroTenantId, TaxRates taxRates);

        /// <summary>
        /// Allows you to update Tax Rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> UpdateTaxRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, TaxRates taxRates);
        /// <summary>
        /// Allows you to update tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> UpdateTrackingCategoryAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory);

        /// <summary>
        /// Allows you to update tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> UpdateTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountingApi : IAccountingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountingApi : IAccountingApi
    {
        private Xero.NetStandard.OAuth2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountingApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountingApi(String basePath)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountingApi(Xero.NetStandard.OAuth2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountingApi(Xero.NetStandard.OAuth2.Client.ISynchronousClient client,Xero.NetStandard.OAuth2.Client.IAsynchronousClient asyncClient, Xero.NetStandard.OAuth2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.NetStandard.OAuth2.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Allows you to create a new chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Request of type Account</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> CreateAccountAsync (string accessToken, string xeroTenantId, Account account)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts> localVarResponse = await CreateAccountAsyncWithHttpInfo(accessToken, xeroTenantId, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a new chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="account">Request of type Account</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts>> CreateAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Account account)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateAccount");

            // verify the required parameter 'account' is set
            if (account == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'account' when calling AccountingApi->CreateAccount");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = account;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Accounts>("/Accounts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateAccount", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create Attachment on Account 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateAccountAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateAccountAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, accountID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create Attachment on Account 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateAccountAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateAccountAttachmentByFileName");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->CreateAccountAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateAccountAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateAccountAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/Accounts/{AccountID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateAccountAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a spend or receive money transaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">response format that shows validation errors for each bank transaction (optional)</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> CreateBankTransactionAsync (string accessToken, string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions> localVarResponse = await CreateBankTransactionAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactions, summarizeErrors);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a spend or receive money transaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactions"></param>
        /// <param name="summarizeErrors">response format that shows validation errors for each bank transaction (optional)</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions>> CreateBankTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, BankTransactions bankTransactions, bool? summarizeErrors = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransaction");

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->CreateBankTransaction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (summarizeErrors != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "SummarizeErrors", summarizeErrors))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = bankTransactions;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<BankTransactions>("/BankTransactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBankTransaction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to createa an Attachment on BankTransaction by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateBankTransactionAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateBankTransactionAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to createa an Attachment on BankTransaction by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateBankTransactionAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateBankTransactionAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBankTransactionAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create history record for a bank transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateBankTransactionHistoryRecordAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateBankTransactionHistoryRecordAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create history record for a bank transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateBankTransactionHistoryRecordAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransactionHistoryRecord");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->CreateBankTransactionHistoryRecord");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBankTransactionHistoryRecord");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/BankTransactions/{BankTransactionID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBankTransactionHistoryRecord", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers"></param>
        /// <returns>Task of BankTransfers</returns>
        public async System.Threading.Tasks.Task<BankTransfers> CreateBankTransferAsync (string accessToken, string xeroTenantId, BankTransfers bankTransfers)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransfers> localVarResponse = await CreateBankTransferAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransfers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransfers"></param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransfers>> CreateBankTransferAsyncWithHttpInfo (string accessToken, string xeroTenantId, BankTransfers bankTransfers)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransfer");

            // verify the required parameter 'bankTransfers' is set
            if (bankTransfers == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransfers' when calling AccountingApi->CreateBankTransfer");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = bankTransfers;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<BankTransfers>("/BankTransfers", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBankTransfer", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateBankTransferAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateBankTransferAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateBankTransferAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransferAttachmentByFileName");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->CreateBankTransferAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateBankTransferAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateBankTransferAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBankTransferAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateBankTransferHistoryRecordAsync (string accessToken, string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateBankTransferHistoryRecordAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateBankTransferHistoryRecordAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBankTransferHistoryRecord");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->CreateBankTransferHistoryRecord");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBankTransferHistoryRecord");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/BankTransfers/{BankTransferID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBankTransferHistoryRecord", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Create one or many BatchPayments for invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">Request of type BatchPayments containing a Payments array with one or more Payment objects</param>
        /// <returns>Task of BatchPayments</returns>
        public async System.Threading.Tasks.Task<BatchPayments> CreateBatchPaymentAsync (string accessToken, string xeroTenantId, BatchPayments batchPayments)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BatchPayments> localVarResponse = await CreateBatchPaymentAsyncWithHttpInfo(accessToken, xeroTenantId, batchPayments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create one or many BatchPayments for invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPayments">Request of type BatchPayments containing a Payments array with one or more Payment objects</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BatchPayments>> CreateBatchPaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, BatchPayments batchPayments)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBatchPayment");

            // verify the required parameter 'batchPayments' is set
            if (batchPayments == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'batchPayments' when calling AccountingApi->CreateBatchPayment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = batchPayments;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<BatchPayments>("/BatchPayments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBatchPayment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a history record for a Batch Payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateBatchPaymentHistoryRecordAsync (string accessToken, string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateBatchPaymentHistoryRecordAsyncWithHttpInfo(accessToken, xeroTenantId, batchPaymentID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a history record for a Batch Payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateBatchPaymentHistoryRecordAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid batchPaymentID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBatchPaymentHistoryRecord");

            // verify the required parameter 'batchPaymentID' is set
            if (batchPaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'batchPaymentID' when calling AccountingApi->CreateBatchPaymentHistoryRecord");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateBatchPaymentHistoryRecord");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (batchPaymentID != null)
                requestOptions.PathParameters.Add("BatchPaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/BatchPayments/{BatchPaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBatchPaymentHistoryRecord", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allow for the creation of new custom payment service for specified Branding Theme 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentService"></param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> CreateBrandingThemePaymentServicesAsync (string accessToken, string xeroTenantId, Guid brandingThemeID, PaymentService paymentService)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices> localVarResponse = await CreateBrandingThemePaymentServicesAsyncWithHttpInfo(accessToken, xeroTenantId, brandingThemeID, paymentService);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allow for the creation of new custom payment service for specified Branding Theme 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <param name="paymentService"></param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices>> CreateBrandingThemePaymentServicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid brandingThemeID, PaymentService paymentService)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateBrandingThemePaymentServices");

            // verify the required parameter 'brandingThemeID' is set
            if (brandingThemeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'brandingThemeID' when calling AccountingApi->CreateBrandingThemePaymentServices");

            // verify the required parameter 'paymentService' is set
            if (paymentService == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentService' when calling AccountingApi->CreateBrandingThemePaymentServices");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (brandingThemeID != null)
                requestOptions.PathParameters.Add("BrandingThemeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = paymentService;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PaymentServices>("/BrandingThemes/{BrandingThemeID}/PaymentServices", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBrandingThemePaymentServices", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contact"></param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> CreateContactAsync (string accessToken, string xeroTenantId, Contact contact)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts> localVarResponse = await CreateContactAsyncWithHttpInfo(accessToken, xeroTenantId, contact);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contact"></param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts>> CreateContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Contact contact)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContact");

            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contact' when calling AccountingApi->CreateContact");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = contact;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Contacts>("/Contacts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateContact", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateContactAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateContactAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, contactID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateContactAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactAttachmentByFileName");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->CreateContactAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateContactAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateContactAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/Contacts/{ContactID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateContactAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a contact group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">an array of contact groups with names specified</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> CreateContactGroupAsync (string accessToken, string xeroTenantId, ContactGroups contactGroups)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups> localVarResponse = await CreateContactGroupAsyncWithHttpInfo(accessToken, xeroTenantId, contactGroups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a contact group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroups">an array of contact groups with names specified</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups>> CreateContactGroupAsyncWithHttpInfo (string accessToken, string xeroTenantId, ContactGroups contactGroups)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactGroup");

            // verify the required parameter 'contactGroups' is set
            if (contactGroups == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactGroups' when calling AccountingApi->CreateContactGroup");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = contactGroups;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<ContactGroups>("/ContactGroups", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateContactGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to add Contacts to a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">an array of contacts with ContactID to be added to ContactGroup</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> CreateContactGroupContactsAsync (string accessToken, string xeroTenantId, Guid contactGroupID, Contacts contacts)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts> localVarResponse = await CreateContactGroupContactsAsyncWithHttpInfo(accessToken, xeroTenantId, contactGroupID, contacts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to add Contacts to a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contacts">an array of contacts with ContactID to be added to ContactGroup</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts>> CreateContactGroupContactsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID, Contacts contacts)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactGroupContacts");

            // verify the required parameter 'contactGroupID' is set
            if (contactGroupID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactGroupID' when calling AccountingApi->CreateContactGroupContacts");

            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->CreateContactGroupContacts");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactGroupID != null)
                requestOptions.PathParameters.Add("ContactGroupID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = contacts;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Contacts>("/ContactGroups/{ContactGroupID}/Contacts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateContactGroupContacts", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an Contact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateContactHistoryAsync (string accessToken, string xeroTenantId, Guid contactID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateContactHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, contactID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an Contact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateContactHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateContactHistory");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->CreateContactHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateContactHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Contacts/{ContactID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateContactHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a credit note 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">shows validation errors for each credit note (optional)</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> CreateCreditNoteAsync (string accessToken, string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes> localVarResponse = await CreateCreditNoteAsyncWithHttpInfo(accessToken, xeroTenantId, creditNotes, summarizeErrors);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a credit note 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNotes">an array of Credit Notes with a single CreditNote object.</param>
        /// <param name="summarizeErrors">shows validation errors for each credit note (optional)</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes>> CreateCreditNoteAsyncWithHttpInfo (string accessToken, string xeroTenantId, CreditNotes creditNotes, bool? summarizeErrors = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNote");

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->CreateCreditNote");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (summarizeErrors != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "SummarizeErrors", summarizeErrors))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = creditNotes;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<CreditNotes>("/CreditNotes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateCreditNote", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create Allocation on CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">an array of Allocations with single Allocation object defined.</param>
        /// <returns>Task of Allocations</returns>
        public async System.Threading.Tasks.Task<Allocations> CreateCreditNoteAllocationAsync (string accessToken, string xeroTenantId, Guid creditNoteID, Allocations allocations)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Allocations> localVarResponse = await CreateCreditNoteAllocationAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, allocations);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create Allocation on CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="allocations">an array of Allocations with single Allocation object defined.</param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Allocations>> CreateCreditNoteAllocationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, Allocations allocations)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteAllocation");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->CreateCreditNoteAllocation");

            // verify the required parameter 'allocations' is set
            if (allocations == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreateCreditNoteAllocation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = allocations;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Allocations>("/CreditNotes/{CreditNoteID}/Allocations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateCreditNoteAllocation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create Attachments on CreditNote by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateCreditNoteAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateCreditNoteAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create Attachments on CreditNote by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateCreditNoteAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateCreditNoteAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateCreditNoteAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateCreditNoteHistoryAsync (string accessToken, string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateCreditNoteHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateCreditNoteHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCreditNoteHistory");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->CreateCreditNoteHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateCreditNoteHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/CreditNotes/{CreditNoteID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateCreditNoteHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency"></param>
        /// <returns>Task of Currencies</returns>
        public async System.Threading.Tasks.Task<Currencies> CreateCurrencyAsync (string accessToken, string xeroTenantId, Currency currency)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Currencies> localVarResponse = await CreateCurrencyAsyncWithHttpInfo(accessToken, xeroTenantId, currency);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Currencies>> CreateCurrencyAsyncWithHttpInfo (string accessToken, string xeroTenantId, Currency currency)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateCurrency");

            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'currency' when calling AccountingApi->CreateCurrency");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = currency;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Currencies>("/Currencies", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateCurrency", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees"></param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> CreateEmployeeAsync (string accessToken, string xeroTenantId, Employees employees)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await CreateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employees);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create new employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employees"></param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Employees employees)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateEmployee");

            // verify the required parameter 'employees' is set
            if (employees == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employees' when calling AccountingApi->CreateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employees;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Employees>("/Employees", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve expense claims 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims"></param>
        /// <param name="summarizeErrors">shows validation errors for each expense claim (optional)</param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> CreateExpenseClaimAsync (string accessToken, string xeroTenantId, ExpenseClaims expenseClaims, bool? summarizeErrors = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims> localVarResponse = await CreateExpenseClaimAsyncWithHttpInfo(accessToken, xeroTenantId, expenseClaims, summarizeErrors);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve expense claims 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaims"></param>
        /// <param name="summarizeErrors">shows validation errors for each expense claim (optional)</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims>> CreateExpenseClaimAsyncWithHttpInfo (string accessToken, string xeroTenantId, ExpenseClaims expenseClaims, bool? summarizeErrors = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateExpenseClaim");

            // verify the required parameter 'expenseClaims' is set
            if (expenseClaims == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'expenseClaims' when calling AccountingApi->CreateExpenseClaim");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (summarizeErrors != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "SummarizeErrors", summarizeErrors))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = expenseClaims;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<ExpenseClaims>("/ExpenseClaims", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateExpenseClaim", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a history records of an ExpenseClaim 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateExpenseClaimHistoryAsync (string accessToken, string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateExpenseClaimHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, expenseClaimID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a history records of an ExpenseClaim 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateExpenseClaimHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateExpenseClaimHistory");

            // verify the required parameter 'expenseClaimID' is set
            if (expenseClaimID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'expenseClaimID' when calling AccountingApi->CreateExpenseClaimHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateExpenseClaimHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (expenseClaimID != null)
                requestOptions.PathParameters.Add("ExpenseClaimID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/ExpenseClaims/{ExpenseClaimID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateExpenseClaimHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create any sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">shows validation errors for each invoice (optional)</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> CreateInvoiceAsync (string accessToken, string xeroTenantId, Invoices invoices, bool? summarizeErrors = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices> localVarResponse = await CreateInvoiceAsyncWithHttpInfo(accessToken, xeroTenantId, invoices, summarizeErrors);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create any sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoices"></param>
        /// <param name="summarizeErrors">shows validation errors for each invoice (optional)</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices>> CreateInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Invoices invoices, bool? summarizeErrors = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoice");

            // verify the required parameter 'invoices' is set
            if (invoices == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->CreateInvoice");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (summarizeErrors != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "SummarizeErrors", summarizeErrors))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = invoices;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Invoices>("/Invoices", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInvoice", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create an Attachment on invoices or purchase bills by it&#39;s filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateInvoiceAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create an Attachment on invoices or purchase bills by it&#39;s filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoiceAttachmentByFileName");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->CreateInvoiceAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateInvoiceAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateInvoiceAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/Invoices/{InvoiceID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInvoiceAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateInvoiceHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateInvoiceHistory");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->CreateInvoiceHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateInvoiceHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Invoices/{InvoiceID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInvoiceHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create an item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> CreateItemAsync (string accessToken, string xeroTenantId, Items items)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Items> localVarResponse = await CreateItemAsyncWithHttpInfo(accessToken, xeroTenantId, items);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create an item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="items"></param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Items>> CreateItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Items items)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateItem");

            // verify the required parameter 'items' is set
            if (items == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->CreateItem");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = items;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Items>("/Items", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a history record for items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateItemHistoryAsync (string accessToken, string xeroTenantId, Guid itemID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateItemHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, itemID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a history record for items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateItemHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateItemHistory");

            // verify the required parameter 'itemID' is set
            if (itemID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'itemID' when calling AccountingApi->CreateItemHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateItemHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (itemID != null)
                requestOptions.PathParameters.Add("ItemID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Items/{ItemID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateItemHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> CreateLinkedTransactionAsync (string accessToken, string xeroTenantId, LinkedTransactions linkedTransactions)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions> localVarResponse = await CreateLinkedTransactionAsyncWithHttpInfo(accessToken, xeroTenantId, linkedTransactions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions>> CreateLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, LinkedTransactions linkedTransactions)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateLinkedTransaction");

            // verify the required parameter 'linkedTransactions' is set
            if (linkedTransactions == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'linkedTransactions' when calling AccountingApi->CreateLinkedTransaction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = linkedTransactions;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<LinkedTransactions>("/LinkedTransactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateLinkedTransaction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a manual journal 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> CreateManualJournalAsync (string accessToken, string xeroTenantId, ManualJournals manualJournals)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals> localVarResponse = await CreateManualJournalAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournals);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a manual journal 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals>> CreateManualJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, ManualJournals manualJournals)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournal");

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->CreateManualJournal");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = manualJournals;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<ManualJournals>("/ManualJournals", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateManualJournal", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a specified Attachment on ManualJournal by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateManualJournalAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateManualJournalAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournalID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a specified Attachment on ManualJournal by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateManualJournalAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateManualJournalAttachmentByFileName");

            // verify the required parameter 'manualJournalID' is set
            if (manualJournalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournalID' when calling AccountingApi->CreateManualJournalAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateManualJournalAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateManualJournalAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (manualJournalID != null)
                requestOptions.PathParameters.Add("ManualJournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateManualJournalAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Allocations for overpayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations"></param>
        /// <returns>Task of Allocations</returns>
        public async System.Threading.Tasks.Task<Allocations> CreateOverpaymentAllocationAsync (string accessToken, string xeroTenantId, Guid overpaymentID, Allocations allocations)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Allocations> localVarResponse = await CreateOverpaymentAllocationAsyncWithHttpInfo(accessToken, xeroTenantId, overpaymentID, allocations);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Allocations for overpayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="allocations"></param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Allocations>> CreateOverpaymentAllocationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID, Allocations allocations)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateOverpaymentAllocation");

            // verify the required parameter 'overpaymentID' is set
            if (overpaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'overpaymentID' when calling AccountingApi->CreateOverpaymentAllocation");

            // verify the required parameter 'allocations' is set
            if (allocations == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreateOverpaymentAllocation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (overpaymentID != null)
                requestOptions.PathParameters.Add("OverpaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = allocations;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Allocations>("/Overpayments/{OverpaymentID}/Allocations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateOverpaymentAllocation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create history records of an Overpayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateOverpaymentHistoryAsync (string accessToken, string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateOverpaymentHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, overpaymentID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create history records of an Overpayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateOverpaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateOverpaymentHistory");

            // verify the required parameter 'overpaymentID' is set
            if (overpaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'overpaymentID' when calling AccountingApi->CreateOverpaymentHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateOverpaymentHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (overpaymentID != null)
                requestOptions.PathParameters.Add("OverpaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Overpayments/{OverpaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateOverpaymentHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments"></param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> CreatePaymentAsync (string accessToken, string xeroTenantId, Payments payments)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Payments> localVarResponse = await CreatePaymentAsyncWithHttpInfo(accessToken, xeroTenantId, payments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payments"></param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Payments>> CreatePaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Payments payments)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePayment");

            // verify the required parameter 'payments' is set
            if (payments == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payments' when calling AccountingApi->CreatePayment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payments;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Payments>("/Payments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a history record for a payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreatePaymentHistoryAsync (string accessToken, string xeroTenantId, Guid paymentID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreatePaymentHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, paymentID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a history record for a payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreatePaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePaymentHistory");

            // verify the required parameter 'paymentID' is set
            if (paymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentID' when calling AccountingApi->CreatePaymentHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePaymentHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paymentID != null)
                requestOptions.PathParameters.Add("PaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Payments/{PaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePaymentHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create payment services 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices"></param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> CreatePaymentServiceAsync (string accessToken, string xeroTenantId, PaymentServices paymentServices)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices> localVarResponse = await CreatePaymentServiceAsyncWithHttpInfo(accessToken, xeroTenantId, paymentServices);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create payment services 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentServices"></param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices>> CreatePaymentServiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, PaymentServices paymentServices)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePaymentService");

            // verify the required parameter 'paymentServices' is set
            if (paymentServices == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentServices' when calling AccountingApi->CreatePaymentService");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = paymentServices;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<PaymentServices>("/PaymentServices", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePaymentService", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create an Allocation for prepayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID"></param>
        /// <param name="allocations"></param>
        /// <returns>Task of Allocations</returns>
        public async System.Threading.Tasks.Task<Allocations> CreatePrepaymentAllocationAsync (string accessToken, string xeroTenantId, Guid prepaymentID, Allocations allocations)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Allocations> localVarResponse = await CreatePrepaymentAllocationAsyncWithHttpInfo(accessToken, xeroTenantId, prepaymentID, allocations);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create an Allocation for prepayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID"></param>
        /// <param name="allocations"></param>
        /// <returns>Task of ApiResponse (Allocations)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Allocations>> CreatePrepaymentAllocationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID, Allocations allocations)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePrepaymentAllocation");

            // verify the required parameter 'prepaymentID' is set
            if (prepaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'prepaymentID' when calling AccountingApi->CreatePrepaymentAllocation");

            // verify the required parameter 'allocations' is set
            if (allocations == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'allocations' when calling AccountingApi->CreatePrepaymentAllocation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (prepaymentID != null)
                requestOptions.PathParameters.Add("PrepaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = allocations;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Allocations>("/Prepayments/{PrepaymentID}/Allocations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePrepaymentAllocation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create a history record for an Prepayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreatePrepaymentHistoryAsync (string accessToken, string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreatePrepaymentHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, prepaymentID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create a history record for an Prepayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreatePrepaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePrepaymentHistory");

            // verify the required parameter 'prepaymentID' is set
            if (prepaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'prepaymentID' when calling AccountingApi->CreatePrepaymentHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePrepaymentHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (prepaymentID != null)
                requestOptions.PathParameters.Add("PrepaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Prepayments/{PrepaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePrepaymentHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">shows validation errors for each purchase order. (optional)</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> CreatePurchaseOrderAsync (string accessToken, string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders> localVarResponse = await CreatePurchaseOrderAsyncWithHttpInfo(accessToken, xeroTenantId, purchaseOrders, summarizeErrors);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrders"></param>
        /// <param name="summarizeErrors">shows validation errors for each purchase order. (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders>> CreatePurchaseOrderAsyncWithHttpInfo (string accessToken, string xeroTenantId, PurchaseOrders purchaseOrders, bool? summarizeErrors = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrder");

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->CreatePurchaseOrder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (summarizeErrors != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "SummarizeErrors", summarizeErrors))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = purchaseOrders;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<PurchaseOrders>("/PurchaseOrders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePurchaseOrder", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create HistoryRecord for purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreatePurchaseOrderHistoryAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreatePurchaseOrderHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, purchaseOrderID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create HistoryRecord for purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreatePurchaseOrderHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreatePurchaseOrderHistory");

            // verify the required parameter 'purchaseOrderID' is set
            if (purchaseOrderID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'purchaseOrderID' when calling AccountingApi->CreatePurchaseOrderHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreatePurchaseOrderHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (purchaseOrderID != null)
                requestOptions.PathParameters.Add("PurchaseOrderID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/PurchaseOrders/{PurchaseOrderID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePurchaseOrderHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts"></param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> CreateReceiptAsync (string accessToken, string xeroTenantId, Receipts receipts)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts> localVarResponse = await CreateReceiptAsyncWithHttpInfo(accessToken, xeroTenantId, receipts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receipts"></param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts>> CreateReceiptAsyncWithHttpInfo (string accessToken, string xeroTenantId, Receipts receipts)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceipt");

            // verify the required parameter 'receipts' is set
            if (receipts == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receipts' when calling AccountingApi->CreateReceipt");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = receipts;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Receipts>("/Receipts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReceipt", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create Attachment on expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateReceiptAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateReceiptAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create Attachment on expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateReceiptAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceiptAttachmentByFileName");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->CreateReceiptAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateReceiptAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateReceiptAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/Receipts/{ReceiptID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReceiptAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an Receipt 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateReceiptHistoryAsync (string accessToken, string xeroTenantId, Guid receiptID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateReceiptHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an Receipt 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateReceiptHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateReceiptHistory");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->CreateReceiptHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateReceiptHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/Receipts/{ReceiptID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReceiptHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create attachment on repeating invoices by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> CreateRepeatingInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await CreateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create attachment on repeating invoices by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> CreateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->CreateRepeatingInvoiceAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRepeatingInvoiceAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create history for a repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> CreateRepeatingInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await CreateRepeatingInvoiceHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID, historyRecords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create history for a repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="historyRecords"></param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> CreateRepeatingInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, HistoryRecords historyRecords)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateRepeatingInvoiceHistory");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->CreateRepeatingInvoiceHistory");

            // verify the required parameter 'historyRecords' is set
            if (historyRecords == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'historyRecords' when calling AccountingApi->CreateRepeatingInvoiceHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = historyRecords;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<HistoryRecords>("/RepeatingInvoices/{RepeatingInvoiceID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRepeatingInvoiceHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create Tax Rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> CreateTaxRateAsync (string accessToken, string xeroTenantId, TaxRates taxRates)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TaxRates> localVarResponse = await CreateTaxRateAsyncWithHttpInfo(accessToken, xeroTenantId, taxRates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create Tax Rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TaxRates>> CreateTaxRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, TaxRates taxRates)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTaxRate");

            // verify the required parameter 'taxRates' is set
            if (taxRates == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'taxRates' when calling AccountingApi->CreateTaxRate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = taxRates;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<TaxRates>("/TaxRates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTaxRate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> CreateTrackingCategoryAsync (string accessToken, string xeroTenantId, TrackingCategory trackingCategory)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories> localVarResponse = await CreateTrackingCategoryAsyncWithHttpInfo(accessToken, xeroTenantId, trackingCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories>> CreateTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, TrackingCategory trackingCategory)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTrackingCategory");

            // verify the required parameter 'trackingCategory' is set
            if (trackingCategory == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingCategory' when calling AccountingApi->CreateTrackingCategory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = trackingCategory;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<TrackingCategories>("/TrackingCategories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTrackingCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to create options for a specified tracking category 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption"></param>
        /// <returns>Task of TrackingOptions</returns>
        public async System.Threading.Tasks.Task<TrackingOptions> CreateTrackingOptionsAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingOptions> localVarResponse = await CreateTrackingOptionsAsyncWithHttpInfo(accessToken, xeroTenantId, trackingCategoryID, trackingOption);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to create options for a specified tracking category 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOption"></param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingOptions>> CreateTrackingOptionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingOption trackingOption)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->CreateTrackingOptions");

            // verify the required parameter 'trackingCategoryID' is set
            if (trackingCategoryID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingCategoryID' when calling AccountingApi->CreateTrackingOptions");

            // verify the required parameter 'trackingOption' is set
            if (trackingOption == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingOption' when calling AccountingApi->CreateTrackingOptions");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (trackingCategoryID != null)
                requestOptions.PathParameters.Add("TrackingCategoryID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = trackingOption;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTrackingOptions", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete a chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> DeleteAccountAsync (string accessToken, string xeroTenantId, Guid accountID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts> localVarResponse = await DeleteAccountAsyncWithHttpInfo(accessToken, xeroTenantId, accountID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to delete a chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts>> DeleteAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteAccount");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->DeleteAccount");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Accounts>("/Accounts/{AccountID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteAccount", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete a specific Contact from a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactGroupContactAsync (string accessToken, string xeroTenantId, Guid contactGroupID, Guid contactID)
        {
             await DeleteContactGroupContactAsyncWithHttpInfo(accessToken, xeroTenantId, contactGroupID, contactID);

        }

        /// <summary>
        /// Allows you to delete a specific Contact from a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> DeleteContactGroupContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID, Guid contactID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteContactGroupContact");

            // verify the required parameter 'contactGroupID' is set
            if (contactGroupID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactGroupID' when calling AccountingApi->DeleteContactGroupContact");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->DeleteContactGroupContact");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactGroupID != null)
                requestOptions.PathParameters.Add("ContactGroupID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/ContactGroups/{ContactGroupID}/Contacts/{ContactID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteContactGroupContact", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete  all Contacts from a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactGroupContactsAsync (string accessToken, string xeroTenantId, Guid contactGroupID)
        {
             await DeleteContactGroupContactsAsyncWithHttpInfo(accessToken, xeroTenantId, contactGroupID);

        }

        /// <summary>
        /// Allows you to delete  all Contacts from a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> DeleteContactGroupContactsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteContactGroupContacts");

            // verify the required parameter 'contactGroupID' is set
            if (contactGroupID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactGroupID' when calling AccountingApi->DeleteContactGroupContacts");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactGroupID != null)
                requestOptions.PathParameters.Add("ContactGroupID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/ContactGroups/{ContactGroupID}/Contacts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteContactGroupContacts", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete a specified item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemAsync (string accessToken, string xeroTenantId, Guid itemID)
        {
             await DeleteItemAsyncWithHttpInfo(accessToken, xeroTenantId, itemID);

        }

        /// <summary>
        /// Allows you to delete a specified item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> DeleteItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteItem");

            // verify the required parameter 'itemID' is set
            if (itemID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'itemID' when calling AccountingApi->DeleteItem");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (itemID != null)
                requestOptions.PathParameters.Add("ItemID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/Items/{ItemID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete a specified linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLinkedTransactionAsync (string accessToken, string xeroTenantId, Guid linkedTransactionID)
        {
             await DeleteLinkedTransactionAsyncWithHttpInfo(accessToken, xeroTenantId, linkedTransactionID);

        }

        /// <summary>
        /// Allows you to delete a specified linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> DeleteLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid linkedTransactionID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteLinkedTransaction");

            // verify the required parameter 'linkedTransactionID' is set
            if (linkedTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'linkedTransactionID' when calling AccountingApi->DeleteLinkedTransaction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (linkedTransactionID != null)
                requestOptions.PathParameters.Add("LinkedTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/LinkedTransactions/{LinkedTransactionID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteLinkedTransaction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specified payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="payments"></param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> DeletePaymentAsync (string accessToken, string xeroTenantId, Guid paymentID, Payments payments)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Payments> localVarResponse = await DeletePaymentAsyncWithHttpInfo(accessToken, xeroTenantId, paymentID, payments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specified payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <param name="payments"></param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Payments>> DeletePaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID, Payments payments)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeletePayment");

            // verify the required parameter 'paymentID' is set
            if (paymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentID' when calling AccountingApi->DeletePayment");

            // verify the required parameter 'payments' is set
            if (payments == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payments' when calling AccountingApi->DeletePayment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paymentID != null)
                requestOptions.PathParameters.Add("PaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payments;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Payments>("/Payments/{PaymentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeletePayment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> DeleteTrackingCategoryAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories> localVarResponse = await DeleteTrackingCategoryAsyncWithHttpInfo(accessToken, xeroTenantId, trackingCategoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to delete tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories>> DeleteTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteTrackingCategory");

            // verify the required parameter 'trackingCategoryID' is set
            if (trackingCategoryID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingCategoryID' when calling AccountingApi->DeleteTrackingCategory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (trackingCategoryID != null)
                requestOptions.PathParameters.Add("TrackingCategoryID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTrackingCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to delete a specified option for a specified tracking category 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <returns>Task of TrackingOptions</returns>
        public async System.Threading.Tasks.Task<TrackingOptions> DeleteTrackingOptionsAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingOptions> localVarResponse = await DeleteTrackingOptionsAsyncWithHttpInfo(accessToken, xeroTenantId, trackingCategoryID, trackingOptionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to delete a specified option for a specified tracking category 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingOptionID">Unique identifier for a Tracking Option</param>
        /// <returns>Task of ApiResponse (TrackingOptions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingOptions>> DeleteTrackingOptionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID, Guid trackingOptionID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->DeleteTrackingOptions");

            // verify the required parameter 'trackingCategoryID' is set
            if (trackingCategoryID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingCategoryID' when calling AccountingApi->DeleteTrackingOptions");

            // verify the required parameter 'trackingOptionID' is set
            if (trackingOptionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingOptionID' when calling AccountingApi->DeleteTrackingOptions");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (trackingCategoryID != null)
                requestOptions.PathParameters.Add("TrackingCategoryID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            if (trackingOptionID != null)
                requestOptions.PathParameters.Add("TrackingOptionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(trackingOptionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<TrackingOptions>("/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTrackingOptions", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to email a copy of invoice to related Contact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmailInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty)
        {
             await EmailInvoiceAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, requestEmpty);

        }

        /// <summary>
        /// Allows you to email a copy of invoice to related Contact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="requestEmpty"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> EmailInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, RequestEmpty requestEmpty)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->EmailInvoice");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->EmailInvoice");

            // verify the required parameter 'requestEmpty' is set
            if (requestEmpty == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'requestEmpty' when calling AccountingApi->EmailInvoice");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = requestEmpty;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Object>("/Invoices/{InvoiceID}/Email", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmailInvoice", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a single chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> GetAccountAsync (string accessToken, string xeroTenantId, Guid accountID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts> localVarResponse = await GetAccountAsyncWithHttpInfo(accessToken, xeroTenantId, accountID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a single chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts>> GetAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccount");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->GetAccount");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Accounts>("/Accounts/{AccountID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccount", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachment on Account by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid accountID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetAccountAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, accountID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachment on Account by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetAccountAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachmentByFileName");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->GetAccountAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetAccountAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetAccountAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Accounts/{AccountID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccountAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve specific Attachment on Account 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetAccountAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid accountID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetAccountAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, accountID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve specific Attachment on Account 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="attachmentID">Unique identifier for Attachment object</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetAccountAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachmentById");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->GetAccountAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetAccountAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetAccountAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Accounts/{AccountID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccountAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments for accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetAccountAttachmentsAsync (string accessToken, string xeroTenantId, Guid accountID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetAccountAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, accountID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments for accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetAccountAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccountAttachments");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->GetAccountAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/Accounts/{AccountID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccountAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve the full chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> GetAccountsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts> localVarResponse = await GetAccountsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve the full chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts>> GetAccountsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetAccounts");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Accounts>("/Accounts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccounts", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a single spend or receive money transaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> GetBankTransactionAsync (string accessToken, string xeroTenantId, Guid bankTransactionID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions> localVarResponse = await GetBankTransactionAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a single spend or receive money transaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions>> GetBankTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransaction");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->GetBankTransaction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BankTransactions>("/BankTransactions/{BankTransactionID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransaction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on BankTransaction by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransactionAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on BankTransaction by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachmentByFileName");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->GetBankTransactionAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetBankTransactionAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransactionAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransactionAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on a specific BankTransaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Xero generated unique identifier for an attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransactionAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransactionAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on a specific BankTransaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="attachmentID">Xero generated unique identifier for an attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetBankTransactionAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachmentById");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->GetBankTransactionAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetBankTransactionAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransactionAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransactionAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any attachments to bank transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetBankTransactionAttachmentsAsync (string accessToken, string xeroTenantId, Guid bankTransactionID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetBankTransactionAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any attachments to bank transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetBankTransactionAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionAttachments");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->GetBankTransactionAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/BankTransactions/{BankTransactionID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransactionAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any spend or receive money transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 bank transactions will be returned in a single API call with line items shown for each bank transaction (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> GetBankTransactionsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions> localVarResponse = await GetBankTransactionsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, unitdp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any spend or receive money transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 bank transactions will be returned in a single API call with line items shown for each bank transaction (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions>> GetBankTransactionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactions");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unitdp != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BankTransactions>("/BankTransactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransactions", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve history from a bank transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetBankTransactionsHistoryAsync (string accessToken, string xeroTenantId, Guid bankTransactionID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetBankTransactionsHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve history from a bank transactions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetBankTransactionsHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransactionsHistory");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->GetBankTransactionsHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/BankTransactions/{BankTransactionID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransactionsHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of BankTransfers</returns>
        public async System.Threading.Tasks.Task<BankTransfers> GetBankTransferAsync (string accessToken, string xeroTenantId, Guid bankTransferID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransfers> localVarResponse = await GetBankTransferAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransfers>> GetBankTransferAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransfer");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->GetBankTransfer");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BankTransfers>("/BankTransfers/{BankTransferID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransfer", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransferAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachmentByFileName");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->GetBankTransferAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetBankTransferAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransferAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransferAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Xero generated unique identifier for an Attachment to a bank transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetBankTransferAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetBankTransferAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on BankTransfer 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="attachmentID">Xero generated unique identifier for an Attachment to a bank transfer</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetBankTransferAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachmentById");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->GetBankTransferAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetBankTransferAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetBankTransferAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/BankTransfers/{BankTransferID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransferAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments from  bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetBankTransferAttachmentsAsync (string accessToken, string xeroTenantId, Guid bankTransferID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetBankTransferAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments from  bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetBankTransferAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferAttachments");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->GetBankTransferAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/BankTransfers/{BankTransferID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransferAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve history from a bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetBankTransferHistoryAsync (string accessToken, string xeroTenantId, Guid bankTransferID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetBankTransferHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve history from a bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetBankTransferHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransferHistory");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->GetBankTransferHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/BankTransfers/{BankTransferID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransferHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve all bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of BankTransfers</returns>
        public async System.Threading.Tasks.Task<BankTransfers> GetBankTransfersAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransfers> localVarResponse = await GetBankTransfersAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve all bank transfers 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (BankTransfers)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransfers>> GetBankTransfersAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBankTransfers");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BankTransfers>("/BankTransfers", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankTransfers", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve history from a Batch Payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetBatchPaymentHistoryAsync (string accessToken, string xeroTenantId, Guid batchPaymentID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetBatchPaymentHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, batchPaymentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve history from a Batch Payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="batchPaymentID">Unique identifier for BatchPayment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetBatchPaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid batchPaymentID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPaymentHistory");

            // verify the required parameter 'batchPaymentID' is set
            if (batchPaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'batchPaymentID' when calling AccountingApi->GetBatchPaymentHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (batchPaymentID != null)
                requestOptions.PathParameters.Add("BatchPaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(batchPaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/BatchPayments/{BatchPaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBatchPaymentHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieve either one or many BatchPayments for invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of BatchPayments</returns>
        public async System.Threading.Tasks.Task<BatchPayments> GetBatchPaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BatchPayments> localVarResponse = await GetBatchPaymentsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve either one or many BatchPayments for invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (BatchPayments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BatchPayments>> GetBatchPaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBatchPayments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BatchPayments>("/BatchPayments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBatchPayments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specific BrandingThemes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of BrandingThemes</returns>
        public async System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemeAsync (string accessToken, string xeroTenantId, Guid brandingThemeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BrandingThemes> localVarResponse = await GetBrandingThemeAsyncWithHttpInfo(accessToken, xeroTenantId, brandingThemeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specific BrandingThemes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BrandingThemes>> GetBrandingThemeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid brandingThemeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingTheme");

            // verify the required parameter 'brandingThemeID' is set
            if (brandingThemeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'brandingThemeID' when calling AccountingApi->GetBrandingTheme");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (brandingThemeID != null)
                requestOptions.PathParameters.Add("BrandingThemeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BrandingThemes>("/BrandingThemes/{BrandingThemeID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBrandingTheme", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve the Payment services for a Branding Theme 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> GetBrandingThemePaymentServicesAsync (string accessToken, string xeroTenantId, Guid brandingThemeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices> localVarResponse = await GetBrandingThemePaymentServicesAsyncWithHttpInfo(accessToken, xeroTenantId, brandingThemeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve the Payment services for a Branding Theme 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="brandingThemeID">Unique identifier for a Branding Theme</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices>> GetBrandingThemePaymentServicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid brandingThemeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingThemePaymentServices");

            // verify the required parameter 'brandingThemeID' is set
            if (brandingThemeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'brandingThemeID' when calling AccountingApi->GetBrandingThemePaymentServices");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (brandingThemeID != null)
                requestOptions.PathParameters.Add("BrandingThemeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(brandingThemeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaymentServices>("/BrandingThemes/{BrandingThemeID}/PaymentServices", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBrandingThemePaymentServices", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve all the BrandingThemes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of BrandingThemes</returns>
        public async System.Threading.Tasks.Task<BrandingThemes> GetBrandingThemesAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BrandingThemes> localVarResponse = await GetBrandingThemesAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve all the BrandingThemes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (BrandingThemes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BrandingThemes>> GetBrandingThemesAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetBrandingThemes");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BrandingThemes>("/BrandingThemes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBrandingThemes", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> GetContactAsync (string accessToken, string xeroTenantId, Guid contactID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts> localVarResponse = await GetContactAsyncWithHttpInfo(accessToken, xeroTenantId, contactID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts>> GetContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContact");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->GetContact");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Contacts>("/Contacts/{ContactID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContact", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on Contacts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid contactID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetContactAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, contactID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on Contacts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetContactAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachmentByFileName");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->GetContactAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetContactAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetContactAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Contacts/{ContactID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContactAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on Contacts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetContactAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid contactID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetContactAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, contactID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on Contacts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetContactAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachmentById");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->GetContactAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetContactAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetContactAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Contacts/{ContactID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContactAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetContactAttachmentsAsync (string accessToken, string xeroTenantId, Guid contactID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetContactAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, contactID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetContactAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactAttachments");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->GetContactAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/Contacts/{ContactID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContactAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve CISSettings for a contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of CISSettings</returns>
        public async System.Threading.Tasks.Task<CISSettings> GetContactCISSettingsAsync (string accessToken, string xeroTenantId, Guid contactID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<CISSettings> localVarResponse = await GetContactCISSettingsAsyncWithHttpInfo(accessToken, xeroTenantId, contactID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve CISSettings for a contact in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (CISSettings)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<CISSettings>> GetContactCISSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactCISSettings");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->GetContactCISSettings");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<CISSettings>("/Contacts/{ContactID}/CISSettings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContactCISSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a unique Contract Group by ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> GetContactGroupAsync (string accessToken, string xeroTenantId, Guid contactGroupID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups> localVarResponse = await GetContactGroupAsyncWithHttpInfo(accessToken, xeroTenantId, contactGroupID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a unique Contract Group by ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups>> GetContactGroupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactGroup");

            // verify the required parameter 'contactGroupID' is set
            if (contactGroupID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactGroupID' when calling AccountingApi->GetContactGroup");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactGroupID != null)
                requestOptions.PathParameters.Add("ContactGroupID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ContactGroups>("/ContactGroups/{ContactGroupID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContactGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve the ContactID and Name of all the contacts in a contact group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> GetContactGroupsAsync (string accessToken, string xeroTenantId, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups> localVarResponse = await GetContactGroupsAsyncWithHttpInfo(accessToken, xeroTenantId, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve the ContactID and Name of all the contacts in a contact group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups>> GetContactGroupsAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactGroups");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ContactGroups>("/ContactGroups", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContactGroups", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an Contact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetContactHistoryAsync (string accessToken, string xeroTenantId, Guid contactID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetContactHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, contactID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an Contact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetContactHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContactHistory");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->GetContactHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Contacts/{ContactID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContactHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> GetContactsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, int? page = null, bool? includeArchived = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts> localVarResponse = await GetContactsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, iDs, page, includeArchived);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve, add and update contacts in a Xero organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call. (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts>> GetContactsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, int? page = null, bool? includeArchived = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetContacts");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (iDs != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "IDs", iDs))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (includeArchived != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Contacts>("/Contacts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetContacts", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specific credit note 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> GetCreditNoteAsync (string accessToken, string xeroTenantId, Guid creditNoteID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes> localVarResponse = await GetCreditNoteAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specific credit note 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes>> GetCreditNoteAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNote");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->GetCreditNote");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<CreditNotes>("/CreditNotes/{CreditNoteID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreditNote", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Credit Note as PDF files 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAsPdfAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCreditNoteAsPdfAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Credit Note as PDF files 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetCreditNoteAsPdfAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAsPdf");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->GetCreditNoteAsPdf");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetCreditNoteAsPdf");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/CreditNotes/{CreditNoteID}/pdf", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreditNoteAsPdf", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCreditNoteAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachmentByFileName");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->GetCreditNoteAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetCreditNoteAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetCreditNoteAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreditNoteAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCreditNoteAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetCreditNoteAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetCreditNoteAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachmentById");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->GetCreditNoteAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetCreditNoteAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetCreditNoteAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreditNoteAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments for credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetCreditNoteAttachmentsAsync (string accessToken, string xeroTenantId, Guid creditNoteID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetCreditNoteAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments for credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetCreditNoteAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteAttachments");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->GetCreditNoteAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/CreditNotes/{CreditNoteID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreditNoteAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetCreditNoteHistoryAsync (string accessToken, string xeroTenantId, Guid creditNoteID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetCreditNoteHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an CreditNote 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetCreditNoteHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNoteHistory");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->GetCreditNoteHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/CreditNotes/{CreditNoteID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreditNoteHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> GetCreditNotesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes> localVarResponse = await GetCreditNotesAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note (optional)</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes>> GetCreditNotesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCreditNotes");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<CreditNotes>("/CreditNotes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCreditNotes", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve currencies for your organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Currencies</returns>
        public async System.Threading.Tasks.Task<Currencies> GetCurrenciesAsync (string accessToken, string xeroTenantId, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Currencies> localVarResponse = await GetCurrenciesAsyncWithHttpInfo(accessToken, xeroTenantId, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve currencies for your organisation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Currencies)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Currencies>> GetCurrenciesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetCurrencies");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Currencies>("/Currencies", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCurrencies", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specific employee used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await GetEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specific employee used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetEmployee");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling AccountingApi->GetEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Employees>("/Employees/{EmployeeID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await GetEmployeesAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve employees used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetEmployees");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Employees>("/Employees", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployees", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified expense claim 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimAsync (string accessToken, string xeroTenantId, Guid expenseClaimID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims> localVarResponse = await GetExpenseClaimAsyncWithHttpInfo(accessToken, xeroTenantId, expenseClaimID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified expense claim 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims>> GetExpenseClaimAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaim");

            // verify the required parameter 'expenseClaimID' is set
            if (expenseClaimID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'expenseClaimID' when calling AccountingApi->GetExpenseClaim");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (expenseClaimID != null)
                requestOptions.PathParameters.Add("ExpenseClaimID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ExpenseClaims>("/ExpenseClaims/{ExpenseClaimID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExpenseClaim", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an ExpenseClaim 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetExpenseClaimHistoryAsync (string accessToken, string xeroTenantId, Guid expenseClaimID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetExpenseClaimHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, expenseClaimID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an ExpenseClaim 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetExpenseClaimHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaimHistory");

            // verify the required parameter 'expenseClaimID' is set
            if (expenseClaimID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'expenseClaimID' when calling AccountingApi->GetExpenseClaimHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (expenseClaimID != null)
                requestOptions.PathParameters.Add("ExpenseClaimID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/ExpenseClaims/{ExpenseClaimID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExpenseClaimHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve expense claims 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> GetExpenseClaimsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims> localVarResponse = await GetExpenseClaimsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve expense claims 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims>> GetExpenseClaimsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetExpenseClaims");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ExpenseClaims>("/ExpenseClaims", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExpenseClaims", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified sales invoice or purchase bill 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> GetInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices> localVarResponse = await GetInvoiceAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified sales invoice or purchase bill 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices>> GetInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoice");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->GetInvoice");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Invoices>("/Invoices/{InvoiceID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoice", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve invoices or purchase bills as PDF files 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAsPdfAsync (string accessToken, string xeroTenantId, Guid invoiceID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetInvoiceAsPdfAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve invoices or purchase bills as PDF files 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetInvoiceAsPdfAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAsPdf");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->GetInvoiceAsPdf");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetInvoiceAsPdf");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Invoices/{InvoiceID}/pdf", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoiceAsPdf", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachment on invoices or purchase bills by it&#39;s filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetInvoiceAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachment on invoices or purchase bills by it&#39;s filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachmentByFileName");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->GetInvoiceAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetInvoiceAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetInvoiceAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Invoices/{InvoiceID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoiceAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified Attachment on invoices or purchase bills by it&#39;s ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for an Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetInvoiceAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetInvoiceAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified Attachment on invoices or purchase bills by it&#39;s ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="attachmentID">Unique identifier for an Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetInvoiceAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachmentById");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->GetInvoiceAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetInvoiceAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetInvoiceAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Invoices/{InvoiceID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoiceAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetInvoiceAttachmentsAsync (string accessToken, string xeroTenantId, Guid invoiceID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetInvoiceAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetInvoiceAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceAttachments");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->GetInvoiceAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/Invoices/{InvoiceID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoiceAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid invoiceID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetInvoiceHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceHistory");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->GetInvoiceHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Invoices/{InvoiceID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoiceHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve invoice reminder settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of InvoiceReminders</returns>
        public async System.Threading.Tasks.Task<InvoiceReminders> GetInvoiceRemindersAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<InvoiceReminders> localVarResponse = await GetInvoiceRemindersAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve invoice reminder settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (InvoiceReminders)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<InvoiceReminders>> GetInvoiceRemindersAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoiceReminders");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<InvoiceReminders>("/InvoiceReminders/Settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoiceReminders", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> GetInvoicesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, string invoiceNumbers = null, string contactIDs = null, string statuses = null, int? page = null, bool? includeArchived = null, bool? createdByMyApp = null, int? unitdp = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices> localVarResponse = await GetInvoicesAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, iDs, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="iDs">Filter by a comma-separated list of InvoicesIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="invoiceNumbers">Filter by a comma-separated list of InvoiceNumbers. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="contactIDs">Filter by a comma-separated list of ContactIDs. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="statuses">Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter. (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response (optional)</param>
        /// <param name="createdByMyApp">When set to true you&#39;ll only retrieve Invoices created by your app (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices>> GetInvoicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, string iDs = null, string invoiceNumbers = null, string contactIDs = null, string statuses = null, int? page = null, bool? includeArchived = null, bool? createdByMyApp = null, int? unitdp = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetInvoices");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (iDs != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "IDs", iDs))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (invoiceNumbers != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "InvoiceNumbers", invoiceNumbers))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contactIDs != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "ContactIDs", contactIDs))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (statuses != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "Statuses", statuses))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (includeArchived != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (createdByMyApp != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "createdByMyApp", createdByMyApp))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unitdp != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Invoices>("/Invoices", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInvoices", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> GetItemAsync (string accessToken, string xeroTenantId, Guid itemID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Items> localVarResponse = await GetItemAsyncWithHttpInfo(accessToken, xeroTenantId, itemID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Items>> GetItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItem");

            // verify the required parameter 'itemID' is set
            if (itemID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'itemID' when calling AccountingApi->GetItem");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (itemID != null)
                requestOptions.PathParameters.Add("ItemID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Items>("/Items/{ItemID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve history for items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetItemHistoryAsync (string accessToken, string xeroTenantId, Guid itemID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetItemHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, itemID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve history for items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetItemHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItemHistory");

            // verify the required parameter 'itemID' is set
            if (itemID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'itemID' when calling AccountingApi->GetItemHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (itemID != null)
                requestOptions.PathParameters.Add("ItemID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Items/{ItemID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItemHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> GetItemsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Items> localVarResponse = await GetItemsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, unitdp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Items>> GetItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetItems");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unitdp != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Items>("/Items", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified journals. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <returns>Task of Journals</returns>
        public async System.Threading.Tasks.Task<Journals> GetJournalAsync (string accessToken, string xeroTenantId, Guid journalID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Journals> localVarResponse = await GetJournalAsyncWithHttpInfo(accessToken, xeroTenantId, journalID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified journals. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="journalID">Unique identifier for a Journal</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Journals>> GetJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid journalID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournal");

            // verify the required parameter 'journalID' is set
            if (journalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'journalID' when calling AccountingApi->GetJournal");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (journalID != null)
                requestOptions.PathParameters.Add("JournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(journalID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Journals>("/Journals/{JournalID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetJournal", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any journals. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <returns>Task of Journals</returns>
        public async System.Threading.Tasks.Task<Journals> GetJournalsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, int? offset = null, bool? paymentsOnly = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Journals> localVarResponse = await GetJournalsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, offset, paymentsOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any journals. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="offset">Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned (optional)</param>
        /// <param name="paymentsOnly">Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default. (optional)</param>
        /// <returns>Task of ApiResponse (Journals)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Journals>> GetJournalsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, int? offset = null, bool? paymentsOnly = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetJournals");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (offset != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (paymentsOnly != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Journals>("/Journals", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetJournals", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionAsync (string accessToken, string xeroTenantId, Guid linkedTransactionID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions> localVarResponse = await GetLinkedTransactionAsyncWithHttpInfo(accessToken, xeroTenantId, linkedTransactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions>> GetLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid linkedTransactionID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetLinkedTransaction");

            // verify the required parameter 'linkedTransactionID' is set
            if (linkedTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'linkedTransactionID' when calling AccountingApi->GetLinkedTransaction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (linkedTransactionID != null)
                requestOptions.PathParameters.Add("LinkedTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LinkedTransactions>("/LinkedTransactions/{LinkedTransactionID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLinkedTransaction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieve linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED. (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> GetLinkedTransactionsAsync (string accessToken, string xeroTenantId, int? page = null, string linkedTransactionID = null, string sourceTransactionID = null, string contactID = null, string status = null, string targetTransactionID = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions> localVarResponse = await GetLinkedTransactionsAsyncWithHttpInfo(accessToken, xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1. (optional)</param>
        /// <param name="linkedTransactionID">The Xero identifier for an Linked Transaction (optional)</param>
        /// <param name="sourceTransactionID">Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice (optional)</param>
        /// <param name="contactID">Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer. (optional)</param>
        /// <param name="status">Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID&#x3D;4bb34b03-3378-4bb2-a0ed-6345abf3224e&amp;Status&#x3D;APPROVED. (optional)</param>
        /// <param name="targetTransactionID">Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice (optional)</param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions>> GetLinkedTransactionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string linkedTransactionID = null, string sourceTransactionID = null, string contactID = null, string status = null, string targetTransactionID = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetLinkedTransactions");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (linkedTransactionID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "LinkedTransactionID", linkedTransactionID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sourceTransactionID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "SourceTransactionID", sourceTransactionID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contactID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "ContactID", contactID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (status != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "Status", status))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (targetTransactionID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "TargetTransactionID", targetTransactionID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LinkedTransactions>("/LinkedTransactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLinkedTransactions", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified manual journals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> GetManualJournalAsync (string accessToken, string xeroTenantId, Guid manualJournalID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals> localVarResponse = await GetManualJournalAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournalID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified manual journals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals>> GetManualJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournal");

            // verify the required parameter 'manualJournalID' is set
            if (manualJournalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournalID' when calling AccountingApi->GetManualJournal");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (manualJournalID != null)
                requestOptions.PathParameters.Add("ManualJournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ManualJournals>("/ManualJournals/{ManualJournalID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManualJournal", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournal by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetManualJournalAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournalID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournal by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachmentByFileName");

            // verify the required parameter 'manualJournalID' is set
            if (manualJournalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournalID' when calling AccountingApi->GetManualJournalAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetManualJournalAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetManualJournalAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (manualJournalID != null)
                requestOptions.PathParameters.Add("ManualJournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManualJournalAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetManualJournalAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetManualJournalAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournalID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve specified Attachment on ManualJournals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetManualJournalAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachmentById");

            // verify the required parameter 'manualJournalID' is set
            if (manualJournalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournalID' when calling AccountingApi->GetManualJournalAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetManualJournalAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetManualJournalAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (manualJournalID != null)
                requestOptions.PathParameters.Add("ManualJournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManualJournalAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachment for manual journals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetManualJournalAttachmentsAsync (string accessToken, string xeroTenantId, Guid manualJournalID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetManualJournalAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournalID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachment for manual journals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetManualJournalAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournalAttachments");

            // verify the required parameter 'manualJournalID' is set
            if (manualJournalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournalID' when calling AccountingApi->GetManualJournalAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (manualJournalID != null)
                requestOptions.PathParameters.Add("ManualJournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/ManualJournals/{ManualJournalID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManualJournalAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any manual journals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> GetManualJournalsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals> localVarResponse = await GetManualJournalsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any manual journals 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals>> GetManualJournalsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetManualJournals");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ManualJournals>("/ManualJournals", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetManualJournals", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a URL to an online invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of OnlineInvoices</returns>
        public async System.Threading.Tasks.Task<OnlineInvoices> GetOnlineInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<OnlineInvoices> localVarResponse = await GetOnlineInvoiceAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a URL to an online invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <returns>Task of ApiResponse (OnlineInvoices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<OnlineInvoices>> GetOnlineInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOnlineInvoice");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->GetOnlineInvoice");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<OnlineInvoices>("/Invoices/{InvoiceID}/OnlineInvoice", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOnlineInvoice", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you To verify if an organisation is using contruction industry scheme, you can retrieve the CIS settings for the organistaion. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID"></param>
        /// <returns>Task of CISOrgSetting</returns>
        public async System.Threading.Tasks.Task<CISOrgSetting> GetOrganisationCISSettingsAsync (string accessToken, string xeroTenantId, Guid organisationID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<CISOrgSetting> localVarResponse = await GetOrganisationCISSettingsAsyncWithHttpInfo(accessToken, xeroTenantId, organisationID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you To verify if an organisation is using contruction industry scheme, you can retrieve the CIS settings for the organistaion. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="organisationID"></param>
        /// <returns>Task of ApiResponse (CISOrgSetting)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<CISOrgSetting>> GetOrganisationCISSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid organisationID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisationCISSettings");

            // verify the required parameter 'organisationID' is set
            if (organisationID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'organisationID' when calling AccountingApi->GetOrganisationCISSettings");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (organisationID != null)
                requestOptions.PathParameters.Add("OrganisationID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(organisationID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<CISOrgSetting>("/Organisation/{OrganisationID}/CISSettings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOrganisationCISSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Organisation details 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Organisations</returns>
        public async System.Threading.Tasks.Task<Organisations> GetOrganisationsAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Organisations> localVarResponse = await GetOrganisationsAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Organisation details 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Organisations)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Organisations>> GetOrganisationsAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOrganisations");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Organisations>("/Organisation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOrganisations", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified overpayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of Overpayments</returns>
        public async System.Threading.Tasks.Task<Overpayments> GetOverpaymentAsync (string accessToken, string xeroTenantId, Guid overpaymentID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Overpayments> localVarResponse = await GetOverpaymentAsyncWithHttpInfo(accessToken, xeroTenantId, overpaymentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified overpayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Overpayments>> GetOverpaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpayment");

            // verify the required parameter 'overpaymentID' is set
            if (overpaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'overpaymentID' when calling AccountingApi->GetOverpayment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (overpaymentID != null)
                requestOptions.PathParameters.Add("OverpaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Overpayments>("/Overpayments/{OverpaymentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOverpayment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an Overpayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetOverpaymentHistoryAsync (string accessToken, string xeroTenantId, Guid overpaymentID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetOverpaymentHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, overpaymentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an Overpayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="overpaymentID">Unique identifier for a Overpayment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetOverpaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid overpaymentID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpaymentHistory");

            // verify the required parameter 'overpaymentID' is set
            if (overpaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'overpaymentID' when calling AccountingApi->GetOverpaymentHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (overpaymentID != null)
                requestOptions.PathParameters.Add("OverpaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(overpaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Overpayments/{OverpaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOverpaymentHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve overpayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Overpayments</returns>
        public async System.Threading.Tasks.Task<Overpayments> GetOverpaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Overpayments> localVarResponse = await GetOverpaymentsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, unitdp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve overpayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Overpayments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Overpayments>> GetOverpaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetOverpayments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unitdp != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Overpayments>("/Overpayments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOverpayments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> GetPaymentAsync (string accessToken, string xeroTenantId, Guid paymentID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Payments> localVarResponse = await GetPaymentAsyncWithHttpInfo(accessToken, xeroTenantId, paymentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified payment for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Payments>> GetPaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPayment");

            // verify the required parameter 'paymentID' is set
            if (paymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentID' when calling AccountingApi->GetPayment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paymentID != null)
                requestOptions.PathParameters.Add("PaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Payments>("/Payments/{PaymentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve history records of a payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetPaymentHistoryAsync (string accessToken, string xeroTenantId, Guid paymentID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetPaymentHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, paymentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve history records of a payment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paymentID">Unique identifier for a Payment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetPaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paymentID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPaymentHistory");

            // verify the required parameter 'paymentID' is set
            if (paymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentID' when calling AccountingApi->GetPaymentHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paymentID != null)
                requestOptions.PathParameters.Add("PaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Payments/{PaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaymentHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve payment services 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of PaymentServices</returns>
        public async System.Threading.Tasks.Task<PaymentServices> GetPaymentServicesAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices> localVarResponse = await GetPaymentServicesAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve payment services 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (PaymentServices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentServices>> GetPaymentServicesAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPaymentServices");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaymentServices>("/PaymentServices", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaymentServices", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Payments</returns>
        public async System.Threading.Tasks.Task<Payments> GetPaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Payments> localVarResponse = await GetPaymentsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve payments for invoices and credit notes 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Payments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Payments>> GetPaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPayments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Payments>("/Payments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified prepayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of Prepayments</returns>
        public async System.Threading.Tasks.Task<Prepayments> GetPrepaymentAsync (string accessToken, string xeroTenantId, Guid prepaymentID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Prepayments> localVarResponse = await GetPrepaymentAsyncWithHttpInfo(accessToken, xeroTenantId, prepaymentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified prepayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Prepayments>> GetPrepaymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepayment");

            // verify the required parameter 'prepaymentID' is set
            if (prepaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'prepaymentID' when calling AccountingApi->GetPrepayment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (prepaymentID != null)
                requestOptions.PathParameters.Add("PrepaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Prepayments>("/Prepayments/{PrepaymentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPrepayment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an Prepayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetPrepaymentHistoryAsync (string accessToken, string xeroTenantId, Guid prepaymentID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetPrepaymentHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, prepaymentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an Prepayment 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="prepaymentID">Unique identifier for a PrePayment</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetPrepaymentHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid prepaymentID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepaymentHistory");

            // verify the required parameter 'prepaymentID' is set
            if (prepaymentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'prepaymentID' when calling AccountingApi->GetPrepaymentHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (prepaymentID != null)
                requestOptions.PathParameters.Add("PrepaymentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(prepaymentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Prepayments/{PrepaymentID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPrepaymentHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve prepayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Prepayments</returns>
        public async System.Threading.Tasks.Task<Prepayments> GetPrepaymentsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Prepayments> localVarResponse = await GetPrepaymentsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, unitdp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve prepayments 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Prepayments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Prepayments>> GetPrepaymentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, int? unitdp = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPrepayments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unitdp != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Prepayments>("/Prepayments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPrepayments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrderAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders> localVarResponse = await GetPurchaseOrderAsyncWithHttpInfo(accessToken, xeroTenantId, purchaseOrderID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders>> GetPurchaseOrderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrder");

            // verify the required parameter 'purchaseOrderID' is set
            if (purchaseOrderID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'purchaseOrderID' when calling AccountingApi->GetPurchaseOrder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (purchaseOrderID != null)
                requestOptions.PathParameters.Add("PurchaseOrderID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPurchaseOrder", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve history for PurchaseOrder 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetPurchaseOrderHistoryAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetPurchaseOrderHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, purchaseOrderID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve history for PurchaseOrder 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetPurchaseOrderHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrderHistory");

            // verify the required parameter 'purchaseOrderID' is set
            if (purchaseOrderID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'purchaseOrderID' when calling AccountingApi->GetPurchaseOrderHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (purchaseOrderID != null)
                requestOptions.PathParameters.Add("PurchaseOrderID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/PurchaseOrders/{PurchaseOrderID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPurchaseOrderHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> GetPurchaseOrdersAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string status = null, string dateFrom = null, string dateTo = null, string order = null, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders> localVarResponse = await GetPurchaseOrdersAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve purchase orders 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="status">Filter by purchase order status (optional)</param>
        /// <param name="dateFrom">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="dateTo">Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31 (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned. (optional)</param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders>> GetPurchaseOrdersAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string status = null, string dateFrom = null, string dateTo = null, string order = null, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetPurchaseOrders");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (status != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "Status", status))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (dateFrom != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "DateFrom", dateFrom))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (dateTo != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "DateTo", dateTo))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PurchaseOrders>("/PurchaseOrders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPurchaseOrders", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> GetReceiptAsync (string accessToken, string xeroTenantId, Guid receiptID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts> localVarResponse = await GetReceiptAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts>> GetReceiptAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceipt");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->GetReceipt");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Receipts>("/Receipts/{ReceiptID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReceipt", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid receiptID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetReceiptAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetReceiptAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachmentByFileName");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->GetReceiptAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetReceiptAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetReceiptAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Receipts/{ReceiptID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReceiptAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetReceiptAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetReceiptAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on expense claim receipts by ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetReceiptAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachmentById");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->GetReceiptAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetReceiptAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetReceiptAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Receipts/{ReceiptID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReceiptAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments for expense claim receipts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetReceiptAttachmentsAsync (string accessToken, string xeroTenantId, Guid receiptID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetReceiptAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments for expense claim receipts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetReceiptAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptAttachments");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->GetReceiptAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/Receipts/{ReceiptID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReceiptAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a history records of an Receipt 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetReceiptHistoryAsync (string accessToken, string xeroTenantId, Guid receiptID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetReceiptHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a history records of an Receipt 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetReceiptHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceiptHistory");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->GetReceiptHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/Receipts/{ReceiptID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReceiptHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> GetReceiptsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts> localVarResponse = await GetReceiptsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, unitdp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve draft expense claim receipts for any user 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="unitdp">e.g. unitdp&#x3D;4 – You can opt in to use four decimal places for unit amounts (optional)</param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts>> GetReceiptsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? unitdp = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReceipts");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (unitdp != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "unitdp", unitdp))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Receipts>("/Receipts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReceipts", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of RepeatingInvoices</returns>
        public async System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoiceAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<RepeatingInvoices> localVarResponse = await GetRepeatingInvoiceAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<RepeatingInvoices>> GetRepeatingInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoice");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->GetRepeatingInvoice");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<RepeatingInvoices>("/RepeatingInvoices/{RepeatingInvoiceID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRepeatingInvoice", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve specified attachment on repeating invoices by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID, fileName, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve specified attachment on repeating invoices by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetRepeatingInvoiceAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRepeatingInvoiceAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified Attachments on repeating invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetRepeatingInvoiceAttachmentByIdAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetRepeatingInvoiceAttachmentByIdAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID, attachmentID, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified Attachments on repeating invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="attachmentID">Unique identifier for a Attachment</param>
        /// <param name="contentType">The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetRepeatingInvoiceAttachmentByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, Guid attachmentID, string contentType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");

            // verify the required parameter 'attachmentID' is set
            if (attachmentID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'attachmentID' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");

            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contentType' when calling AccountingApi->GetRepeatingInvoiceAttachmentById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (attachmentID != null)
                requestOptions.PathParameters.Add("AttachmentID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(attachmentID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (contentType != null)
                requestOptions.HeaderParameters.Add("contentType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contentType)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRepeatingInvoiceAttachmentById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Attachments on repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> GetRepeatingInvoiceAttachmentsAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await GetRepeatingInvoiceAttachmentsAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Attachments on repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> GetRepeatingInvoiceAttachmentsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceAttachments");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->GetRepeatingInvoiceAttachments");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRepeatingInvoiceAttachments", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve history for a repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of HistoryRecords</returns>
        public async System.Threading.Tasks.Task<HistoryRecords> GetRepeatingInvoiceHistoryAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords> localVarResponse = await GetRepeatingInvoiceHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve history for a repeating invoice 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <returns>Task of ApiResponse (HistoryRecords)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<HistoryRecords>> GetRepeatingInvoiceHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoiceHistory");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->GetRepeatingInvoiceHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<HistoryRecords>("/RepeatingInvoices/{RepeatingInvoiceID}/History", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRepeatingInvoiceHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve any repeating invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of RepeatingInvoices</returns>
        public async System.Threading.Tasks.Task<RepeatingInvoices> GetRepeatingInvoicesAsync (string accessToken, string xeroTenantId, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<RepeatingInvoices> localVarResponse = await GetRepeatingInvoicesAsyncWithHttpInfo(accessToken, xeroTenantId, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve any repeating invoices 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (RepeatingInvoices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<RepeatingInvoices>> GetRepeatingInvoicesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetRepeatingInvoices");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<RepeatingInvoices>("/RepeatingInvoices", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRepeatingInvoices", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for AgedPayablesByContact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Payables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Payables By Contact report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportAgedPayablesByContactAsync (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportAgedPayablesByContactAsyncWithHttpInfo(accessToken, xeroTenantId, contactId, date, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for AgedPayablesByContact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Payables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Payables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Payables By Contact report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportAgedPayablesByContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportAgedPayablesByContact");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactId' when calling AccountingApi->GetReportAgedPayablesByContact");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactId != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (date != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (fromDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (toDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/AgedPayablesByContact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportAgedPayablesByContact", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for AgedReceivablesByContact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Receivables By Contact report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportAgedReceivablesByContactAsync (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportAgedReceivablesByContactAsyncWithHttpInfo(accessToken, xeroTenantId, contactId, date, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for AgedReceivablesByContact 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactId">Unique identifier for a Contact</param>
        /// <param name="date">The date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="fromDate">The from date of the Aged Receivables By Contact report (optional)</param>
        /// <param name="toDate">The to date of the Aged Receivables By Contact report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportAgedReceivablesByContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactId, DateTime? date = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportAgedReceivablesByContact");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactId' when calling AccountingApi->GetReportAgedReceivablesByContact");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactId != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "contactId", contactId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (date != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (fromDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (toDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/AgedReceivablesByContact", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportAgedReceivablesByContact", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBASorGSTAsync (string accessToken, string xeroTenantId, string reportID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBASorGSTAsyncWithHttpInfo(accessToken, xeroTenantId, reportID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportID">Unique identifier for a Report</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportBASorGSTAsyncWithHttpInfo (string accessToken, string xeroTenantId, string reportID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBASorGST");

            // verify the required parameter 'reportID' is set
            if (reportID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'reportID' when calling AccountingApi->GetReportBASorGST");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (reportID != null)
                requestOptions.PathParameters.Add("ReportID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(reportID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/{ReportID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportBASorGST", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBASorGSTListAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBASorGSTListAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for BAS only valid for AU orgs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportBASorGSTListAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBASorGSTList");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportBASorGSTList", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for BalanceSheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBalanceSheetAsync (string accessToken, string xeroTenantId, string date = null, int? periods = null, string timeframe = null, string trackingOptionID1 = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBalanceSheetAsyncWithHttpInfo(accessToken, xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for BalanceSheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date of the Balance Sheet report (optional)</param>
        /// <param name="periods">The number of periods for the Balance Sheet report (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingOptionID1">The tracking option 1 for the Balance Sheet report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the Balance Sheet report (optional)</param>
        /// <param name="standardLayout">The standard layout boolean for the Balance Sheet report (optional)</param>
        /// <param name="paymentsOnly">return a cash basis for the Balance Sheet report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportBalanceSheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, string date = null, int? periods = null, string timeframe = null, string trackingOptionID1 = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBalanceSheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (date != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (periods != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "periods", periods))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeframe != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackingOptionID1 != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID1", trackingOptionID1))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackingOptionID2 != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID2", trackingOptionID2))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (standardLayout != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "standardLayout", standardLayout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (paymentsOnly != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/BalanceSheet", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportBalanceSheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for BankSummary 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBankSummaryAsync (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBankSummaryAsyncWithHttpInfo(accessToken, xeroTenantId, date, period, timeframe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for BankSummary 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportBankSummaryAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBankSummary");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (date != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (period != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "period", period))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeframe != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/BankSummary", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportBankSummary", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for Budget Summary 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportBudgetSummaryAsync (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportBudgetSummaryAsyncWithHttpInfo(accessToken, xeroTenantId, date, period, timeframe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for Budget Summary 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <param name="period">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year) (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportBudgetSummaryAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null, int? period = null, int? timeframe = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportBudgetSummary");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (date != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (period != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "period", period))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeframe != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/BudgetSummary", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportBudgetSummary", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for ExecutiveSummary 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportExecutiveSummaryAsync (string accessToken, string xeroTenantId, DateTime? date = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportExecutiveSummaryAsyncWithHttpInfo(accessToken, xeroTenantId, date);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for ExecutiveSummary 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Bank Summary report e.g. 2018-03-31 (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportExecutiveSummaryAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportExecutiveSummary");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (date != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/ExecutiveSummary", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportExecutiveSummary", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for ProfitAndLoss 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="toDate">The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportProfitAndLossAsync (string accessToken, string xeroTenantId, DateTime? fromDate = null, DateTime? toDate = null, int? periods = null, string timeframe = null, string trackingCategoryID = null, string trackingCategoryID2 = null, string trackingOptionID = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportProfitAndLossAsyncWithHttpInfo(accessToken, xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for ProfitAndLoss 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fromDate">The from date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="toDate">The to date for the ProfitAndLoss report e.g. 2018-03-31 (optional)</param>
        /// <param name="periods">The number of periods to compare (integer between 1 and 12) (optional)</param>
        /// <param name="timeframe">The period size to compare to (MONTH, QUARTER, YEAR) (optional)</param>
        /// <param name="trackingCategoryID">The trackingCategory 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingCategoryID2">The trackingCategory 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID">The tracking option 1 for the ProfitAndLoss report (optional)</param>
        /// <param name="trackingOptionID2">The tracking option 2 for the ProfitAndLoss report (optional)</param>
        /// <param name="standardLayout">Return the standard layout for the ProfitAndLoss report (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the ProfitAndLoss report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportProfitAndLossAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? fromDate = null, DateTime? toDate = null, int? periods = null, string timeframe = null, string trackingCategoryID = null, string trackingCategoryID2 = null, string trackingOptionID = null, string trackingOptionID2 = null, bool? standardLayout = null, bool? paymentsOnly = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportProfitAndLoss");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fromDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (toDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (periods != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "periods", periods))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (timeframe != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "timeframe", timeframe))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackingCategoryID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "trackingCategoryID", trackingCategoryID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackingCategoryID2 != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "trackingCategoryID2", trackingCategoryID2))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackingOptionID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID", trackingOptionID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (trackingOptionID2 != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "trackingOptionID2", trackingOptionID2))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (standardLayout != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "standardLayout", standardLayout))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (paymentsOnly != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/ProfitAndLoss", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportProfitAndLoss", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for TenNinetyNine 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <returns>Task of Reports</returns>
        public async System.Threading.Tasks.Task<Reports> GetReportTenNinetyNineAsync (string accessToken, string xeroTenantId, string reportYear = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Reports> localVarResponse = await GetReportTenNinetyNineAsyncWithHttpInfo(accessToken, xeroTenantId, reportYear);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for TenNinetyNine 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reportYear">The year of the 1099 report (optional)</param>
        /// <returns>Task of ApiResponse (Reports)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Reports>> GetReportTenNinetyNineAsyncWithHttpInfo (string accessToken, string xeroTenantId, string reportYear = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportTenNinetyNine");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (reportYear != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "reportYear", reportYear))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Reports>("/Reports/TenNinetyNine", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportTenNinetyNine", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve report for TrialBalance 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <returns>Task of ReportWithRows</returns>
        public async System.Threading.Tasks.Task<ReportWithRows> GetReportTrialBalanceAsync (string accessToken, string xeroTenantId, DateTime? date = null, bool? paymentsOnly = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows> localVarResponse = await GetReportTrialBalanceAsyncWithHttpInfo(accessToken, xeroTenantId, date, paymentsOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve report for TrialBalance 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="date">The date for the Trial Balance report e.g. 2018-03-31 (optional)</param>
        /// <param name="paymentsOnly">Return cash only basis for the Trial Balance report (optional)</param>
        /// <returns>Task of ApiResponse (ReportWithRows)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportWithRows>> GetReportTrialBalanceAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? date = null, bool? paymentsOnly = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetReportTrialBalance");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (date != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "date", date))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (paymentsOnly != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "paymentsOnly", paymentsOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportWithRows>("/Reports/TrialBalance", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportTrialBalance", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve Tax Rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="taxType">Filter by tax type (optional)</param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> GetTaxRatesAsync (string accessToken, string xeroTenantId, string where = null, string order = null, string taxType = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TaxRates> localVarResponse = await GetTaxRatesAsyncWithHttpInfo(accessToken, xeroTenantId, where, order, taxType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve Tax Rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="taxType">Filter by tax type (optional)</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TaxRates>> GetTaxRatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null, string taxType = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTaxRates");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (taxType != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "TaxType", taxType))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TaxRates>("/TaxRates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTaxRates", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve tracking categories and options 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync (string accessToken, string xeroTenantId, string where = null, string order = null, bool? includeArchived = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories> localVarResponse = await GetTrackingCategoriesAsyncWithHttpInfo(accessToken, xeroTenantId, where, order, includeArchived);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve tracking categories and options 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="includeArchived">e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response (optional)</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories>> GetTrackingCategoriesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string where = null, string order = null, bool? includeArchived = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTrackingCategories");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (includeArchived != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "includeArchived", includeArchived))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TrackingCategories>("/TrackingCategories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTrackingCategories", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve tracking categories and options for specified category 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoryAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories> localVarResponse = await GetTrackingCategoryAsyncWithHttpInfo(accessToken, xeroTenantId, trackingCategoryID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve tracking categories and options for specified category 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories>> GetTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetTrackingCategory");

            // verify the required parameter 'trackingCategoryID' is set
            if (trackingCategoryID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingCategoryID' when calling AccountingApi->GetTrackingCategory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (trackingCategoryID != null)
                requestOptions.PathParameters.Add("TrackingCategoryID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTrackingCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified user 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetUserAsync (string accessToken, string xeroTenantId, Guid userID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Users> localVarResponse = await GetUserAsyncWithHttpInfo(accessToken, xeroTenantId, userID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified user 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="userID">Unique identifier for a User</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Users>> GetUserAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid userID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetUser");

            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'userID' when calling AccountingApi->GetUser");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userID != null)
                requestOptions.PathParameters.Add("UserID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(userID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Users>("/Users/{UserID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUser", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve users 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetUsersAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Users> localVarResponse = await GetUsersAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve users 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Users>> GetUsersAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->GetUsers");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Users>("/Users", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUsers", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <returns>Task of Accounts</returns>
        public async System.Threading.Tasks.Task<Accounts> UpdateAccountAsync (string accessToken, string xeroTenantId, Guid accountID, Accounts accounts)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts> localVarResponse = await UpdateAccountAsyncWithHttpInfo(accessToken, xeroTenantId, accountID, accounts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a chart of accounts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for retrieving single object</param>
        /// <param name="accounts">Request of type Accounts array with one Account</param>
        /// <returns>Task of ApiResponse (Accounts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Accounts>> UpdateAccountAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, Accounts accounts)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateAccount");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->UpdateAccount");

            // verify the required parameter 'accounts' is set
            if (accounts == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accounts' when calling AccountingApi->UpdateAccount");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = accounts;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Accounts>("/Accounts/{AccountID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateAccount", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update Attachment on Account by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateAccountAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateAccountAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, accountID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update Attachment on Account by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="accountID">Unique identifier for Account object</param>
        /// <param name="fileName">Name of the attachment</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateAccountAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid accountID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateAccountAttachmentByFileName");

            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'accountID' when calling AccountingApi->UpdateAccountAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateAccountAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateAccountAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (accountID != null)
                requestOptions.PathParameters.Add("AccountID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(accountID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/Accounts/{AccountID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateAccountAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a single spend or receive money transaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <returns>Task of BankTransactions</returns>
        public async System.Threading.Tasks.Task<BankTransactions> UpdateBankTransactionAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions> localVarResponse = await UpdateBankTransactionAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID, bankTransactions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a single spend or receive money transaction 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="bankTransactions"></param>
        /// <returns>Task of ApiResponse (BankTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankTransactions>> UpdateBankTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, BankTransactions bankTransactions)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransaction");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->UpdateBankTransaction");

            // verify the required parameter 'bankTransactions' is set
            if (bankTransactions == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactions' when calling AccountingApi->UpdateBankTransaction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = bankTransactions;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<BankTransactions>("/BankTransactions/{BankTransactionID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateBankTransaction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update an Attachment on BankTransaction by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateBankTransactionAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateBankTransactionAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransactionID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update an Attachment on BankTransaction by Filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransactionID">Xero generated unique identifier for a bank transaction</param>
        /// <param name="fileName">The name of the file being attached</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateBankTransactionAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransactionID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");

            // verify the required parameter 'bankTransactionID' is set
            if (bankTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransactionID' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateBankTransactionAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransactionID != null)
                requestOptions.PathParameters.Add("BankTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransactionID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/BankTransactions/{BankTransactionID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateBankTransactionAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateBankTransferAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateBankTransferAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, bankTransferID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankTransferID">Xero generated unique identifier for a bank transfer</param>
        /// <param name="fileName">The name of the file being attached to a Bank Transfer</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateBankTransferAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankTransferID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");

            // verify the required parameter 'bankTransferID' is set
            if (bankTransferID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankTransferID' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateBankTransferAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (bankTransferID != null)
                requestOptions.PathParameters.Add("BankTransferID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(bankTransferID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/BankTransfers/{BankTransferID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateBankTransferAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <returns>Task of Contacts</returns>
        public async System.Threading.Tasks.Task<Contacts> UpdateContactAsync (string accessToken, string xeroTenantId, Guid contactID, Contacts contacts)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts> localVarResponse = await UpdateContactAsyncWithHttpInfo(accessToken, xeroTenantId, contactID, contacts);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="contacts">an array of Contacts containing single Contact object with properties to update</param>
        /// <returns>Task of ApiResponse (Contacts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Contacts>> UpdateContactAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, Contacts contacts)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContact");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->UpdateContact");

            // verify the required parameter 'contacts' is set
            if (contacts == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contacts' when calling AccountingApi->UpdateContact");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = contacts;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Contacts>("/Contacts/{ContactID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateContact", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateContactAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateContactAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, contactID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactID">Unique identifier for a Contact</param>
        /// <param name="fileName">Name for the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateContactAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContactAttachmentByFileName");

            // verify the required parameter 'contactID' is set
            if (contactID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactID' when calling AccountingApi->UpdateContactAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateContactAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateContactAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactID != null)
                requestOptions.PathParameters.Add("ContactID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/Contacts/{ContactID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateContactAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <returns>Task of ContactGroups</returns>
        public async System.Threading.Tasks.Task<ContactGroups> UpdateContactGroupAsync (string accessToken, string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups> localVarResponse = await UpdateContactGroupAsyncWithHttpInfo(accessToken, xeroTenantId, contactGroupID, contactGroups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a Contract Group 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactGroupID">Unique identifier for a Contact Group</param>
        /// <param name="contactGroups">an array of Contact groups with Name of specific group to update</param>
        /// <returns>Task of ApiResponse (ContactGroups)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ContactGroups>> UpdateContactGroupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid contactGroupID, ContactGroups contactGroups)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateContactGroup");

            // verify the required parameter 'contactGroupID' is set
            if (contactGroupID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactGroupID' when calling AccountingApi->UpdateContactGroup");

            // verify the required parameter 'contactGroups' is set
            if (contactGroups == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'contactGroups' when calling AccountingApi->UpdateContactGroup");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contactGroupID != null)
                requestOptions.PathParameters.Add("ContactGroupID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(contactGroupID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = contactGroups;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<ContactGroups>("/ContactGroups/{ContactGroupID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateContactGroup", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specific credit note 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> UpdateCreditNoteAsync (string accessToken, string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes> localVarResponse = await UpdateCreditNoteAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, creditNotes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specific credit note 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="creditNotes">an array of Credit Notes containing credit note details to update</param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<CreditNotes>> UpdateCreditNoteAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, CreditNotes creditNotes)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateCreditNote");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->UpdateCreditNote");

            // verify the required parameter 'creditNotes' is set
            if (creditNotes == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNotes' when calling AccountingApi->UpdateCreditNote");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = creditNotes;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<CreditNotes>("/CreditNotes/{CreditNoteID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateCreditNote", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update Attachments on CreditNote by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateCreditNoteAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateCreditNoteAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, creditNoteID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update Attachments on CreditNote by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="creditNoteID">Unique identifier for a Credit Note</param>
        /// <param name="fileName">Name of the file you are attaching to Credit Note</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateCreditNoteAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid creditNoteID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");

            // verify the required parameter 'creditNoteID' is set
            if (creditNoteID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'creditNoteID' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateCreditNoteAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (creditNoteID != null)
                requestOptions.PathParameters.Add("CreditNoteID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(creditNoteID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/CreditNotes/{CreditNoteID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateCreditNoteAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specific employee used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="employees"></param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, Employees employees)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await UpdateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employees);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specific employee used in Xero payrun 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Unique identifier for a Employee</param>
        /// <param name="employees"></param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Employees employees)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateEmployee");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling AccountingApi->UpdateEmployee");

            // verify the required parameter 'employees' is set
            if (employees == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employees' when calling AccountingApi->UpdateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employees;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Employees>("/Employees/{EmployeeID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update specified expense claims 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <returns>Task of ExpenseClaims</returns>
        public async System.Threading.Tasks.Task<ExpenseClaims> UpdateExpenseClaimAsync (string accessToken, string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims> localVarResponse = await UpdateExpenseClaimAsyncWithHttpInfo(accessToken, xeroTenantId, expenseClaimID, expenseClaims);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update specified expense claims 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="expenseClaimID">Unique identifier for a ExpenseClaim</param>
        /// <param name="expenseClaims"></param>
        /// <returns>Task of ApiResponse (ExpenseClaims)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ExpenseClaims>> UpdateExpenseClaimAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid expenseClaimID, ExpenseClaims expenseClaims)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateExpenseClaim");

            // verify the required parameter 'expenseClaimID' is set
            if (expenseClaimID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'expenseClaimID' when calling AccountingApi->UpdateExpenseClaim");

            // verify the required parameter 'expenseClaims' is set
            if (expenseClaims == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'expenseClaims' when calling AccountingApi->UpdateExpenseClaim");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (expenseClaimID != null)
                requestOptions.PathParameters.Add("ExpenseClaimID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(expenseClaimID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = expenseClaims;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<ExpenseClaims>("/ExpenseClaims/{ExpenseClaimID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateExpenseClaim", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specified sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <returns>Task of Invoices</returns>
        public async System.Threading.Tasks.Task<Invoices> UpdateInvoiceAsync (string accessToken, string xeroTenantId, Guid invoiceID, Invoices invoices)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices> localVarResponse = await UpdateInvoiceAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, invoices);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specified sales invoices or purchase bills 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="invoices"></param>
        /// <returns>Task of ApiResponse (Invoices)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Invoices>> UpdateInvoiceAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, Invoices invoices)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateInvoice");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->UpdateInvoice");

            // verify the required parameter 'invoices' is set
            if (invoices == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoices' when calling AccountingApi->UpdateInvoice");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = invoices;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Invoices>("/Invoices/{InvoiceID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateInvoice", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update Attachment on invoices or purchase bills by it&#39;s filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateInvoiceAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, invoiceID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update Attachment on invoices or purchase bills by it&#39;s filename 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="invoiceID">Unique identifier for an Invoice</param>
        /// <param name="fileName">Name of the file you are attaching</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid invoiceID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");

            // verify the required parameter 'invoiceID' is set
            if (invoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'invoiceID' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateInvoiceAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (invoiceID != null)
                requestOptions.PathParameters.Add("InvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(invoiceID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/Invoices/{InvoiceID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateInvoiceAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to udpate a specified item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <returns>Task of Items</returns>
        public async System.Threading.Tasks.Task<Items> UpdateItemAsync (string accessToken, string xeroTenantId, Guid itemID, Items items)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Items> localVarResponse = await UpdateItemAsyncWithHttpInfo(accessToken, xeroTenantId, itemID, items);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to udpate a specified item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="itemID">Unique identifier for an Item</param>
        /// <param name="items"></param>
        /// <returns>Task of ApiResponse (Items)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Items>> UpdateItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid itemID, Items items)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateItem");

            // verify the required parameter 'itemID' is set
            if (itemID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'itemID' when calling AccountingApi->UpdateItem");

            // verify the required parameter 'items' is set
            if (items == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'items' when calling AccountingApi->UpdateItem");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (itemID != null)
                requestOptions.PathParameters.Add("ItemID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(itemID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = items;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Items>("/Items/{ItemID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specified linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of LinkedTransactions</returns>
        public async System.Threading.Tasks.Task<LinkedTransactions> UpdateLinkedTransactionAsync (string accessToken, string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions> localVarResponse = await UpdateLinkedTransactionAsyncWithHttpInfo(accessToken, xeroTenantId, linkedTransactionID, linkedTransactions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specified linked transactions (billable expenses) 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="linkedTransactionID">Unique identifier for a LinkedTransaction</param>
        /// <param name="linkedTransactions"></param>
        /// <returns>Task of ApiResponse (LinkedTransactions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LinkedTransactions>> UpdateLinkedTransactionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid linkedTransactionID, LinkedTransactions linkedTransactions)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateLinkedTransaction");

            // verify the required parameter 'linkedTransactionID' is set
            if (linkedTransactionID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'linkedTransactionID' when calling AccountingApi->UpdateLinkedTransaction");

            // verify the required parameter 'linkedTransactions' is set
            if (linkedTransactions == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'linkedTransactions' when calling AccountingApi->UpdateLinkedTransaction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (linkedTransactionID != null)
                requestOptions.PathParameters.Add("LinkedTransactionID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(linkedTransactionID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = linkedTransactions;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<LinkedTransactions>("/LinkedTransactions/{LinkedTransactionID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateLinkedTransaction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specified manual journal 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ManualJournals</returns>
        public async System.Threading.Tasks.Task<ManualJournals> UpdateManualJournalAsync (string accessToken, string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals> localVarResponse = await UpdateManualJournalAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournalID, manualJournals);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specified manual journal 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="manualJournals"></param>
        /// <returns>Task of ApiResponse (ManualJournals)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ManualJournals>> UpdateManualJournalAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, ManualJournals manualJournals)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateManualJournal");

            // verify the required parameter 'manualJournalID' is set
            if (manualJournalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournalID' when calling AccountingApi->UpdateManualJournal");

            // verify the required parameter 'manualJournals' is set
            if (manualJournals == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournals' when calling AccountingApi->UpdateManualJournal");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (manualJournalID != null)
                requestOptions.PathParameters.Add("ManualJournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = manualJournals;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<ManualJournals>("/ManualJournals/{ManualJournalID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateManualJournal", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specified Attachment on ManualJournal by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateManualJournalAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateManualJournalAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, manualJournalID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specified Attachment on ManualJournal by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="manualJournalID">Unique identifier for a ManualJournal</param>
        /// <param name="fileName">The name of the file being attached to a ManualJournal</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateManualJournalAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid manualJournalID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");

            // verify the required parameter 'manualJournalID' is set
            if (manualJournalID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'manualJournalID' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateManualJournalAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (manualJournalID != null)
                requestOptions.PathParameters.Add("ManualJournalID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(manualJournalID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/ManualJournals/{ManualJournalID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateManualJournalAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update a specified purchase order 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="purchaseOrders"></param>
        /// <returns>Task of PurchaseOrders</returns>
        public async System.Threading.Tasks.Task<PurchaseOrders> UpdatePurchaseOrderAsync (string accessToken, string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders> localVarResponse = await UpdatePurchaseOrderAsyncWithHttpInfo(accessToken, xeroTenantId, purchaseOrderID, purchaseOrders);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update a specified purchase order 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="purchaseOrderID">Unique identifier for a PurchaseOrder</param>
        /// <param name="purchaseOrders"></param>
        /// <returns>Task of ApiResponse (PurchaseOrders)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PurchaseOrders>> UpdatePurchaseOrderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid purchaseOrderID, PurchaseOrders purchaseOrders)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdatePurchaseOrder");

            // verify the required parameter 'purchaseOrderID' is set
            if (purchaseOrderID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'purchaseOrderID' when calling AccountingApi->UpdatePurchaseOrder");

            // verify the required parameter 'purchaseOrders' is set
            if (purchaseOrders == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'purchaseOrders' when calling AccountingApi->UpdatePurchaseOrder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (purchaseOrderID != null)
                requestOptions.PathParameters.Add("PurchaseOrderID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(purchaseOrderID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = purchaseOrders;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PurchaseOrders>("/PurchaseOrders/{PurchaseOrderID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePurchaseOrder", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <returns>Task of Receipts</returns>
        public async System.Threading.Tasks.Task<Receipts> UpdateReceiptAsync (string accessToken, string xeroTenantId, Guid receiptID, Receipts receipts)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts> localVarResponse = await UpdateReceiptAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID, receipts);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to retrieve a specified draft expense claim receipts 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="receipts"></param>
        /// <returns>Task of ApiResponse (Receipts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Receipts>> UpdateReceiptAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, Receipts receipts)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateReceipt");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->UpdateReceipt");

            // verify the required parameter 'receipts' is set
            if (receipts == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receipts' when calling AccountingApi->UpdateReceipt");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = receipts;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Receipts>("/Receipts/{ReceiptID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateReceipt", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update Attachment on expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateReceiptAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateReceiptAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, receiptID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update Attachment on expense claim receipts by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="receiptID">Unique identifier for a Receipt</param>
        /// <param name="fileName">The name of the file being attached to the Receipt</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateReceiptAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid receiptID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateReceiptAttachmentByFileName");

            // verify the required parameter 'receiptID' is set
            if (receiptID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'receiptID' when calling AccountingApi->UpdateReceiptAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateReceiptAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateReceiptAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (receiptID != null)
                requestOptions.PathParameters.Add("ReceiptID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(receiptID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/Receipts/{ReceiptID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateReceiptAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update specified attachment on repeating invoices by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of Attachments</returns>
        public async System.Threading.Tasks.Task<Attachments> UpdateRepeatingInvoiceAttachmentByFileNameAsync (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments> localVarResponse = await UpdateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo(accessToken, xeroTenantId, repeatingInvoiceID, fileName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update specified attachment on repeating invoices by file name 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="repeatingInvoiceID">Unique identifier for a Repeating Invoice</param>
        /// <param name="fileName">The name of the file being attached to a Repeating Invoice</param>
        /// <param name="body">Byte array of file in body of request</param>
        /// <returns>Task of ApiResponse (Attachments)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Attachments>> UpdateRepeatingInvoiceAttachmentByFileNameAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid repeatingInvoiceID, string fileName, byte[] body)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'repeatingInvoiceID' is set
            if (repeatingInvoiceID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'repeatingInvoiceID' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileName' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling AccountingApi->UpdateRepeatingInvoiceAttachmentByFileName");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (repeatingInvoiceID != null)
                requestOptions.PathParameters.Add("RepeatingInvoiceID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(repeatingInvoiceID)); // path parameter
            if (fileName != null)
                requestOptions.PathParameters.Add("FileName", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileName)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Attachments>("/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateRepeatingInvoiceAttachmentByFileName", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update Tax Rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> UpdateTaxRateAsync (string accessToken, string xeroTenantId, TaxRates taxRates)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TaxRates> localVarResponse = await UpdateTaxRateAsyncWithHttpInfo(accessToken, xeroTenantId, taxRates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update Tax Rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="taxRates"></param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TaxRates>> UpdateTaxRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, TaxRates taxRates)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTaxRate");

            // verify the required parameter 'taxRates' is set
            if (taxRates == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'taxRates' when calling AccountingApi->UpdateTaxRate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = taxRates;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TaxRates>("/TaxRates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTaxRate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Allows you to update tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> UpdateTrackingCategoryAsync (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories> localVarResponse = await UpdateTrackingCategoryAsyncWithHttpInfo(accessToken, xeroTenantId, trackingCategoryID, trackingCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Allows you to update tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="trackingCategoryID">Unique identifier for a TrackingCategory</param>
        /// <param name="trackingCategory"></param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories>> UpdateTrackingCategoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid trackingCategoryID, TrackingCategory trackingCategory)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AccountingApi->UpdateTrackingCategory");

            // verify the required parameter 'trackingCategoryID' is set
            if (trackingCategoryID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingCategoryID' when calling AccountingApi->UpdateTrackingCategory");

            // verify the required parameter 'trackingCategory' is set
            if (trackingCategory == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'trackingCategory' when calling AccountingApi->UpdateTrackingCategory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (trackingCategoryID != null)
                requestOptions.PathParameters.Add("TrackingCategoryID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(trackingCategoryID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = trackingCategory;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TrackingCategories>("/TrackingCategories/{TrackingCategoryID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTrackingCategory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
