/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

// The version of the OpenAPI document: 2.25.0


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Model.PayrollNz;

namespace Xero.NetStandard.OAuth2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollNzApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Approves a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> ApproveTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// Approves a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> ApproveTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// Creates a new deduction for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of DeductionObject</returns>
        System.Threading.Tasks.Task<DeductionObject> CreateDeductionAsync (string accessToken, string xeroTenantId, Deduction deduction);

        /// <summary>
        /// Creates a new deduction for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeductionObject>> CreateDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Deduction deduction);
        /// <summary>
        /// Creates a new earnings rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of EarningsRateObject</returns>
        System.Threading.Tasks.Task<EarningsRateObject> CreateEarningsRateAsync (string accessToken, string xeroTenantId, EarningsRate earningsRate);

        /// <summary>
        /// Creates a new earnings rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsRateObject>> CreateEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, EarningsRate earningsRate);
        /// <summary>
        /// Creates an employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        System.Threading.Tasks.Task<EmployeeObject> CreateEmployeeAsync (string accessToken, string xeroTenantId, Employee employee);

        /// <summary>
        /// Creates an employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeObject>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Employee employee);
        /// <summary>
        /// Creates earnings template records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        System.Threading.Tasks.Task<EarningsTemplateObject> CreateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, EarningsTemplate earningsTemplate);

        /// <summary>
        /// Creates earnings template records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsTemplateObject>> CreateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EarningsTemplate earningsTemplate);
        /// <summary>
        /// Creates leave records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveObject> CreateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeave employeeLeave);

        /// <summary>
        /// Creates leave records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveObject>> CreateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeave employeeLeave);
        /// <summary>
        /// Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of EmployeeLeaveSetupObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveSetupObject> CreateEmployeeLeaveSetupAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveSetup employeeLeaveSetup);

        /// <summary>
        /// Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveSetupObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveSetupObject>> CreateEmployeeLeaveSetupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveSetup employeeLeaveSetup);
        /// <summary>
        /// Creates leave type records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of EmployeeLeaveTypeObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveTypeObject> CreateEmployeeLeaveTypeAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveType employeeLeaveType);

        /// <summary>
        /// Creates leave type records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveTypeObject>> CreateEmployeeLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveType employeeLeaveType);
        /// <summary>
        /// Creates opening balances for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> CreateEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeID, List<EmployeeOpeningBalance> employeeOpeningBalance);

        /// <summary>
        /// Creates opening balances for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeOpeningBalancesObject>> CreateEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, List<EmployeeOpeningBalance> employeeOpeningBalance);
        /// <summary>
        /// Creates a payment method for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of PaymentMethodObject</returns>
        System.Threading.Tasks.Task<PaymentMethodObject> CreateEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeID, PaymentMethod paymentMethod);

        /// <summary>
        /// Creates a payment method for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethodObject>> CreateEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, PaymentMethod paymentMethod);
        /// <summary>
        /// Creates an employee salary and wage record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        System.Threading.Tasks.Task<SalaryAndWageObject> CreateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, SalaryAndWage salaryAndWage);

        /// <summary>
        /// Creates an employee salary and wage record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWageObject>> CreateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, SalaryAndWage salaryAndWage);
        /// <summary>
        /// Creates an employment detail for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of EmploymentObject</returns>
        System.Threading.Tasks.Task<EmploymentObject> CreateEmploymentAsync (string accessToken, string xeroTenantId, Guid employeeID, Employment employment);

        /// <summary>
        /// Creates an employment detail for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of ApiResponse (EmploymentObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmploymentObject>> CreateEmploymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Employment employment);
        /// <summary>
        /// Creates a new leave type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of LeaveTypeObject</returns>
        System.Threading.Tasks.Task<LeaveTypeObject> CreateLeaveTypeAsync (string accessToken, string xeroTenantId, LeaveType leaveType);

        /// <summary>
        /// Creates a new leave type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveTypeObject>> CreateLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, LeaveType leaveType);
        /// <summary>
        /// Creates multiple employee earnings template records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EmployeeEarningsTemplates</returns>
        System.Threading.Tasks.Task<EmployeeEarningsTemplates> CreateMultipleEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, List<EarningsTemplate> earningsTemplate);

        /// <summary>
        /// Creates multiple employee earnings template records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EmployeeEarningsTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeEarningsTemplates>> CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, List<EarningsTemplate> earningsTemplate);
        /// <summary>
        /// Creates a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        System.Threading.Tasks.Task<PayRunObject> CreatePayRunAsync (string accessToken, string xeroTenantId, PayRun payRun);

        /// <summary>
        /// Creates a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunObject>> CreatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRun payRun);
        /// <summary>
        /// Creates a new payrun calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of PayRunCalendarObject</returns>
        System.Threading.Tasks.Task<PayRunCalendarObject> CreatePayRunCalendarAsync (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar);

        /// <summary>
        /// Creates a new payrun calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunCalendarObject>> CreatePayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar);
        /// <summary>
        /// Creates a new reimbursement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ReimbursementObject</returns>
        System.Threading.Tasks.Task<ReimbursementObject> CreateReimbursementAsync (string accessToken, string xeroTenantId, Reimbursement reimbursement);

        /// <summary>
        /// Creates a new reimbursement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReimbursementObject>> CreateReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Reimbursement reimbursement);
        /// <summary>
        /// Creates a new superannuation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of SuperannuationObject</returns>
        System.Threading.Tasks.Task<SuperannuationObject> CreateSuperannuationAsync (string accessToken, string xeroTenantId, Benefit benefit);

        /// <summary>
        /// Creates a new superannuation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of ApiResponse (SuperannuationObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperannuationObject>> CreateSuperannuationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Benefit benefit);
        /// <summary>
        /// Creates a new timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> CreateTimesheetAsync (string accessToken, string xeroTenantId, Timesheet timesheet);

        /// <summary>
        /// Creates a new timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> CreateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Timesheet timesheet);
        /// <summary>
        /// Create a new timesheet line for a specific time sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        System.Threading.Tasks.Task<TimesheetLineObject> CreateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine);

        /// <summary>
        /// Create a new timesheet line for a specific time sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLineObject>> CreateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine);
        /// <summary>
        /// Deletes an employee&#39;s earnings template record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of EarningsTemplateObject</returns>
        System.Threading.Tasks.Task<EarningsTemplateObject> DeleteEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID);

        /// <summary>
        /// Deletes an employee&#39;s earnings template record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsTemplateObject>> DeleteEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID);
        /// <summary>
        /// Deletes a leave record for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveObject> DeleteEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID);

        /// <summary>
        /// Deletes a leave record for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveObject>> DeleteEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID);
        /// <summary>
        /// Deletes an employee&#39;s salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of SalaryAndWageObject</returns>
        System.Threading.Tasks.Task<SalaryAndWageObject> DeleteEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID);

        /// <summary>
        /// Deletes an employee&#39;s salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWageObject>> DeleteEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID);
        /// <summary>
        /// Deletes a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetLine</returns>
        System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// Deletes a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLine>> DeleteTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// Deletes a timesheet line for a specific timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of TimesheetLine</returns>
        System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID);

        /// <summary>
        /// Deletes a timesheet line for a specific timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLine>> DeleteTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID);
        /// <summary>
        /// Retrieves a single deduction by using a unique deduction ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of DeductionObject</returns>
        System.Threading.Tasks.Task<DeductionObject> GetDeductionAsync (string accessToken, string xeroTenantId, Guid deductionId);

        /// <summary>
        /// Retrieves a single deduction by using a unique deduction ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeductionObject>> GetDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid deductionId);
        /// <summary>
        /// Retrieves deductions for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Deductions</returns>
        System.Threading.Tasks.Task<Deductions> GetDeductionsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// Retrieves deductions for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Deductions)</returns>
        System.Threading.Tasks.Task<ApiResponse<Deductions>> GetDeductionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// Retrieves a specific earnings rates by using a unique earnings rate id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of EarningsRateObject</returns>
        System.Threading.Tasks.Task<EarningsRateObject> GetEarningsRateAsync (string accessToken, string xeroTenantId, Guid earningsRateID);

        /// <summary>
        /// Retrieves a specific earnings rates by using a unique earnings rate id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsRateObject>> GetEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid earningsRateID);
        /// <summary>
        /// Retrieves earnings rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of EarningsRates</returns>
        System.Threading.Tasks.Task<EarningsRates> GetEarningsRatesAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// Retrieves earnings rates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (EarningsRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsRates>> GetEarningsRatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// Retrieves an employees using a unique employee ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeObject</returns>
        System.Threading.Tasks.Task<EmployeeObject> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves an employees using a unique employee ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeObject>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves leave balances for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveBalances</returns>
        System.Threading.Tasks.Task<EmployeeLeaveBalances> GetEmployeeLeaveBalancesAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves leave balances for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveBalances>> GetEmployeeLeaveBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves leave periods for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of LeavePeriods</returns>
        System.Threading.Tasks.Task<LeavePeriods> GetEmployeeLeavePeriodsAsync (string accessToken, string xeroTenantId, Guid employeeID, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// Retrieves leave periods for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of ApiResponse (LeavePeriods)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeavePeriods>> GetEmployeeLeavePeriodsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, DateTime? startDate = null, DateTime? endDate = null);
        /// <summary>
        /// Retrieves leave types for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveTypes</returns>
        System.Threading.Tasks.Task<EmployeeLeaveTypes> GetEmployeeLeaveTypesAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves leave types for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveTypes>> GetEmployeeLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves leave records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaves</returns>
        System.Threading.Tasks.Task<EmployeeLeaves> GetEmployeeLeavesAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves leave records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaves>> GetEmployeeLeavesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves the opening balance for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> GetEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves the opening balance for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeOpeningBalancesObject>> GetEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves pay templates for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeePayTemplates</returns>
        System.Threading.Tasks.Task<EmployeePayTemplates> GetEmployeePayTemplatesAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves pay templates for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeePayTemplates>> GetEmployeePayTemplatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves available payment methods for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of PaymentMethodObject</returns>
        System.Threading.Tasks.Task<PaymentMethodObject> GetEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves available payment methods for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethodObject>> GetEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of SalaryAndWages</returns>
        System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID);

        /// <summary>
        /// Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID);
        /// <summary>
        /// Retrieves an employee&#39;s salary and wages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of SalaryAndWages</returns>
        System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWagesAsync (string accessToken, string xeroTenantId, Guid employeeID, int? page = null);

        /// <summary>
        /// Retrieves an employee&#39;s salary and wages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWagesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, int? page = null);
        /// <summary>
        /// Retrieves tax records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeTaxObject</returns>
        System.Threading.Tasks.Task<EmployeeTaxObject> GetEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeID);

        /// <summary>
        /// Retrieves tax records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeTaxObject>> GetEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID);
        /// <summary>
        /// Retrieves employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="filter">Filter by first name and/or lastname (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, string filter = null, int? page = null);

        /// <summary>
        /// Retrieves employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="filter">Filter by first name and/or lastname (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string filter = null, int? page = null);
        /// <summary>
        /// Retrieves a specific leave type by using a unique leave type ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of LeaveTypeObject</returns>
        System.Threading.Tasks.Task<LeaveTypeObject> GetLeaveTypeAsync (string accessToken, string xeroTenantId, Guid leaveTypeID);

        /// <summary>
        /// Retrieves a specific leave type by using a unique leave type ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveTypeObject>> GetLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveTypeID);
        /// <summary>
        /// Retrieves leave types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of LeaveTypes</returns>
        System.Threading.Tasks.Task<LeaveTypes> GetLeaveTypesAsync (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null);

        /// <summary>
        /// Retrieves leave types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of ApiResponse (LeaveTypes)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveTypes>> GetLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null);
        /// <summary>
        /// Retrieves a specific pay run by using a unique pay run ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of PayRunObject</returns>
        System.Threading.Tasks.Task<PayRunObject> GetPayRunAsync (string accessToken, string xeroTenantId, Guid payRunID);

        /// <summary>
        /// Retrieves a specific pay run by using a unique pay run ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunObject>> GetPayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID);
        /// <summary>
        /// Retrieves a specific payrun calendar by using a unique payroll calendar ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of PayRunCalendarObject</returns>
        System.Threading.Tasks.Task<PayRunCalendarObject> GetPayRunCalendarAsync (string accessToken, string xeroTenantId, Guid payrollCalendarID);

        /// <summary>
        /// Retrieves a specific payrun calendar by using a unique payroll calendar ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunCalendarObject>> GetPayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payrollCalendarID);
        /// <summary>
        /// Retrieves payrun calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PayRunCalendars</returns>
        System.Threading.Tasks.Task<PayRunCalendars> GetPayRunCalendarsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// Retrieves payrun calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PayRunCalendars)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunCalendars>> GetPayRunCalendarsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// Retrieves pay runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of PayRuns</returns>
        System.Threading.Tasks.Task<PayRuns> GetPayRunsAsync (string accessToken, string xeroTenantId, int? page = null, string status = null);

        /// <summary>
        /// Retrieves pay runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRuns>> GetPayRunsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string status = null);
        /// <summary>
        /// Retrieves a specific payslip by a unique pay slip ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of PaySlipObject</returns>
        System.Threading.Tasks.Task<PaySlipObject> GetPaySlipAsync (string accessToken, string xeroTenantId, Guid paySlipID);

        /// <summary>
        /// Retrieves a specific payslip by a unique pay slip ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaySlipObject>> GetPaySlipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID);
        /// <summary>
        /// Retrieves payslips
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PaySlips</returns>
        System.Threading.Tasks.Task<PaySlips> GetPaySlipsAsync (string accessToken, string xeroTenantId, Guid payRunID, int? page = null);

        /// <summary>
        /// Retrieves payslips
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PaySlips)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaySlips>> GetPaySlipsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, int? page = null);
        /// <summary>
        /// Retrieves a specific reimbursement by using a unique reimbursement ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ReimbursementObject</returns>
        System.Threading.Tasks.Task<ReimbursementObject> GetReimbursementAsync (string accessToken, string xeroTenantId, Guid reimbursementID);

        /// <summary>
        /// Retrieves a specific reimbursement by using a unique reimbursement ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReimbursementObject>> GetReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid reimbursementID);
        /// <summary>
        /// Retrieves reimbursements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Reimbursements</returns>
        System.Threading.Tasks.Task<Reimbursements> GetReimbursementsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// Retrieves reimbursements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Reimbursements)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reimbursements>> GetReimbursementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// Retrieves settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> GetSettingsAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Retrieves settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> GetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Retrieves a specific statutory deduction by using a unique statutory deductions id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of StatutoryDeductionObject</returns>
        System.Threading.Tasks.Task<StatutoryDeductionObject> GetStatutoryDeductionAsync (string accessToken, string xeroTenantId, Guid id);

        /// <summary>
        /// Retrieves a specific statutory deduction by using a unique statutory deductions id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of ApiResponse (StatutoryDeductionObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatutoryDeductionObject>> GetStatutoryDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id);
        /// <summary>
        /// Retrieves statutory deductions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of StatutoryDeductions</returns>
        System.Threading.Tasks.Task<StatutoryDeductions> GetStatutoryDeductionsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// Retrieves statutory deductions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (StatutoryDeductions)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatutoryDeductions>> GetStatutoryDeductionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// Retrieves a specific superannuation using a unique superannuation ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superannuationID">Identifier for the superannuation</param>
        /// <returns>Task of SuperannuationObject</returns>
        System.Threading.Tasks.Task<SuperannuationObject> GetSuperannuationAsync (string accessToken, string xeroTenantId, Guid superannuationID);

        /// <summary>
        /// Retrieves a specific superannuation using a unique superannuation ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superannuationID">Identifier for the superannuation</param>
        /// <returns>Task of ApiResponse (SuperannuationObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperannuationObject>> GetSuperannuationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid superannuationID);
        /// <summary>
        /// Retrieves superannuations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Superannuations</returns>
        System.Threading.Tasks.Task<Superannuations> GetSuperannuationsAsync (string accessToken, string xeroTenantId, int? page = null);

        /// <summary>
        /// Retrieves superannuations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Superannuations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Superannuations>> GetSuperannuationsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null);
        /// <summary>
        /// Retrieves a specific timesheet by using a unique timesheet ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> GetTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// Retrieves a specific timesheet by using a unique timesheet ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> GetTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// Retrieves timesheets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
        /// <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
        /// <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
        /// <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
        /// <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
        /// <returns>Task of Timesheets</returns>
        System.Threading.Tasks.Task<Timesheets> GetTimesheetsAsync (string accessToken, string xeroTenantId, int? page = null, string filter = null, string status = null, string startDate = null, string endDate = null, string sort = null);

        /// <summary>
        /// Retrieves timesheets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
        /// <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
        /// <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
        /// <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
        /// <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timesheets>> GetTimesheetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string filter = null, string status = null, string startDate = null, string endDate = null, string sort = null);
        /// <summary>
        /// Retrieves tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of TrackingCategories</returns>
        System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Retrieves tracking categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingCategories>> GetTrackingCategoriesAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Reverts a timesheet to draft
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> RevertTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID);

        /// <summary>
        /// Reverts a timesheet to draft
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> RevertTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID);
        /// <summary>
        /// Updates an existing employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        System.Threading.Tasks.Task<EmployeeObject> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, Employee employee);

        /// <summary>
        /// Updates an existing employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeObject>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Employee employee);
        /// <summary>
        /// Updates an earnings template records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        System.Threading.Tasks.Task<EarningsTemplateObject> UpdateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID, EarningsTemplate earningsTemplate);

        /// <summary>
        /// Updates an earnings template records for an employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EarningsTemplateObject>> UpdateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID, EarningsTemplate earningsTemplate);
        /// <summary>
        /// Updates leave records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        System.Threading.Tasks.Task<EmployeeLeaveObject> UpdateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID, EmployeeLeave employeeLeave);

        /// <summary>
        /// Updates leave records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeLeaveObject>> UpdateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID, EmployeeLeave employeeLeave);
        /// <summary>
        /// Updates an employee&#39;s salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        System.Threading.Tasks.Task<SalaryAndWageObject> UpdateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID, SalaryAndWage salaryAndWage);

        /// <summary>
        /// Updates an employee&#39;s salary and wages record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalaryAndWageObject>> UpdateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID, SalaryAndWage salaryAndWage);
        /// <summary>
        /// Updates the tax records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of EmployeeTaxObject</returns>
        System.Threading.Tasks.Task<EmployeeTaxObject> UpdateEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeTax employeeTax);

        /// <summary>
        /// Updates the tax records for a specific employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmployeeTaxObject>> UpdateEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeTax employeeTax);
        /// <summary>
        /// Updates a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        System.Threading.Tasks.Task<PayRunObject> UpdatePayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun);

        /// <summary>
        /// Updates a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRunObject>> UpdatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun);
        /// <summary>
        /// Creates an employee pay slip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of PaySlipObject</returns>
        System.Threading.Tasks.Task<PaySlipObject> UpdatePaySlipLineItemsAsync (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip);

        /// <summary>
        /// Creates an employee pay slip
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaySlipObject>> UpdatePaySlipLineItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip);
        /// <summary>
        /// Updates a timesheet line for a specific timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        System.Threading.Tasks.Task<TimesheetLineObject> UpdateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine);

        /// <summary>
        /// Updates a timesheet line for a specific timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetLineObject>> UpdateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollNzApi : IPayrollNzApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayrollNzApi : IPayrollNzApi
    {
        private Xero.NetStandard.OAuth2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollNzApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollNzApi() : this((string) null)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = "https://api.xero.com/payroll.xro/2.0" }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollNzApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollNzApi(String basePath)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollNzApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayrollNzApi(Xero.NetStandard.OAuth2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PayrollNzApi(Xero.NetStandard.OAuth2.Client.ISynchronousClient client,Xero.NetStandard.OAuth2.Client.IAsynchronousClient asyncClient, Xero.NetStandard.OAuth2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.NetStandard.OAuth2.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Approves a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> ApproveTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await ApproveTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Approves a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> ApproveTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->ApproveTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->ApproveTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetObject>("/Timesheets/{TimesheetID}/Approve", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApproveTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new deduction for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of DeductionObject</returns>
        public async System.Threading.Tasks.Task<DeductionObject> CreateDeductionAsync (string accessToken, string xeroTenantId, Deduction deduction)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject> localVarResponse = await CreateDeductionAsyncWithHttpInfo(accessToken, xeroTenantId, deduction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new deduction for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deduction"></param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject>> CreateDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Deduction deduction)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateDeduction");

            // verify the required parameter 'deduction' is set
            if (deduction == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'deduction' when calling PayrollNzApi->CreateDeduction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = deduction;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<DeductionObject>("/Deductions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateDeduction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new earnings rate 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of EarningsRateObject</returns>
        public async System.Threading.Tasks.Task<EarningsRateObject> CreateEarningsRateAsync (string accessToken, string xeroTenantId, EarningsRate earningsRate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject> localVarResponse = await CreateEarningsRateAsyncWithHttpInfo(accessToken, xeroTenantId, earningsRate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new earnings rate 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRate"></param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject>> CreateEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, EarningsRate earningsRate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEarningsRate");

            // verify the required parameter 'earningsRate' is set
            if (earningsRate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsRate' when calling PayrollNzApi->CreateEarningsRate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsRate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EarningsRateObject>("/EarningsRates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEarningsRate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates an employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeObject> CreateEmployeeAsync (string accessToken, string xeroTenantId, Employee employee)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject> localVarResponse = await CreateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employee);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Employee employee)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployee");

            // verify the required parameter 'employee' is set
            if (employee == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employee' when calling PayrollNzApi->CreateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employee;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeObject>("/Employees", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates earnings template records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        public async System.Threading.Tasks.Task<EarningsTemplateObject> CreateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, EarningsTemplate earningsTemplate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject> localVarResponse = await CreateEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, earningsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates earnings template records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject>> CreateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EarningsTemplate earningsTemplate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeEarningsTemplate");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployeeEarningsTemplate");

            // verify the required parameter 'earningsTemplate' is set
            if (earningsTemplate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsTemplate' when calling PayrollNzApi->CreateEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsTemplate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EarningsTemplateObject>("/Employees/{EmployeeID}/PayTemplates/earnings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates leave records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveObject> CreateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeave employeeLeave)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject> localVarResponse = await CreateEmployeeLeaveAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employeeLeave);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates leave records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject>> CreateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeave employeeLeave)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeLeave");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployeeLeave");

            // verify the required parameter 'employeeLeave' is set
            if (employeeLeave == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeave' when calling PayrollNzApi->CreateEmployeeLeave");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeave;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeLeaveObject>("/Employees/{EmployeeID}/Leave", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeLeave", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of EmployeeLeaveSetupObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveSetupObject> CreateEmployeeLeaveSetupAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveSetup employeeLeaveSetup)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveSetupObject> localVarResponse = await CreateEmployeeLeaveSetupAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employeeLeaveSetup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveSetup"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveSetupObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveSetupObject>> CreateEmployeeLeaveSetupAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveSetup employeeLeaveSetup)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeLeaveSetup");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployeeLeaveSetup");

            // verify the required parameter 'employeeLeaveSetup' is set
            if (employeeLeaveSetup == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeaveSetup' when calling PayrollNzApi->CreateEmployeeLeaveSetup");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeaveSetup;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeLeaveSetupObject>("/Employees/{EmployeeID}/leaveSetup", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeLeaveSetup", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates leave type records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of EmployeeLeaveTypeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveTypeObject> CreateEmployeeLeaveTypeAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveType employeeLeaveType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypeObject> localVarResponse = await CreateEmployeeLeaveTypeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employeeLeaveType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates leave type records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeLeaveType"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypeObject>> CreateEmployeeLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeLeaveType employeeLeaveType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeLeaveType");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployeeLeaveType");

            // verify the required parameter 'employeeLeaveType' is set
            if (employeeLeaveType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeaveType' when calling PayrollNzApi->CreateEmployeeLeaveType");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeaveType;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeLeaveTypeObject>("/Employees/{EmployeeID}/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeLeaveType", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates opening balances for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        public async System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> CreateEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeID, List<EmployeeOpeningBalance> employeeOpeningBalance)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject> localVarResponse = await CreateEmployeeOpeningBalancesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employeeOpeningBalance);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates opening balances for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeOpeningBalance"></param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject>> CreateEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, List<EmployeeOpeningBalance> employeeOpeningBalance)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeOpeningBalances");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployeeOpeningBalances");

            // verify the required parameter 'employeeOpeningBalance' is set
            if (employeeOpeningBalance == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeOpeningBalance' when calling PayrollNzApi->CreateEmployeeOpeningBalances");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeOpeningBalance;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeOpeningBalancesObject>("/Employees/{EmployeeID}/openingBalances", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeOpeningBalances", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a payment method for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of PaymentMethodObject</returns>
        public async System.Threading.Tasks.Task<PaymentMethodObject> CreateEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeID, PaymentMethod paymentMethod)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject> localVarResponse = await CreateEmployeePaymentMethodAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, paymentMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a payment method for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="paymentMethod"></param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject>> CreateEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, PaymentMethod paymentMethod)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeePaymentMethod");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployeePaymentMethod");

            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paymentMethod' when calling PayrollNzApi->CreateEmployeePaymentMethod");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = paymentMethod;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PaymentMethodObject>("/Employees/{EmployeeID}/PaymentMethods", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeePaymentMethod", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates an employee salary and wage record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        public async System.Threading.Tasks.Task<SalaryAndWageObject> CreateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, SalaryAndWage salaryAndWage)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject> localVarResponse = await CreateEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, salaryAndWage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an employee salary and wage record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject>> CreateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, SalaryAndWage salaryAndWage)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployeeSalaryAndWage");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWage' is set
            if (salaryAndWage == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWage' when calling PayrollNzApi->CreateEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = salaryAndWage;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<SalaryAndWageObject>("/Employees/{EmployeeID}/SalaryAndWages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates an employment detail for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of EmploymentObject</returns>
        public async System.Threading.Tasks.Task<EmploymentObject> CreateEmploymentAsync (string accessToken, string xeroTenantId, Guid employeeID, Employment employment)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmploymentObject> localVarResponse = await CreateEmploymentAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an employment detail for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employment"></param>
        /// <returns>Task of ApiResponse (EmploymentObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmploymentObject>> CreateEmploymentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Employment employment)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateEmployment");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateEmployment");

            // verify the required parameter 'employment' is set
            if (employment == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employment' when calling PayrollNzApi->CreateEmployment");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employment;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmploymentObject>("/Employees/{EmployeeID}/Employment", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployment", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new leave type 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of LeaveTypeObject</returns>
        public async System.Threading.Tasks.Task<LeaveTypeObject> CreateLeaveTypeAsync (string accessToken, string xeroTenantId, LeaveType leaveType)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject> localVarResponse = await CreateLeaveTypeAsyncWithHttpInfo(accessToken, xeroTenantId, leaveType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new leave type 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveType"></param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject>> CreateLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, LeaveType leaveType)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateLeaveType");

            // verify the required parameter 'leaveType' is set
            if (leaveType == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveType' when calling PayrollNzApi->CreateLeaveType");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = leaveType;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<LeaveTypeObject>("/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateLeaveType", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates multiple employee earnings template records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EmployeeEarningsTemplates</returns>
        public async System.Threading.Tasks.Task<EmployeeEarningsTemplates> CreateMultipleEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, List<EarningsTemplate> earningsTemplate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeEarningsTemplates> localVarResponse = await CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, earningsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates multiple employee earnings template records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EmployeeEarningsTemplates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeEarningsTemplates>> CreateMultipleEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, List<EarningsTemplate> earningsTemplate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateMultipleEmployeeEarningsTemplate");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->CreateMultipleEmployeeEarningsTemplate");

            // verify the required parameter 'earningsTemplate' is set
            if (earningsTemplate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsTemplate' when calling PayrollNzApi->CreateMultipleEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsTemplate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeEarningsTemplates>("/Employees/{EmployeeID}/paytemplateearnings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateMultipleEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        public async System.Threading.Tasks.Task<PayRunObject> CreatePayRunAsync (string accessToken, string xeroTenantId, PayRun payRun)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject> localVarResponse = await CreatePayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRun);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject>> CreatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRun payRun)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreatePayRun");

            // verify the required parameter 'payRun' is set
            if (payRun == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRun' when calling PayrollNzApi->CreatePayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payRun;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayRunObject>("/PayRuns", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new payrun calendar 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of PayRunCalendarObject</returns>
        public async System.Threading.Tasks.Task<PayRunCalendarObject> CreatePayRunCalendarAsync (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject> localVarResponse = await CreatePayRunCalendarAsyncWithHttpInfo(accessToken, xeroTenantId, payRunCalendar);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new payrun calendar 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunCalendar"></param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject>> CreatePayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayRunCalendar payRunCalendar)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreatePayRunCalendar");

            // verify the required parameter 'payRunCalendar' is set
            if (payRunCalendar == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunCalendar' when calling PayrollNzApi->CreatePayRunCalendar");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payRunCalendar;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayRunCalendarObject>("/PayRunCalendars", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayRunCalendar", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new reimbursement 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ReimbursementObject</returns>
        public async System.Threading.Tasks.Task<ReimbursementObject> CreateReimbursementAsync (string accessToken, string xeroTenantId, Reimbursement reimbursement)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject> localVarResponse = await CreateReimbursementAsyncWithHttpInfo(accessToken, xeroTenantId, reimbursement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new reimbursement 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursement"></param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject>> CreateReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Reimbursement reimbursement)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateReimbursement");

            // verify the required parameter 'reimbursement' is set
            if (reimbursement == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'reimbursement' when calling PayrollNzApi->CreateReimbursement");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = reimbursement;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<ReimbursementObject>("/Reimbursements", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReimbursement", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new superannuation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of SuperannuationObject</returns>
        public async System.Threading.Tasks.Task<SuperannuationObject> CreateSuperannuationAsync (string accessToken, string xeroTenantId, Benefit benefit)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperannuationObject> localVarResponse = await CreateSuperannuationAsyncWithHttpInfo(accessToken, xeroTenantId, benefit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new superannuation 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="benefit"></param>
        /// <returns>Task of ApiResponse (SuperannuationObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperannuationObject>> CreateSuperannuationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Benefit benefit)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateSuperannuation");

            // verify the required parameter 'benefit' is set
            if (benefit == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'benefit' when calling PayrollNzApi->CreateSuperannuation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = benefit;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<SuperannuationObject>("/Superannuations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateSuperannuation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> CreateTimesheetAsync (string accessToken, string xeroTenantId, Timesheet timesheet)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await CreateTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheet);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> CreateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Timesheet timesheet)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateTimesheet");

            // verify the required parameter 'timesheet' is set
            if (timesheet == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheet' when calling PayrollNzApi->CreateTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timesheet;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetObject>("/Timesheets", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Create a new timesheet line for a specific time sheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        public async System.Threading.Tasks.Task<TimesheetLineObject> CreateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject> localVarResponse = await CreateTimesheetLineAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, timesheetLine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new timesheet line for a specific time sheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject>> CreateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, TimesheetLine timesheetLine)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->CreateTimesheetLine");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->CreateTimesheetLine");

            // verify the required parameter 'timesheetLine' is set
            if (timesheetLine == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLine' when calling PayrollNzApi->CreateTimesheetLine");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timesheetLine;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetLineObject>("/Timesheets/{TimesheetID}/Lines", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTimesheetLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes an employee&#39;s earnings template record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of EarningsTemplateObject</returns>
        public async System.Threading.Tasks.Task<EarningsTemplateObject> DeleteEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject> localVarResponse = await DeleteEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, payTemplateEarningID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an employee&#39;s earnings template record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject>> DeleteEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteEmployeeEarningsTemplate");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->DeleteEmployeeEarningsTemplate");

            // verify the required parameter 'payTemplateEarningID' is set
            if (payTemplateEarningID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payTemplateEarningID' when calling PayrollNzApi->DeleteEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (payTemplateEarningID != null)
                requestOptions.PathParameters.Add("PayTemplateEarningID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payTemplateEarningID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<EarningsTemplateObject>("/Employees/{EmployeeID}/PayTemplates/earnings/{PayTemplateEarningID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes a leave record for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveObject> DeleteEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject> localVarResponse = await DeleteEmployeeLeaveAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, leaveID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a leave record for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject>> DeleteEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteEmployeeLeave");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->DeleteEmployeeLeave");

            // verify the required parameter 'leaveID' is set
            if (leaveID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveID' when calling PayrollNzApi->DeleteEmployeeLeave");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (leaveID != null)
                requestOptions.PathParameters.Add("LeaveID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<EmployeeLeaveObject>("/Employees/{EmployeeID}/Leave/{LeaveID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmployeeLeave", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes an employee&#39;s salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of SalaryAndWageObject</returns>
        public async System.Threading.Tasks.Task<SalaryAndWageObject> DeleteEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject> localVarResponse = await DeleteEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, salaryAndWagesID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an employee&#39;s salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single salary and wages object</param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject>> DeleteEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteEmployeeSalaryAndWage");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->DeleteEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWagesID' is set
            if (salaryAndWagesID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWagesID' when calling PayrollNzApi->DeleteEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (salaryAndWagesID != null)
                requestOptions.PathParameters.Add("SalaryAndWagesID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(salaryAndWagesID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<SalaryAndWageObject>("/Employees/{EmployeeID}/SalaryAndWages/{SalaryAndWagesID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetLine</returns>
        public async System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine> localVarResponse = await DeleteTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine>> DeleteTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->DeleteTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<TimesheetLine>("/Timesheets/{TimesheetID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes a timesheet line for a specific timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of TimesheetLine</returns>
        public async System.Threading.Tasks.Task<TimesheetLine> DeleteTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine> localVarResponse = await DeleteTimesheetLineAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, timesheetLineID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a timesheet line for a specific timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <returns>Task of ApiResponse (TimesheetLine)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLine>> DeleteTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->DeleteTimesheetLine");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->DeleteTimesheetLine");

            // verify the required parameter 'timesheetLineID' is set
            if (timesheetLineID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLineID' when calling PayrollNzApi->DeleteTimesheetLine");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (timesheetLineID != null)
                requestOptions.PathParameters.Add("TimesheetLineID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetLineID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<TimesheetLine>("/Timesheets/{TimesheetID}/Lines/{TimesheetLineID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTimesheetLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a single deduction by using a unique deduction ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of DeductionObject</returns>
        public async System.Threading.Tasks.Task<DeductionObject> GetDeductionAsync (string accessToken, string xeroTenantId, Guid deductionId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject> localVarResponse = await GetDeductionAsyncWithHttpInfo(accessToken, xeroTenantId, deductionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a single deduction by using a unique deduction ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="deductionId">Identifier for the deduction</param>
        /// <returns>Task of ApiResponse (DeductionObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<DeductionObject>> GetDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid deductionId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetDeduction");

            // verify the required parameter 'deductionId' is set
            if (deductionId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'deductionId' when calling PayrollNzApi->GetDeduction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (deductionId != null)
                requestOptions.PathParameters.Add("deductionId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(deductionId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<DeductionObject>("/Deductions/{deductionId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeduction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves deductions for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Deductions</returns>
        public async System.Threading.Tasks.Task<Deductions> GetDeductionsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Deductions> localVarResponse = await GetDeductionsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves deductions for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Deductions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Deductions>> GetDeductionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetDeductions");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Deductions>("/Deductions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDeductions", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific earnings rates by using a unique earnings rate id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of EarningsRateObject</returns>
        public async System.Threading.Tasks.Task<EarningsRateObject> GetEarningsRateAsync (string accessToken, string xeroTenantId, Guid earningsRateID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject> localVarResponse = await GetEarningsRateAsyncWithHttpInfo(accessToken, xeroTenantId, earningsRateID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific earnings rates by using a unique earnings rate id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="earningsRateID">Identifier for the earnings rate</param>
        /// <returns>Task of ApiResponse (EarningsRateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRateObject>> GetEarningsRateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid earningsRateID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEarningsRate");

            // verify the required parameter 'earningsRateID' is set
            if (earningsRateID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsRateID' when calling PayrollNzApi->GetEarningsRate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (earningsRateID != null)
                requestOptions.PathParameters.Add("EarningsRateID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(earningsRateID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EarningsRateObject>("/EarningsRates/{EarningsRateID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEarningsRate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves earnings rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of EarningsRates</returns>
        public async System.Threading.Tasks.Task<EarningsRates> GetEarningsRatesAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRates> localVarResponse = await GetEarningsRatesAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves earnings rates 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (EarningsRates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsRates>> GetEarningsRatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEarningsRates");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EarningsRates>("/EarningsRates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEarningsRates", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves an employees using a unique employee ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeObject> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject> localVarResponse = await GetEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an employees using a unique employee ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployee");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeObject>("/Employees/{EmployeeID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves leave balances for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveBalances</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveBalances> GetEmployeeLeaveBalancesAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveBalances> localVarResponse = await GetEmployeeLeaveBalancesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves leave balances for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveBalances)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveBalances>> GetEmployeeLeaveBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeaveBalances");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeLeaveBalances");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeLeaveBalances>("/Employees/{EmployeeID}/LeaveBalances", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeaveBalances", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves leave periods for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of LeavePeriods</returns>
        public async System.Threading.Tasks.Task<LeavePeriods> GetEmployeeLeavePeriodsAsync (string accessToken, string xeroTenantId, Guid employeeID, DateTime? startDate = null, DateTime? endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeavePeriods> localVarResponse = await GetEmployeeLeavePeriodsAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves leave periods for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="startDate">Filter by start date (optional)</param>
        /// <param name="endDate">Filter by end date (optional)</param>
        /// <returns>Task of ApiResponse (LeavePeriods)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeavePeriods>> GetEmployeeLeavePeriodsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, DateTime? startDate = null, DateTime? endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeavePeriods");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeLeavePeriods");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter

            if (startDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeavePeriods>("/Employees/{EmployeeID}/LeavePeriods", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeavePeriods", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves leave types for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaveTypes</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveTypes> GetEmployeeLeaveTypesAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypes> localVarResponse = await GetEmployeeLeaveTypesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves leave types for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaveTypes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveTypes>> GetEmployeeLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeaveTypes");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeLeaveTypes");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeLeaveTypes>("/Employees/{EmployeeID}/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeaveTypes", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves leave records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeLeaves</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaves> GetEmployeeLeavesAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaves> localVarResponse = await GetEmployeeLeavesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves leave records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeLeaves)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaves>> GetEmployeeLeavesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeLeaves");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeLeaves");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeLeaves>("/Employees/{EmployeeID}/Leave", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeLeaves", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves the opening balance for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeOpeningBalancesObject</returns>
        public async System.Threading.Tasks.Task<EmployeeOpeningBalancesObject> GetEmployeeOpeningBalancesAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject> localVarResponse = await GetEmployeeOpeningBalancesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the opening balance for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeOpeningBalancesObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeOpeningBalancesObject>> GetEmployeeOpeningBalancesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeOpeningBalances");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeOpeningBalances");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeOpeningBalancesObject>("/Employees/{EmployeeID}/openingBalances", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeOpeningBalances", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves pay templates for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeePayTemplates</returns>
        public async System.Threading.Tasks.Task<EmployeePayTemplates> GetEmployeePayTemplatesAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeePayTemplates> localVarResponse = await GetEmployeePayTemplatesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves pay templates for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeePayTemplates)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeePayTemplates>> GetEmployeePayTemplatesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeePayTemplates");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeePayTemplates");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeePayTemplates>("/Employees/{EmployeeID}/PayTemplates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeePayTemplates", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves available payment methods for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of PaymentMethodObject</returns>
        public async System.Threading.Tasks.Task<PaymentMethodObject> GetEmployeePaymentMethodAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject> localVarResponse = await GetEmployeePaymentMethodAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves available payment methods for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (PaymentMethodObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaymentMethodObject>> GetEmployeePaymentMethodAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeePaymentMethod");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeePaymentMethod");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaymentMethodObject>("/Employees/{EmployeeID}/PaymentMethods", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeePaymentMethod", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of SalaryAndWages</returns>
        public async System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages> localVarResponse = await GetEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, salaryAndWagesID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an employee&#39;s salary and wages record by using a unique salary and wage ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeSalaryAndWage");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWagesID' is set
            if (salaryAndWagesID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWagesID' when calling PayrollNzApi->GetEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (salaryAndWagesID != null)
                requestOptions.PathParameters.Add("SalaryAndWagesID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(salaryAndWagesID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SalaryAndWages>("/Employees/{EmployeeID}/SalaryAndWages/{SalaryAndWagesID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves an employee&#39;s salary and wages 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of SalaryAndWages</returns>
        public async System.Threading.Tasks.Task<SalaryAndWages> GetEmployeeSalaryAndWagesAsync (string accessToken, string xeroTenantId, Guid employeeID, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages> localVarResponse = await GetEmployeeSalaryAndWagesAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an employee&#39;s salary and wages 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (SalaryAndWages)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWages>> GetEmployeeSalaryAndWagesAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeSalaryAndWages");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeSalaryAndWages");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SalaryAndWages>("/Employees/{EmployeeID}/SalaryAndWages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeSalaryAndWages", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves tax records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of EmployeeTaxObject</returns>
        public async System.Threading.Tasks.Task<EmployeeTaxObject> GetEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject> localVarResponse = await GetEmployeeTaxAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves tax records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject>> GetEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployeeTax");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->GetEmployeeTax");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<EmployeeTaxObject>("/Employees/{EmployeeID}/Tax", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployeeTax", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="filter">Filter by first name and/or lastname (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, string filter = null, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await GetEmployeesAsyncWithHttpInfo(accessToken, xeroTenantId, filter, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="filter">Filter by first name and/or lastname (optional)</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string filter = null, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetEmployees");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (filter != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Employees>("/Employees", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployees", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific leave type by using a unique leave type ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of LeaveTypeObject</returns>
        public async System.Threading.Tasks.Task<LeaveTypeObject> GetLeaveTypeAsync (string accessToken, string xeroTenantId, Guid leaveTypeID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject> localVarResponse = await GetLeaveTypeAsyncWithHttpInfo(accessToken, xeroTenantId, leaveTypeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific leave type by using a unique leave type ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveTypeID">Identifier for the leave type</param>
        /// <returns>Task of ApiResponse (LeaveTypeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypeObject>> GetLeaveTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveTypeID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetLeaveType");

            // verify the required parameter 'leaveTypeID' is set
            if (leaveTypeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveTypeID' when calling PayrollNzApi->GetLeaveType");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (leaveTypeID != null)
                requestOptions.PathParameters.Add("LeaveTypeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveTypeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeaveTypeObject>("/LeaveTypes/{LeaveTypeID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLeaveType", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves leave types 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of LeaveTypes</returns>
        public async System.Threading.Tasks.Task<LeaveTypes> GetLeaveTypesAsync (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypes> localVarResponse = await GetLeaveTypesAsyncWithHttpInfo(accessToken, xeroTenantId, page, activeOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves leave types 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="activeOnly">Filters leave types by active status. By default the API returns all leave types. (optional)</param>
        /// <returns>Task of ApiResponse (LeaveTypes)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveTypes>> GetLeaveTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, bool? activeOnly = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetLeaveTypes");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (activeOnly != null)
            {
              requestOptions.QueryParameters.Add("ActiveOnly", activeOnly.ToString());
            }

            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeaveTypes>("/LeaveTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLeaveTypes", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific pay run by using a unique pay run ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of PayRunObject</returns>
        public async System.Threading.Tasks.Task<PayRunObject> GetPayRunAsync (string accessToken, string xeroTenantId, Guid payRunID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject> localVarResponse = await GetPayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific pay run by using a unique pay run ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject>> GetPayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRun");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollNzApi->GetPayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payRunID != null)
                requestOptions.PathParameters.Add("PayRunID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payRunID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRunObject>("/PayRuns/{PayRunID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific payrun calendar by using a unique payroll calendar ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of PayRunCalendarObject</returns>
        public async System.Threading.Tasks.Task<PayRunCalendarObject> GetPayRunCalendarAsync (string accessToken, string xeroTenantId, Guid payrollCalendarID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject> localVarResponse = await GetPayRunCalendarAsyncWithHttpInfo(accessToken, xeroTenantId, payrollCalendarID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific payrun calendar by using a unique payroll calendar ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Identifier for the payrun calendars</param>
        /// <returns>Task of ApiResponse (PayRunCalendarObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendarObject>> GetPayRunCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payrollCalendarID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRunCalendar");

            // verify the required parameter 'payrollCalendarID' is set
            if (payrollCalendarID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payrollCalendarID' when calling PayrollNzApi->GetPayRunCalendar");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payrollCalendarID != null)
                requestOptions.PathParameters.Add("PayrollCalendarID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payrollCalendarID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRunCalendarObject>("/PayRunCalendars/{PayrollCalendarID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRunCalendar", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves payrun calendars 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PayRunCalendars</returns>
        public async System.Threading.Tasks.Task<PayRunCalendars> GetPayRunCalendarsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendars> localVarResponse = await GetPayRunCalendarsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves payrun calendars 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PayRunCalendars)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunCalendars>> GetPayRunCalendarsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRunCalendars");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRunCalendars>("/PayRunCalendars", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRunCalendars", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves pay runs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of PayRuns</returns>
        public async System.Threading.Tasks.Task<PayRuns> GetPayRunsAsync (string accessToken, string xeroTenantId, int? page = null, string status = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns> localVarResponse = await GetPayRunsAsyncWithHttpInfo(accessToken, xeroTenantId, page, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves pay runs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="status">By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status. (optional)</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns>> GetPayRunsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string status = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPayRuns");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (status != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "status", status))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRuns>("/PayRuns", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRuns", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific payslip by a unique pay slip ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of PaySlipObject</returns>
        public async System.Threading.Tasks.Task<PaySlipObject> GetPaySlipAsync (string accessToken, string xeroTenantId, Guid paySlipID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject> localVarResponse = await GetPaySlipAsyncWithHttpInfo(accessToken, xeroTenantId, paySlipID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific payslip by a unique pay slip ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject>> GetPaySlipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPaySlip");

            // verify the required parameter 'paySlipID' is set
            if (paySlipID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paySlipID' when calling PayrollNzApi->GetPaySlip");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paySlipID != null)
                requestOptions.PathParameters.Add("PaySlipID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paySlipID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaySlipObject>("/PaySlips/{PaySlipID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaySlip", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves payslips 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of PaySlips</returns>
        public async System.Threading.Tasks.Task<PaySlips> GetPaySlipsAsync (string accessToken, string xeroTenantId, Guid payRunID, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlips> localVarResponse = await GetPaySlipsAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves payslips 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (PaySlips)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlips>> GetPaySlipsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetPaySlips");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollNzApi->GetPaySlips");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (payRunID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "PayRunID", payRunID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PaySlips>("/PaySlips", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaySlips", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific reimbursement by using a unique reimbursement ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ReimbursementObject</returns>
        public async System.Threading.Tasks.Task<ReimbursementObject> GetReimbursementAsync (string accessToken, string xeroTenantId, Guid reimbursementID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject> localVarResponse = await GetReimbursementAsyncWithHttpInfo(accessToken, xeroTenantId, reimbursementID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific reimbursement by using a unique reimbursement ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="reimbursementID">Identifier for the reimbursement</param>
        /// <returns>Task of ApiResponse (ReimbursementObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReimbursementObject>> GetReimbursementAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid reimbursementID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetReimbursement");

            // verify the required parameter 'reimbursementID' is set
            if (reimbursementID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'reimbursementID' when calling PayrollNzApi->GetReimbursement");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (reimbursementID != null)
                requestOptions.PathParameters.Add("ReimbursementID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(reimbursementID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReimbursementObject>("/Reimbursements/{ReimbursementID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReimbursement", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves reimbursements 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Reimbursements</returns>
        public async System.Threading.Tasks.Task<Reimbursements> GetReimbursementsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Reimbursements> localVarResponse = await GetReimbursementsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves reimbursements 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Reimbursements)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Reimbursements>> GetReimbursementsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetReimbursements");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Reimbursements>("/Reimbursements", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReimbursements", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> GetSettingsAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Settings> localVarResponse = await GetSettingsAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Settings>> GetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetSettings");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Settings>("/Settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific statutory deduction by using a unique statutory deductions id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of StatutoryDeductionObject</returns>
        public async System.Threading.Tasks.Task<StatutoryDeductionObject> GetStatutoryDeductionAsync (string accessToken, string xeroTenantId, Guid id)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<StatutoryDeductionObject> localVarResponse = await GetStatutoryDeductionAsyncWithHttpInfo(accessToken, xeroTenantId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific statutory deduction by using a unique statutory deductions id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">Identifier for the statutory deduction</param>
        /// <returns>Task of ApiResponse (StatutoryDeductionObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<StatutoryDeductionObject>> GetStatutoryDeductionAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetStatutoryDeduction");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'id' when calling PayrollNzApi->GetStatutoryDeduction");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<StatutoryDeductionObject>("/StatutoryDeductions/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetStatutoryDeduction", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves statutory deductions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of StatutoryDeductions</returns>
        public async System.Threading.Tasks.Task<StatutoryDeductions> GetStatutoryDeductionsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<StatutoryDeductions> localVarResponse = await GetStatutoryDeductionsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves statutory deductions 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (StatutoryDeductions)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<StatutoryDeductions>> GetStatutoryDeductionsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetStatutoryDeductions");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<StatutoryDeductions>("/StatutoryDeductions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetStatutoryDeductions", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific superannuation using a unique superannuation ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superannuationID">Identifier for the superannuation</param>
        /// <returns>Task of SuperannuationObject</returns>
        public async System.Threading.Tasks.Task<SuperannuationObject> GetSuperannuationAsync (string accessToken, string xeroTenantId, Guid superannuationID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperannuationObject> localVarResponse = await GetSuperannuationAsyncWithHttpInfo(accessToken, xeroTenantId, superannuationID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific superannuation using a unique superannuation ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superannuationID">Identifier for the superannuation</param>
        /// <returns>Task of ApiResponse (SuperannuationObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperannuationObject>> GetSuperannuationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid superannuationID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetSuperannuation");

            // verify the required parameter 'superannuationID' is set
            if (superannuationID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'superannuationID' when calling PayrollNzApi->GetSuperannuation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (superannuationID != null)
                requestOptions.PathParameters.Add("SuperannuationID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(superannuationID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SuperannuationObject>("/Superannuations/{SuperannuationID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSuperannuation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves superannuations 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of Superannuations</returns>
        public async System.Threading.Tasks.Task<Superannuations> GetSuperannuationsAsync (string accessToken, string xeroTenantId, int? page = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Superannuations> localVarResponse = await GetSuperannuationsAsyncWithHttpInfo(accessToken, xeroTenantId, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves superannuations 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <returns>Task of ApiResponse (Superannuations)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Superannuations>> GetSuperannuationsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetSuperannuations");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Superannuations>("/Superannuations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSuperannuations", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific timesheet by using a unique timesheet ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> GetTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await GetTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific timesheet by using a unique timesheet ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> GetTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->GetTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TimesheetObject>("/Timesheets/{TimesheetID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves timesheets 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
        /// <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
        /// <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
        /// <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
        /// <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
        /// <returns>Task of Timesheets</returns>
        public async System.Threading.Tasks.Task<Timesheets> GetTimesheetsAsync (string accessToken, string xeroTenantId, int? page = null, string filter = null, string status = null, string startDate = null, string endDate = null, string sort = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets> localVarResponse = await GetTimesheetsAsyncWithHttpInfo(accessToken, xeroTenantId, page, filter, status, startDate, endDate, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves timesheets 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="page">Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. (optional)</param>
        /// <param name="filter">Filter by employeeId and/or payrollCalendarId (optional)</param>
        /// <param name="status">filter results by any timesheets with a matching timesheet status (optional)</param>
        /// <param name="startDate">filter results by any timesheets with a startDate on or after the provided date (optional)</param>
        /// <param name="endDate">filter results by any timesheets with a endDate on or before the provided date (optional)</param>
        /// <param name="sort">sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest. (optional)</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets>> GetTimesheetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? page = null, string filter = null, string status = null, string startDate = null, string endDate = null, string sort = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetTimesheets");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (filter != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (status != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "status", status))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (startDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (sort != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Timesheets>("/Timesheets", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimesheets", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of TrackingCategories</returns>
        public async System.Threading.Tasks.Task<TrackingCategories> GetTrackingCategoriesAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories> localVarResponse = await GetTrackingCategoriesAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves tracking categories 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (TrackingCategories)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrackingCategories>> GetTrackingCategoriesAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->GetTrackingCategories");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TrackingCategories>("/Settings/TrackingCategories", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTrackingCategories", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Reverts a timesheet to draft 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> RevertTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await RevertTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reverts a timesheet to draft 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> RevertTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->RevertTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->RevertTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<TimesheetObject>("/Timesheets/{TimesheetID}/RevertToDraft", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RevertTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates an existing employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of EmployeeObject</returns>
        public async System.Threading.Tasks.Task<EmployeeObject> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, Employee employee)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject> localVarResponse = await UpdateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employee);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <returns>Task of ApiResponse (EmployeeObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeObject>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Employee employee)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployee");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->UpdateEmployee");

            // verify the required parameter 'employee' is set
            if (employee == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employee' when calling PayrollNzApi->UpdateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employee;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<EmployeeObject>("/Employees/{EmployeeID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates an earnings template records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of EarningsTemplateObject</returns>
        public async System.Threading.Tasks.Task<EarningsTemplateObject> UpdateEmployeeEarningsTemplateAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID, EarningsTemplate earningsTemplate)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject> localVarResponse = await UpdateEmployeeEarningsTemplateAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, payTemplateEarningID, earningsTemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an earnings template records for an employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="payTemplateEarningID">Id for single pay template earnings object</param>
        /// <param name="earningsTemplate"></param>
        /// <returns>Task of ApiResponse (EarningsTemplateObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EarningsTemplateObject>> UpdateEmployeeEarningsTemplateAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid payTemplateEarningID, EarningsTemplate earningsTemplate)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");

            // verify the required parameter 'payTemplateEarningID' is set
            if (payTemplateEarningID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payTemplateEarningID' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");

            // verify the required parameter 'earningsTemplate' is set
            if (earningsTemplate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'earningsTemplate' when calling PayrollNzApi->UpdateEmployeeEarningsTemplate");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (payTemplateEarningID != null)
                requestOptions.PathParameters.Add("PayTemplateEarningID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payTemplateEarningID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = earningsTemplate;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<EarningsTemplateObject>("/Employees/{EmployeeID}/PayTemplates/earnings/{PayTemplateEarningID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeEarningsTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates leave records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of EmployeeLeaveObject</returns>
        public async System.Threading.Tasks.Task<EmployeeLeaveObject> UpdateEmployeeLeaveAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID, EmployeeLeave employeeLeave)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject> localVarResponse = await UpdateEmployeeLeaveAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, leaveID, employeeLeave);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates leave records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="leaveID">Leave id for single object</param>
        /// <param name="employeeLeave"></param>
        /// <returns>Task of ApiResponse (EmployeeLeaveObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeLeaveObject>> UpdateEmployeeLeaveAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid leaveID, EmployeeLeave employeeLeave)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeLeave");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->UpdateEmployeeLeave");

            // verify the required parameter 'leaveID' is set
            if (leaveID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveID' when calling PayrollNzApi->UpdateEmployeeLeave");

            // verify the required parameter 'employeeLeave' is set
            if (employeeLeave == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeLeave' when calling PayrollNzApi->UpdateEmployeeLeave");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (leaveID != null)
                requestOptions.PathParameters.Add("LeaveID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeLeave;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<EmployeeLeaveObject>("/Employees/{EmployeeID}/Leave/{LeaveID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeLeave", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates an employee&#39;s salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of SalaryAndWageObject</returns>
        public async System.Threading.Tasks.Task<SalaryAndWageObject> UpdateEmployeeSalaryAndWageAsync (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID, SalaryAndWage salaryAndWage)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject> localVarResponse = await UpdateEmployeeSalaryAndWageAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, salaryAndWagesID, salaryAndWage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an employee&#39;s salary and wages record 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="salaryAndWagesID">Id for single pay template earnings object</param>
        /// <param name="salaryAndWage"></param>
        /// <returns>Task of ApiResponse (SalaryAndWageObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SalaryAndWageObject>> UpdateEmployeeSalaryAndWageAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, Guid salaryAndWagesID, SalaryAndWage salaryAndWage)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWagesID' is set
            if (salaryAndWagesID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWagesID' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");

            // verify the required parameter 'salaryAndWage' is set
            if (salaryAndWage == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'salaryAndWage' when calling PayrollNzApi->UpdateEmployeeSalaryAndWage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (salaryAndWagesID != null)
                requestOptions.PathParameters.Add("SalaryAndWagesID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(salaryAndWagesID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = salaryAndWage;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<SalaryAndWageObject>("/Employees/{EmployeeID}/SalaryAndWages/{SalaryAndWagesID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeSalaryAndWage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates the tax records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of EmployeeTaxObject</returns>
        public async System.Threading.Tasks.Task<EmployeeTaxObject> UpdateEmployeeTaxAsync (string accessToken, string xeroTenantId, Guid employeeID, EmployeeTax employeeTax)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject> localVarResponse = await UpdateEmployeeTaxAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employeeTax);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the tax records for a specific employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employeeTax"></param>
        /// <returns>Task of ApiResponse (EmployeeTaxObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<EmployeeTaxObject>> UpdateEmployeeTaxAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, EmployeeTax employeeTax)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateEmployeeTax");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollNzApi->UpdateEmployeeTax");

            // verify the required parameter 'employeeTax' is set
            if (employeeTax == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeTax' when calling PayrollNzApi->UpdateEmployeeTax");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = employeeTax;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<EmployeeTaxObject>("/Employees/{EmployeeID}/Tax", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployeeTax", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of PayRunObject</returns>
        public async System.Threading.Tasks.Task<PayRunObject> UpdatePayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject> localVarResponse = await UpdatePayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID, payRun);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">Identifier for the pay run</param>
        /// <param name="payRun"></param>
        /// <returns>Task of ApiResponse (PayRunObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRunObject>> UpdatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, PayRun payRun)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdatePayRun");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollNzApi->UpdatePayRun");

            // verify the required parameter 'payRun' is set
            if (payRun == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRun' when calling PayrollNzApi->UpdatePayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payRunID != null)
                requestOptions.PathParameters.Add("PayRunID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payRunID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = payRun;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<PayRunObject>("/PayRuns/{PayRunID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates an employee pay slip 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of PaySlipObject</returns>
        public async System.Threading.Tasks.Task<PaySlipObject> UpdatePaySlipLineItemsAsync (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject> localVarResponse = await UpdatePaySlipLineItemsAsyncWithHttpInfo(accessToken, xeroTenantId, paySlipID, paySlip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an employee pay slip 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="paySlipID">Identifier for the payslip</param>
        /// <param name="paySlip"></param>
        /// <returns>Task of ApiResponse (PaySlipObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PaySlipObject>> UpdatePaySlipLineItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid paySlipID, PaySlip paySlip)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdatePaySlipLineItems");

            // verify the required parameter 'paySlipID' is set
            if (paySlipID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paySlipID' when calling PayrollNzApi->UpdatePaySlipLineItems");

            // verify the required parameter 'paySlip' is set
            if (paySlip == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'paySlip' when calling PayrollNzApi->UpdatePaySlipLineItems");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (paySlipID != null)
                requestOptions.PathParameters.Add("PaySlipID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(paySlipID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = paySlip;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<PaySlipObject>("/PaySlips/{PaySlipID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePaySlipLineItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a timesheet line for a specific timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of TimesheetLineObject</returns>
        public async System.Threading.Tasks.Task<TimesheetLineObject> UpdateTimesheetLineAsync (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject> localVarResponse = await UpdateTimesheetLineAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, timesheetLineID, timesheetLine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a timesheet line for a specific timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Identifier for the timesheet</param>
        /// <param name="timesheetLineID">Identifier for the timesheet line</param>
        /// <param name="timesheetLine"></param>
        /// <returns>Task of ApiResponse (TimesheetLineObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetLineObject>> UpdateTimesheetLineAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, Guid timesheetLineID, TimesheetLine timesheetLine)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollNzApi->UpdateTimesheetLine");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollNzApi->UpdateTimesheetLine");

            // verify the required parameter 'timesheetLineID' is set
            if (timesheetLineID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLineID' when calling PayrollNzApi->UpdateTimesheetLine");

            // verify the required parameter 'timesheetLine' is set
            if (timesheetLine == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetLine' when calling PayrollNzApi->UpdateTimesheetLine");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (timesheetLineID != null)
                requestOptions.PathParameters.Add("TimesheetLineID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetLineID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = timesheetLine;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<TimesheetLineObject>("/Timesheets/{TimesheetID}/Lines/{TimesheetLineID}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTimesheetLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
