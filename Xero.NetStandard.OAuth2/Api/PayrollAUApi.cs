/* 
 * Xero Payroll AU API
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

// The version of the OpenAPI document: 4.0.0


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Model.PayrollAu;
using System.Threading;

namespace Xero.NetStandard.OAuth2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollAuApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Approve a requested leave application by a unique leave application id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        System.Threading.Tasks.Task<LeaveApplications> ApproveLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Approve a requested leave application by a unique leave application id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveApplications>> ApproveLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a payroll employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> CreateEmployeeAsync (string accessToken, string xeroTenantId, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a payroll employee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a leave application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        System.Threading.Tasks.Task<LeaveApplications> CreateLeaveApplicationAsync (string accessToken, string xeroTenantId, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a leave application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveApplications>> CreateLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a pay item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payItem"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayItems</returns>
        System.Threading.Tasks.Task<PayItems> CreatePayItemAsync (string accessToken, string xeroTenantId, PayItem payItem, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a pay item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payItem"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayItems>> CreatePayItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayItem payItem, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        System.Threading.Tasks.Task<PayRuns> CreatePayRunAsync (string accessToken, string xeroTenantId, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a pay run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRuns>> CreatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a Payroll Calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendar"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayrollCalendars</returns>
        System.Threading.Tasks.Task<PayrollCalendars> CreatePayrollCalendarAsync (string accessToken, string xeroTenantId, List<PayrollCalendar> payrollCalendar, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a Payroll Calendar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendar"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayrollCalendars)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayrollCalendars>> CreatePayrollCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<PayrollCalendar> payrollCalendar, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a superfund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        System.Threading.Tasks.Task<SuperFunds> CreateSuperfundAsync (string accessToken, string xeroTenantId, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a superfund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperFunds>> CreateSuperfundAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Creates a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Timesheets</returns>
        System.Threading.Tasks.Task<Timesheets> CreateTimesheetAsync (string accessToken, string xeroTenantId, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a timesheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timesheets>> CreateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves an employee&#39;s detail by unique employee id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves an employee&#39;s detail by unique employee id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches payroll employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Searches payroll employees
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a leave application by a unique leave application id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        System.Threading.Tasks.Task<LeaveApplications> GetLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a leave application by a unique leave application id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveApplications>> GetLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves leave applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        System.Threading.Tasks.Task<LeaveApplications> GetLeaveApplicationsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves leave applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveApplications>> GetLeaveApplicationsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves leave applications including leave requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        System.Threading.Tasks.Task<LeaveApplications> GetLeaveApplicationsV2Async (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves leave applications including leave requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveApplications>> GetLeaveApplicationsV2AsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves pay items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayItems</returns>
        System.Threading.Tasks.Task<PayItems> GetPayItemsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves pay items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayItems)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayItems>> GetPayItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a pay run by using a unique pay run id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        System.Threading.Tasks.Task<PayRuns> GetPayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a pay run by using a unique pay run id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRuns>> GetPayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves pay runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        System.Threading.Tasks.Task<PayRuns> GetPayRunsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves pay runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRuns>> GetPayRunsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves payroll calendar by using a unique payroll calendar ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Payroll Calendar id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayrollCalendars</returns>
        System.Threading.Tasks.Task<PayrollCalendars> GetPayrollCalendarAsync (string accessToken, string xeroTenantId, Guid payrollCalendarID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves payroll calendar by using a unique payroll calendar ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Payroll Calendar id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayrollCalendars)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayrollCalendars>> GetPayrollCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payrollCalendarID, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves payroll calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayrollCalendars</returns>
        System.Threading.Tasks.Task<PayrollCalendars> GetPayrollCalendarsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves payroll calendars
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayrollCalendars)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayrollCalendars>> GetPayrollCalendarsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves for a payslip by a unique payslip id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayslipObject</returns>
        System.Threading.Tasks.Task<PayslipObject> GetPayslipAsync (string accessToken, string xeroTenantId, Guid payslipID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves for a payslip by a unique payslip id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayslipObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayslipObject>> GetPayslipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payslipID, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves payroll settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SettingsObject</returns>
        System.Threading.Tasks.Task<SettingsObject> GetSettingsAsync (string accessToken, string xeroTenantId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves payroll settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SettingsObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsObject>> GetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a superfund by using a unique superfund ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        System.Threading.Tasks.Task<SuperFunds> GetSuperfundAsync (string accessToken, string xeroTenantId, Guid superFundID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a superfund by using a unique superfund ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperFunds>> GetSuperfundAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid superFundID, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves superfund products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
        /// <param name="USI">The USI of the Regulated SuperFund (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFundProducts</returns>
        System.Threading.Tasks.Task<SuperFundProducts> GetSuperfundProductsAsync (string accessToken, string xeroTenantId, string ABN = null, string USI = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves superfund products
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
        /// <param name="USI">The USI of the Regulated SuperFund (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFundProducts)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperFundProducts>> GetSuperfundProductsAsyncWithHttpInfo (string accessToken, string xeroTenantId, string ABN = null, string USI = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves superfunds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        System.Threading.Tasks.Task<SuperFunds> GetSuperfundsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves superfunds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperFunds>> GetSuperfundsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves a timesheet by using a unique timesheet id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimesheetObject</returns>
        System.Threading.Tasks.Task<TimesheetObject> GetTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a timesheet by using a unique timesheet id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimesheetObject>> GetTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves timesheets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Timesheets</returns>
        System.Threading.Tasks.Task<Timesheets> GetTimesheetsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves timesheets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timesheets>> GetTimesheetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Reject a leave application by a unique leave application id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        System.Threading.Tasks.Task<LeaveApplications> RejectLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Reject a leave application by a unique leave application id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveApplications>> RejectLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates an employee&#39;s detail
        /// </summary>
        /// <remarks>
        /// Update properties on a single employee
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        System.Threading.Tasks.Task<Employees> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates an employee&#39;s detail
        /// </summary>
        /// <remarks>
        /// Update properties on a single employee
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employees>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates a specific leave application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        System.Threading.Tasks.Task<LeaveApplications> UpdateLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a specific leave application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaveApplications>> UpdateLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates a pay run
        /// </summary>
        /// <remarks>
        /// Update properties on a single PayRun
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        System.Threading.Tasks.Task<PayRuns> UpdatePayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a pay run
        /// </summary>
        /// <remarks>
        /// Update properties on a single PayRun
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayRuns>> UpdatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates a payslip
        /// </summary>
        /// <remarks>
        /// Update lines on a single payslips
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="payslipLines"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Payslips</returns>
        System.Threading.Tasks.Task<Payslips> UpdatePayslipAsync (string accessToken, string xeroTenantId, Guid payslipID, List<PayslipLines> payslipLines, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a payslip
        /// </summary>
        /// <remarks>
        /// Update lines on a single payslips
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="payslipLines"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Payslips)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payslips>> UpdatePayslipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payslipID, List<PayslipLines> payslipLines, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates a superfund
        /// </summary>
        /// <remarks>
        /// Update properties on a single Superfund
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        System.Threading.Tasks.Task<SuperFunds> UpdateSuperfundAsync (string accessToken, string xeroTenantId, Guid superFundID, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a superfund
        /// </summary>
        /// <remarks>
        /// Update properties on a single Superfund
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuperFunds>> UpdateSuperfundAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid superFundID, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Updates a timesheet
        /// </summary>
        /// <remarks>
        /// Update properties on a single timesheet
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Timesheets</returns>
        System.Threading.Tasks.Task<Timesheets> UpdateTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates a timesheet
        /// </summary>
        /// <remarks>
        /// Update properties on a single timesheet
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Timesheets>> UpdateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollAuApi : IPayrollAuApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayrollAuApi : IPayrollAuApi
    {
        private Xero.NetStandard.OAuth2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollAuApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollAuApi() : this((string) null)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = "https://api.xero.com/payroll.xro/1.0" }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollAuApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollAuApi(String basePath)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollAuApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayrollAuApi(Xero.NetStandard.OAuth2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PayrollAuApi(Xero.NetStandard.OAuth2.Client.ISynchronousClient client,Xero.NetStandard.OAuth2.Client.IAsynchronousClient asyncClient, Xero.NetStandard.OAuth2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.NetStandard.OAuth2.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Approve a requested leave application by a unique leave application id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        public async System.Threading.Tasks.Task<LeaveApplications> ApproveLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications> localVarResponse = await ApproveLeaveApplicationAsyncWithHttpInfo(accessToken, xeroTenantId, leaveApplicationID, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Approve a requested leave application by a unique leave application id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications>> ApproveLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->ApproveLeaveApplication");

            // verify the required parameter 'leaveApplicationID' is set
            if (leaveApplicationID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveApplicationID' when calling PayrollAuApi->ApproveLeaveApplication");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (leaveApplicationID != null)
                requestOptions.PathParameters.Add("LeaveApplicationID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveApplicationID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<LeaveApplications>("/LeaveApplications/{LeaveApplicationID}/approve", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ApproveLeaveApplication", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a payroll employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> CreateEmployeeAsync (string accessToken, string xeroTenantId, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await CreateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employee, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a payroll employee 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> CreateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->CreateEmployee");

            // verify the required parameter 'employee' is set
            if (employee == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employee' when calling PayrollAuApi->CreateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = employee;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Employees>("/Employees", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a leave application 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        public async System.Threading.Tasks.Task<LeaveApplications> CreateLeaveApplicationAsync (string accessToken, string xeroTenantId, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications> localVarResponse = await CreateLeaveApplicationAsyncWithHttpInfo(accessToken, xeroTenantId, leaveApplication, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a leave application 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications>> CreateLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->CreateLeaveApplication");

            // verify the required parameter 'leaveApplication' is set
            if (leaveApplication == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveApplication' when calling PayrollAuApi->CreateLeaveApplication");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = leaveApplication;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<LeaveApplications>("/LeaveApplications", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateLeaveApplication", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a pay item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payItem"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayItems</returns>
        public async System.Threading.Tasks.Task<PayItems> CreatePayItemAsync (string accessToken, string xeroTenantId, PayItem payItem, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayItems> localVarResponse = await CreatePayItemAsyncWithHttpInfo(accessToken, xeroTenantId, payItem, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a pay item 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payItem"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayItems)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayItems>> CreatePayItemAsyncWithHttpInfo (string accessToken, string xeroTenantId, PayItem payItem, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->CreatePayItem");

            // verify the required parameter 'payItem' is set
            if (payItem == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payItem' when calling PayrollAuApi->CreatePayItem");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = payItem;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayItems>("/PayItems", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayItem", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        public async System.Threading.Tasks.Task<PayRuns> CreatePayRunAsync (string accessToken, string xeroTenantId, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns> localVarResponse = await CreatePayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRun, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a pay run 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns>> CreatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->CreatePayRun");

            // verify the required parameter 'payRun' is set
            if (payRun == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRun' when calling PayrollAuApi->CreatePayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = payRun;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayRuns>("/PayRuns", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a Payroll Calendar 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendar"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayrollCalendars</returns>
        public async System.Threading.Tasks.Task<PayrollCalendars> CreatePayrollCalendarAsync (string accessToken, string xeroTenantId, List<PayrollCalendar> payrollCalendar, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayrollCalendars> localVarResponse = await CreatePayrollCalendarAsyncWithHttpInfo(accessToken, xeroTenantId, payrollCalendar, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Payroll Calendar 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendar"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayrollCalendars)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayrollCalendars>> CreatePayrollCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<PayrollCalendar> payrollCalendar, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->CreatePayrollCalendar");

            // verify the required parameter 'payrollCalendar' is set
            if (payrollCalendar == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payrollCalendar' when calling PayrollAuApi->CreatePayrollCalendar");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = payrollCalendar;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayrollCalendars>("/PayrollCalendars", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePayrollCalendar", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a superfund 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        public async System.Threading.Tasks.Task<SuperFunds> CreateSuperfundAsync (string accessToken, string xeroTenantId, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds> localVarResponse = await CreateSuperfundAsyncWithHttpInfo(accessToken, xeroTenantId, superFund, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a superfund 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds>> CreateSuperfundAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->CreateSuperfund");

            // verify the required parameter 'superFund' is set
            if (superFund == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'superFund' when calling PayrollAuApi->CreateSuperfund");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = superFund;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<SuperFunds>("/Superfunds", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateSuperfund", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Timesheets</returns>
        public async System.Threading.Tasks.Task<Timesheets> CreateTimesheetAsync (string accessToken, string xeroTenantId, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets> localVarResponse = await CreateTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheet, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a timesheet 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets>> CreateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->CreateTimesheet");

            // verify the required parameter 'timesheet' is set
            if (timesheet == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheet' when calling PayrollAuApi->CreateTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = timesheet;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Timesheets>("/Timesheets", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves an employee&#39;s detail by unique employee id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await GetEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an employee&#39;s detail by unique employee id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> GetEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetEmployee");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollAuApi->GetEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Employees>("/Employees/{EmployeeID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Searches payroll employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> GetEmployeesAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await GetEmployeesAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches payroll employees 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> GetEmployeesAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetEmployees");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Employees>("/Employees", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEmployees", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a leave application by a unique leave application id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        public async System.Threading.Tasks.Task<LeaveApplications> GetLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications> localVarResponse = await GetLeaveApplicationAsyncWithHttpInfo(accessToken, xeroTenantId, leaveApplicationID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a leave application by a unique leave application id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications>> GetLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetLeaveApplication");

            // verify the required parameter 'leaveApplicationID' is set
            if (leaveApplicationID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveApplicationID' when calling PayrollAuApi->GetLeaveApplication");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (leaveApplicationID != null)
                requestOptions.PathParameters.Add("LeaveApplicationID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveApplicationID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeaveApplications>("/LeaveApplications/{LeaveApplicationID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLeaveApplication", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves leave applications 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        public async System.Threading.Tasks.Task<LeaveApplications> GetLeaveApplicationsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications> localVarResponse = await GetLeaveApplicationsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves leave applications 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications>> GetLeaveApplicationsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetLeaveApplications");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeaveApplications>("/LeaveApplications", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLeaveApplications", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves leave applications including leave requests 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        public async System.Threading.Tasks.Task<LeaveApplications> GetLeaveApplicationsV2Async (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications> localVarResponse = await GetLeaveApplicationsV2AsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves leave applications including leave requests 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications>> GetLeaveApplicationsV2AsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetLeaveApplicationsV2");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LeaveApplications>("/LeaveApplications/v2", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLeaveApplicationsV2", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves pay items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayItems</returns>
        public async System.Threading.Tasks.Task<PayItems> GetPayItemsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayItems> localVarResponse = await GetPayItemsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves pay items 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayItems)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayItems>> GetPayItemsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetPayItems");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayItems>("/PayItems", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayItems", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a pay run by using a unique pay run id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        public async System.Threading.Tasks.Task<PayRuns> GetPayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns> localVarResponse = await GetPayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a pay run by using a unique pay run id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns>> GetPayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetPayRun");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollAuApi->GetPayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payRunID != null)
                requestOptions.PathParameters.Add("PayRunID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payRunID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRuns>("/PayRuns/{PayRunID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves pay runs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        public async System.Threading.Tasks.Task<PayRuns> GetPayRunsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns> localVarResponse = await GetPayRunsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves pay runs 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns>> GetPayRunsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetPayRuns");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayRuns>("/PayRuns", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayRuns", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves payroll calendar by using a unique payroll calendar ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Payroll Calendar id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayrollCalendars</returns>
        public async System.Threading.Tasks.Task<PayrollCalendars> GetPayrollCalendarAsync (string accessToken, string xeroTenantId, Guid payrollCalendarID, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayrollCalendars> localVarResponse = await GetPayrollCalendarAsyncWithHttpInfo(accessToken, xeroTenantId, payrollCalendarID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves payroll calendar by using a unique payroll calendar ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payrollCalendarID">Payroll Calendar id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayrollCalendars)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayrollCalendars>> GetPayrollCalendarAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payrollCalendarID, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetPayrollCalendar");

            // verify the required parameter 'payrollCalendarID' is set
            if (payrollCalendarID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payrollCalendarID' when calling PayrollAuApi->GetPayrollCalendar");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payrollCalendarID != null)
                requestOptions.PathParameters.Add("PayrollCalendarID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payrollCalendarID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayrollCalendars>("/PayrollCalendars/{PayrollCalendarID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayrollCalendar", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves payroll calendars 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayrollCalendars</returns>
        public async System.Threading.Tasks.Task<PayrollCalendars> GetPayrollCalendarsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayrollCalendars> localVarResponse = await GetPayrollCalendarsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves payroll calendars 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayrollCalendars)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayrollCalendars>> GetPayrollCalendarsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetPayrollCalendars");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayrollCalendars>("/PayrollCalendars", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayrollCalendars", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves for a payslip by a unique payslip id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayslipObject</returns>
        public async System.Threading.Tasks.Task<PayslipObject> GetPayslipAsync (string accessToken, string xeroTenantId, Guid payslipID, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayslipObject> localVarResponse = await GetPayslipAsyncWithHttpInfo(accessToken, xeroTenantId, payslipID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves for a payslip by a unique payslip id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayslipObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayslipObject>> GetPayslipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payslipID, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetPayslip");

            // verify the required parameter 'payslipID' is set
            if (payslipID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payslipID' when calling PayrollAuApi->GetPayslip");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payslipID != null)
                requestOptions.PathParameters.Add("PayslipID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payslipID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<PayslipObject>("/Payslip/{PayslipID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPayslip", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves payroll settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SettingsObject</returns>
        public async System.Threading.Tasks.Task<SettingsObject> GetSettingsAsync (string accessToken, string xeroTenantId, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SettingsObject> localVarResponse = await GetSettingsAsyncWithHttpInfo(accessToken, xeroTenantId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves payroll settings 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SettingsObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SettingsObject>> GetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetSettings");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SettingsObject>("/Settings", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a superfund by using a unique superfund ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        public async System.Threading.Tasks.Task<SuperFunds> GetSuperfundAsync (string accessToken, string xeroTenantId, Guid superFundID, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds> localVarResponse = await GetSuperfundAsyncWithHttpInfo(accessToken, xeroTenantId, superFundID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a superfund by using a unique superfund ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds>> GetSuperfundAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid superFundID, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetSuperfund");

            // verify the required parameter 'superFundID' is set
            if (superFundID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'superFundID' when calling PayrollAuApi->GetSuperfund");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (superFundID != null)
                requestOptions.PathParameters.Add("SuperFundID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(superFundID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SuperFunds>("/Superfunds/{SuperFundID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSuperfund", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves superfund products 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
        /// <param name="USI">The USI of the Regulated SuperFund (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFundProducts</returns>
        public async System.Threading.Tasks.Task<SuperFundProducts> GetSuperfundProductsAsync (string accessToken, string xeroTenantId, string ABN = null, string USI = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFundProducts> localVarResponse = await GetSuperfundProductsAsyncWithHttpInfo(accessToken, xeroTenantId, ABN, USI, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves superfund products 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ABN">The ABN of the Regulated SuperFund (optional)</param>
        /// <param name="USI">The USI of the Regulated SuperFund (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFundProducts)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFundProducts>> GetSuperfundProductsAsyncWithHttpInfo (string accessToken, string xeroTenantId, string ABN = null, string USI = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetSuperfundProducts");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (ABN != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "ABN", ABN))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (USI != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "USI", USI))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SuperFundProducts>("/SuperfundProducts", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSuperfundProducts", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves superfunds 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        public async System.Threading.Tasks.Task<SuperFunds> GetSuperfundsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds> localVarResponse = await GetSuperfundsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves superfunds 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds>> GetSuperfundsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetSuperfunds");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<SuperFunds>("/Superfunds", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSuperfunds", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a timesheet by using a unique timesheet id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of TimesheetObject</returns>
        public async System.Threading.Tasks.Task<TimesheetObject> GetTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject> localVarResponse = await GetTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a timesheet by using a unique timesheet id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (TimesheetObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TimesheetObject>> GetTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollAuApi->GetTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TimesheetObject>("/Timesheets/{TimesheetID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves timesheets 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Timesheets</returns>
        public async System.Threading.Tasks.Task<Timesheets> GetTimesheetsAsync (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets> localVarResponse = await GetTimesheetsAsyncWithHttpInfo(accessToken, xeroTenantId, ifModifiedSince, where, order, page, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves timesheets 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="ifModifiedSince">Only records created or modified since this timestamp will be returned (optional)</param>
        /// <param name="where">Filter by an any element (optional)</param>
        /// <param name="order">Order by an any element (optional)</param>
        /// <param name="page">e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets>> GetTimesheetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, DateTime? ifModifiedSince = null, string where = null, string order = null, int? page = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->GetTimesheets");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (where != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "where", where))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (order != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "order", order))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (ifModifiedSince != null)
                requestOptions.HeaderParameters.Add("If-Modified-Since", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Timesheets>("/Timesheets", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTimesheets", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Reject a leave application by a unique leave application id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        public async System.Threading.Tasks.Task<LeaveApplications> RejectLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications> localVarResponse = await RejectLeaveApplicationAsyncWithHttpInfo(accessToken, xeroTenantId, leaveApplicationID, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reject a leave application by a unique leave application id 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications>> RejectLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->RejectLeaveApplication");

            // verify the required parameter 'leaveApplicationID' is set
            if (leaveApplicationID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveApplicationID' when calling PayrollAuApi->RejectLeaveApplication");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (leaveApplicationID != null)
                requestOptions.PathParameters.Add("LeaveApplicationID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveApplicationID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<LeaveApplications>("/LeaveApplications/{LeaveApplicationID}/reject", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RejectLeaveApplication", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates an employee&#39;s detail Update properties on a single employee
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Employees</returns>
        public async System.Threading.Tasks.Task<Employees> UpdateEmployeeAsync (string accessToken, string xeroTenantId, Guid employeeID, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Employees> localVarResponse = await UpdateEmployeeAsyncWithHttpInfo(accessToken, xeroTenantId, employeeID, employee, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an employee&#39;s detail Update properties on a single employee
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="employeeID">Employee id for single object</param>
        /// <param name="employee"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Employees)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Employees>> UpdateEmployeeAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid employeeID, List<Employee> employee, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->UpdateEmployee");

            // verify the required parameter 'employeeID' is set
            if (employeeID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employeeID' when calling PayrollAuApi->UpdateEmployee");

            // verify the required parameter 'employee' is set
            if (employee == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'employee' when calling PayrollAuApi->UpdateEmployee");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (employeeID != null)
                requestOptions.PathParameters.Add("EmployeeID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(employeeID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = employee;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Employees>("/Employees/{EmployeeID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateEmployee", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a specific leave application 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of LeaveApplications</returns>
        public async System.Threading.Tasks.Task<LeaveApplications> UpdateLeaveApplicationAsync (string accessToken, string xeroTenantId, Guid leaveApplicationID, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications> localVarResponse = await UpdateLeaveApplicationAsyncWithHttpInfo(accessToken, xeroTenantId, leaveApplicationID, leaveApplication, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific leave application 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="leaveApplicationID">Leave Application id for single object</param>
        /// <param name="leaveApplication"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (LeaveApplications)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LeaveApplications>> UpdateLeaveApplicationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid leaveApplicationID, List<LeaveApplication> leaveApplication, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->UpdateLeaveApplication");

            // verify the required parameter 'leaveApplicationID' is set
            if (leaveApplicationID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveApplicationID' when calling PayrollAuApi->UpdateLeaveApplication");

            // verify the required parameter 'leaveApplication' is set
            if (leaveApplication == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'leaveApplication' when calling PayrollAuApi->UpdateLeaveApplication");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (leaveApplicationID != null)
                requestOptions.PathParameters.Add("LeaveApplicationID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(leaveApplicationID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = leaveApplication;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<LeaveApplications>("/LeaveApplications/{LeaveApplicationID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateLeaveApplication", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a pay run Update properties on a single PayRun
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of PayRuns</returns>
        public async System.Threading.Tasks.Task<PayRuns> UpdatePayRunAsync (string accessToken, string xeroTenantId, Guid payRunID, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns> localVarResponse = await UpdatePayRunAsyncWithHttpInfo(accessToken, xeroTenantId, payRunID, payRun, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a pay run Update properties on a single PayRun
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payRunID">PayRun id for single object</param>
        /// <param name="payRun"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (PayRuns)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<PayRuns>> UpdatePayRunAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payRunID, List<PayRun> payRun, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->UpdatePayRun");

            // verify the required parameter 'payRunID' is set
            if (payRunID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRunID' when calling PayrollAuApi->UpdatePayRun");

            // verify the required parameter 'payRun' is set
            if (payRun == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payRun' when calling PayrollAuApi->UpdatePayRun");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payRunID != null)
                requestOptions.PathParameters.Add("PayRunID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payRunID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = payRun;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<PayRuns>("/PayRuns/{PayRunID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePayRun", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a payslip Update lines on a single payslips
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="payslipLines"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Payslips</returns>
        public async System.Threading.Tasks.Task<Payslips> UpdatePayslipAsync (string accessToken, string xeroTenantId, Guid payslipID, List<PayslipLines> payslipLines, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Payslips> localVarResponse = await UpdatePayslipAsyncWithHttpInfo(accessToken, xeroTenantId, payslipID, payslipLines, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a payslip Update lines on a single payslips
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="payslipID">Payslip id for single object</param>
        /// <param name="payslipLines"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Payslips)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Payslips>> UpdatePayslipAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid payslipID, List<PayslipLines> payslipLines, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->UpdatePayslip");

            // verify the required parameter 'payslipID' is set
            if (payslipID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payslipID' when calling PayrollAuApi->UpdatePayslip");

            // verify the required parameter 'payslipLines' is set
            if (payslipLines == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'payslipLines' when calling PayrollAuApi->UpdatePayslip");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (payslipID != null)
                requestOptions.PathParameters.Add("PayslipID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(payslipID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = payslipLines;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Payslips>("/Payslip/{PayslipID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePayslip", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a superfund Update properties on a single Superfund
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of SuperFunds</returns>
        public async System.Threading.Tasks.Task<SuperFunds> UpdateSuperfundAsync (string accessToken, string xeroTenantId, Guid superFundID, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds> localVarResponse = await UpdateSuperfundAsyncWithHttpInfo(accessToken, xeroTenantId, superFundID, superFund, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a superfund Update properties on a single Superfund
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="superFundID">Superfund id for single object</param>
        /// <param name="superFund"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (SuperFunds)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<SuperFunds>> UpdateSuperfundAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid superFundID, List<SuperFund> superFund, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->UpdateSuperfund");

            // verify the required parameter 'superFundID' is set
            if (superFundID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'superFundID' when calling PayrollAuApi->UpdateSuperfund");

            // verify the required parameter 'superFund' is set
            if (superFund == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'superFund' when calling PayrollAuApi->UpdateSuperfund");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (superFundID != null)
                requestOptions.PathParameters.Add("SuperFundID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(superFundID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = superFund;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<SuperFunds>("/Superfunds/{SuperFundID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateSuperfund", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates a timesheet Update properties on a single timesheet
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of Timesheets</returns>
        public async System.Threading.Tasks.Task<Timesheets> UpdateTimesheetAsync (string accessToken, string xeroTenantId, Guid timesheetID, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets> localVarResponse = await UpdateTimesheetAsyncWithHttpInfo(accessToken, xeroTenantId, timesheetID, timesheet, idempotencyKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a timesheet Update properties on a single timesheet
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="timesheetID">Timesheet id for single object</param>
        /// <param name="timesheet"></param>
        /// <param name="idempotencyKey">This allows you to safely retry requests without the risk of duplicate processing. 128 character max. (optional)</param>
        /// <param name="cancellationToken">Cancellation token enables cancellation between threads. Defaults to CancellationToken.None</param>
        /// <returns>Task of ApiResponse (Timesheets)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Timesheets>> UpdateTimesheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid timesheetID, List<Timesheet> timesheet, string idempotencyKey = null, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling PayrollAuApi->UpdateTimesheet");

            // verify the required parameter 'timesheetID' is set
            if (timesheetID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheetID' when calling PayrollAuApi->UpdateTimesheet");

            // verify the required parameter 'timesheet' is set
            if (timesheet == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'timesheet' when calling PayrollAuApi->UpdateTimesheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (timesheetID != null)
                requestOptions.PathParameters.Add("TimesheetID", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(timesheetID)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("Xero-Tenant-Id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (idempotencyKey != null)
                requestOptions.HeaderParameters.Add("Idempotency-Key", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            requestOptions.Data = timesheet;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Timesheets>("/Timesheets/{TimesheetID}", requestOptions, this.Configuration, cancellationToken);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTimesheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
