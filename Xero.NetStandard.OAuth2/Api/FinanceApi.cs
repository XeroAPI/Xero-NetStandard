/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

// The version of the OpenAPI document: 2.25.0


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Model.Finance;

namespace Xero.NetStandard.OAuth2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get account usage
        /// </summary>
        /// <remarks>
        /// A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
        /// <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
        /// <returns>Task of AccountUsageResponse</returns>
        System.Threading.Tasks.Task<AccountUsageResponse> GetAccountingActivityAccountUsageAsync (string accessToken, string xeroTenantId, string startMonth = null, string endMonth = null);

        /// <summary>
        /// Get account usage
        /// </summary>
        /// <remarks>
        /// A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
        /// <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (AccountUsageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountUsageResponse>> GetAccountingActivityAccountUsageAsyncWithHttpInfo (string accessToken, string xeroTenantId, string startMonth = null, string endMonth = null);
        /// <summary>
        /// Get lock history
        /// </summary>
        /// <remarks>
        /// Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
        /// <returns>Task of LockHistoryResponse</returns>
        System.Threading.Tasks.Task<LockHistoryResponse> GetAccountingActivityLockHistoryAsync (string accessToken, string xeroTenantId, string endDate = null);

        /// <summary>
        /// Get lock history
        /// </summary>
        /// <remarks>
        /// Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
        /// <returns>Task of ApiResponse (LockHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LockHistoryResponse>> GetAccountingActivityLockHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, string endDate = null);
        /// <summary>
        /// Get report history
        /// </summary>
        /// <remarks>
        /// For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
        /// <returns>Task of ReportHistoryResponse</returns>
        System.Threading.Tasks.Task<ReportHistoryResponse> GetAccountingActivityReportHistoryAsync (string accessToken, string xeroTenantId, string endDate = null);

        /// <summary>
        /// Get report history
        /// </summary>
        /// <remarks>
        /// For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
        /// <returns>Task of ApiResponse (ReportHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportHistoryResponse>> GetAccountingActivityReportHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, string endDate = null);
        /// <summary>
        /// Get user activities
        /// </summary>
        /// <remarks>
        /// For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
        /// <returns>Task of UserActivitiesResponse</returns>
        System.Threading.Tasks.Task<UserActivitiesResponse> GetAccountingActivityUserActivitiesAsync (string accessToken, string xeroTenantId, string dataMonth = null);

        /// <summary>
        /// Get user activities
        /// </summary>
        /// <remarks>
        /// For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
        /// <returns>Task of ApiResponse (UserActivitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserActivitiesResponse>> GetAccountingActivityUserActivitiesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string dataMonth = null);
        /// <summary>
        /// Get Bank Statement Accounting
        /// </summary>
        /// <remarks>
        /// For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankAccountID">string, GUID    Bank account Id</param>
        /// <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
        /// <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
        /// <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
        /// <returns>Task of BankStatementAccountingResponse</returns>
        System.Threading.Tasks.Task<BankStatementAccountingResponse> GetBankStatementAccountingAsync (string accessToken, string xeroTenantId, Guid bankAccountID, string fromDate, string toDate, bool? summaryOnly = null);

        /// <summary>
        /// Get Bank Statement Accounting
        /// </summary>
        /// <remarks>
        /// For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankAccountID">string, GUID    Bank account Id</param>
        /// <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
        /// <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
        /// <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
        /// <returns>Task of ApiResponse (BankStatementAccountingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankStatementAccountingResponse>> GetBankStatementAccountingAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankAccountID, string fromDate, string toDate, bool? summaryOnly = null);
        /// <summary>
        /// Get cash validation
        /// </summary>
        /// <remarks>
        /// Summarizes the total cash position for each account for an org
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
        /// <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
        /// <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
        /// <returns>Task of List&lt;CashValidationResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CashValidationResponse>> GetCashValidationAsync (string accessToken, string xeroTenantId, string balanceDate = null, string asAtSystemDate = null, string beginDate = null);

        /// <summary>
        /// Get cash validation
        /// </summary>
        /// <remarks>
        /// Summarizes the total cash position for each account for an org
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
        /// <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
        /// <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CashValidationResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CashValidationResponse>>> GetCashValidationAsyncWithHttpInfo (string accessToken, string xeroTenantId, string balanceDate = null, string asAtSystemDate = null, string beginDate = null);
        /// <summary>
        /// Get Balance Sheet report
        /// </summary>
        /// <remarks>
        /// The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of BalanceSheetResponse</returns>
        System.Threading.Tasks.Task<BalanceSheetResponse> GetFinancialStatementBalanceSheetAsync (string accessToken, string xeroTenantId, string balanceDate = null);

        /// <summary>
        /// Get Balance Sheet report
        /// </summary>
        /// <remarks>
        /// The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (BalanceSheetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BalanceSheetResponse>> GetFinancialStatementBalanceSheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, string balanceDate = null);
        /// <summary>
        /// Get Cash flow report
        /// </summary>
        /// <remarks>
        /// The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of CashflowResponse</returns>
        System.Threading.Tasks.Task<CashflowResponse> GetFinancialStatementCashflowAsync (string accessToken, string xeroTenantId, string startDate = null, string endDate = null);

        /// <summary>
        /// Get Cash flow report
        /// </summary>
        /// <remarks>
        /// The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (CashflowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CashflowResponse>> GetFinancialStatementCashflowAsyncWithHttpInfo (string accessToken, string xeroTenantId, string startDate = null, string endDate = null);
        /// <summary>
        /// Get expense by contacts report
        /// </summary>
        /// <remarks>
        /// The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of IncomeByContactResponse</returns>
        System.Threading.Tasks.Task<IncomeByContactResponse> GetFinancialStatementContactsExpenseAsync (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null);

        /// <summary>
        /// Get expense by contacts report
        /// </summary>
        /// <remarks>
        /// The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomeByContactResponse>> GetFinancialStatementContactsExpenseAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null);
        /// <summary>
        /// Get revenue by contacts report
        /// </summary>
        /// <remarks>
        /// The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of IncomeByContactResponse</returns>
        System.Threading.Tasks.Task<IncomeByContactResponse> GetFinancialStatementContactsRevenueAsync (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null);

        /// <summary>
        /// Get revenue by contacts report
        /// </summary>
        /// <remarks>
        /// The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomeByContactResponse>> GetFinancialStatementContactsRevenueAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null);
        /// <summary>
        /// Get Profit &amp; Loss report
        /// </summary>
        /// <remarks>
        /// The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ProfitAndLossResponse</returns>
        System.Threading.Tasks.Task<ProfitAndLossResponse> GetFinancialStatementProfitAndLossAsync (string accessToken, string xeroTenantId, string startDate = null, string endDate = null);

        /// <summary>
        /// Get Profit &amp; Loss report
        /// </summary>
        /// <remarks>
        /// The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (ProfitAndLossResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfitAndLossResponse>> GetFinancialStatementProfitAndLossAsyncWithHttpInfo (string accessToken, string xeroTenantId, string startDate = null, string endDate = null);
        /// <summary>
        /// Get Trial Balance report
        /// </summary>
        /// <remarks>
        /// The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of TrialBalanceResponse</returns>
        System.Threading.Tasks.Task<TrialBalanceResponse> GetFinancialStatementTrialBalanceAsync (string accessToken, string xeroTenantId, string endDate = null);

        /// <summary>
        /// Get Trial Balance report
        /// </summary>
        /// <remarks>
        /// The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (TrialBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrialBalanceResponse>> GetFinancialStatementTrialBalanceAsyncWithHttpInfo (string accessToken, string xeroTenantId, string endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinanceApi : IFinanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinanceApi : IFinanceApi
    {
        private Xero.NetStandard.OAuth2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinanceApi() : this((string) null)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = "https://api.xero.com/finance.xro/1.0" }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinanceApi(String basePath)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinanceApi(Xero.NetStandard.OAuth2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FinanceApi(Xero.NetStandard.OAuth2.Client.ISynchronousClient client,Xero.NetStandard.OAuth2.Client.IAsynchronousClient asyncClient, Xero.NetStandard.OAuth2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.NetStandard.OAuth2.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Get account usage A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
        /// <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
        /// <returns>Task of AccountUsageResponse</returns>
        public async System.Threading.Tasks.Task<AccountUsageResponse> GetAccountingActivityAccountUsageAsync (string accessToken, string xeroTenantId, string startMonth = null, string endMonth = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<AccountUsageResponse> localVarResponse = await GetAccountingActivityAccountUsageAsyncWithHttpInfo(accessToken, xeroTenantId, startMonth, endMonth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account usage A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startMonth">date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned. (optional)</param>
        /// <param name="endMonth">date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (AccountUsageResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<AccountUsageResponse>> GetAccountingActivityAccountUsageAsyncWithHttpInfo (string accessToken, string xeroTenantId, string startMonth = null, string endMonth = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetAccountingActivityAccountUsage");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (startMonth != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startMonth", startMonth))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endMonth != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endMonth", endMonth))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<AccountUsageResponse>("/AccountingActivities/AccountUsage", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccountingActivityAccountUsage", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get lock history Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
        /// <returns>Task of LockHistoryResponse</returns>
        public async System.Threading.Tasks.Task<LockHistoryResponse> GetAccountingActivityLockHistoryAsync (string accessToken, string xeroTenantId, string endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<LockHistoryResponse> localVarResponse = await GetAccountingActivityLockHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get lock history Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a change is visible from this API. (optional)</param>
        /// <returns>Task of ApiResponse (LockHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<LockHistoryResponse>> GetAccountingActivityLockHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, string endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetAccountingActivityLockHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<LockHistoryResponse>("/AccountingActivities/LockHistory", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccountingActivityLockHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get report history For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
        /// <returns>Task of ReportHistoryResponse</returns>
        public async System.Threading.Tasks.Task<ReportHistoryResponse> GetAccountingActivityReportHistoryAsync (string accessToken, string xeroTenantId, string endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ReportHistoryResponse> localVarResponse = await GetAccountingActivityReportHistoryAsyncWithHttpInfo(accessToken, xeroTenantId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get report history For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Any reports that were published within the period up to 12 months before this date will be returned.                Please be aware that there may be a delay of up to 3 days before a published report is visible from this API. (optional)</param>
        /// <returns>Task of ApiResponse (ReportHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ReportHistoryResponse>> GetAccountingActivityReportHistoryAsyncWithHttpInfo (string accessToken, string xeroTenantId, string endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetAccountingActivityReportHistory");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ReportHistoryResponse>("/AccountingActivities/ReportHistory", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccountingActivityReportHistory", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get user activities For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
        /// <returns>Task of UserActivitiesResponse</returns>
        public async System.Threading.Tasks.Task<UserActivitiesResponse> GetAccountingActivityUserActivitiesAsync (string accessToken, string xeroTenantId, string dataMonth = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<UserActivitiesResponse> localVarResponse = await GetAccountingActivityUserActivitiesAsyncWithHttpInfo(accessToken, xeroTenantId, dataMonth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user activities For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="dataMonth">date, yyyy-MM                 The specified month must be complete (in the past); The current month cannot be specified since it is not complete.                If no parameter is provided, the month immediately previous to the current month will be used.                Any user activities occurring within the specified month will be returned.                Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API. (optional)</param>
        /// <returns>Task of ApiResponse (UserActivitiesResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<UserActivitiesResponse>> GetAccountingActivityUserActivitiesAsyncWithHttpInfo (string accessToken, string xeroTenantId, string dataMonth = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetAccountingActivityUserActivities");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (dataMonth != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "dataMonth", dataMonth))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<UserActivitiesResponse>("/AccountingActivities/UserActivities", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAccountingActivityUserActivities", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get Bank Statement Accounting For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankAccountID">string, GUID    Bank account Id</param>
        /// <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
        /// <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
        /// <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
        /// <returns>Task of BankStatementAccountingResponse</returns>
        public async System.Threading.Tasks.Task<BankStatementAccountingResponse> GetBankStatementAccountingAsync (string accessToken, string xeroTenantId, Guid bankAccountID, string fromDate, string toDate, bool? summaryOnly = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BankStatementAccountingResponse> localVarResponse = await GetBankStatementAccountingAsyncWithHttpInfo(accessToken, xeroTenantId, bankAccountID, fromDate, toDate, summaryOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Bank Statement Accounting For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender&#39;s assessment measures. 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="bankAccountID">string, GUID    Bank account Id</param>
        /// <param name="fromDate">date, yyyy-MM-dd     Specifies the start date of the query period.   The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.</param>
        /// <param name="toDate">date, yyyy-MM-dd     Specifies the end date of the query period.   If the end date is a future date, the request will be rejected.</param>
        /// <param name="summaryOnly">boolean, true/false    The default value is true if no parameter is provided.    In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient. (optional)</param>
        /// <returns>Task of ApiResponse (BankStatementAccountingResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BankStatementAccountingResponse>> GetBankStatementAccountingAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid bankAccountID, string fromDate, string toDate, bool? summaryOnly = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetBankStatementAccounting");

            // verify the required parameter 'bankAccountID' is set
            if (bankAccountID == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'bankAccountID' when calling FinanceApi->GetBankStatementAccounting");

            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fromDate' when calling FinanceApi->GetBankStatementAccounting");

            // verify the required parameter 'toDate' is set
            if (toDate == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'toDate' when calling FinanceApi->GetBankStatementAccounting");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (bankAccountID != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "BankAccountID", bankAccountID))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (fromDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "FromDate", fromDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (toDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "ToDate", toDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (summaryOnly != null)
            {
              requestOptions.QueryParameters.Add("SummaryOnly", summaryOnly.ToString());
            }

            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BankStatementAccountingResponse>("/BankStatementsPlus/statements", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBankStatementAccounting", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get cash validation Summarizes the total cash position for each account for an org
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
        /// <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
        /// <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
        /// <returns>Task of List&lt;CashValidationResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CashValidationResponse>> GetCashValidationAsync (string accessToken, string xeroTenantId, string balanceDate = null, string asAtSystemDate = null, string beginDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<List<CashValidationResponse>> localVarResponse = await GetCashValidationAsyncWithHttpInfo(accessToken, xeroTenantId, balanceDate, asAtSystemDate, beginDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cash validation Summarizes the total cash position for each account for an org
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified) (optional)</param>
        /// <param name="asAtSystemDate">date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted. (optional)</param>
        /// <param name="beginDate">date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CashValidationResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<List<CashValidationResponse>>> GetCashValidationAsyncWithHttpInfo (string accessToken, string xeroTenantId, string balanceDate = null, string asAtSystemDate = null, string beginDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetCashValidation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (balanceDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "balanceDate", balanceDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (asAtSystemDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "asAtSystemDate", asAtSystemDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (beginDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "beginDate", beginDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<List<CashValidationResponse>>("/CashValidation", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCashValidation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get Balance Sheet report The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of BalanceSheetResponse</returns>
        public async System.Threading.Tasks.Task<BalanceSheetResponse> GetFinancialStatementBalanceSheetAsync (string accessToken, string xeroTenantId, string balanceDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<BalanceSheetResponse> localVarResponse = await GetFinancialStatementBalanceSheetAsyncWithHttpInfo(accessToken, xeroTenantId, balanceDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Balance Sheet report The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="balanceDate">Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (BalanceSheetResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<BalanceSheetResponse>> GetFinancialStatementBalanceSheetAsyncWithHttpInfo (string accessToken, string xeroTenantId, string balanceDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetFinancialStatementBalanceSheet");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (balanceDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "balanceDate", balanceDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<BalanceSheetResponse>("/FinancialStatements/BalanceSheet", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFinancialStatementBalanceSheet", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get Cash flow report The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of CashflowResponse</returns>
        public async System.Threading.Tasks.Task<CashflowResponse> GetFinancialStatementCashflowAsync (string accessToken, string xeroTenantId, string startDate = null, string endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<CashflowResponse> localVarResponse = await GetFinancialStatementCashflowAsyncWithHttpInfo(accessToken, xeroTenantId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Cash flow report The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (CashflowResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<CashflowResponse>> GetFinancialStatementCashflowAsyncWithHttpInfo (string accessToken, string xeroTenantId, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetFinancialStatementCashflow");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (startDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<CashflowResponse>("/FinancialStatements/Cashflow", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFinancialStatementCashflow", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get expense by contacts report The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of IncomeByContactResponse</returns>
        public async System.Threading.Tasks.Task<IncomeByContactResponse> GetFinancialStatementContactsExpenseAsync (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<IncomeByContactResponse> localVarResponse = await GetFinancialStatementContactsExpenseAsyncWithHttpInfo(accessToken, xeroTenantId, contactIds, includeManualJournals, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get expense by contacts report The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<IncomeByContactResponse>> GetFinancialStatementContactsExpenseAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetFinancialStatementContactsExpense");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (contactIds != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("multi", "contactIds", contactIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (includeManualJournals != null)
            {
              requestOptions.QueryParameters.Add("includeManualJournals", includeManualJournals.ToString());
            }


            if (startDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<IncomeByContactResponse>("/FinancialStatements/contacts/expense", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFinancialStatementContactsExpense", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get revenue by contacts report The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of IncomeByContactResponse</returns>
        public async System.Threading.Tasks.Task<IncomeByContactResponse> GetFinancialStatementContactsRevenueAsync (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<IncomeByContactResponse> localVarResponse = await GetFinancialStatementContactsRevenueAsyncWithHttpInfo(accessToken, xeroTenantId, contactIds, includeManualJournals, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get revenue by contacts report The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="contactIds">Specifies the customer contacts to be included in the report.    If no parameter is provided, all customer contacts will be included (optional)</param>
        /// <param name="includeManualJournals">Specifies whether to include the manual journals in the report.                If no parameter is provided, manual journals will not be included. (optional)</param>
        /// <param name="startDate">Date yyyy-MM-dd    Specifies the start date for the report.                If no parameter is provided, the date of 12 months before the end date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <param name="endDate">Date yyyy-MM-dd    Specifies the end date for the report.    If no parameter is provided, the current date will be used.                It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency. (optional)</param>
        /// <returns>Task of ApiResponse (IncomeByContactResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<IncomeByContactResponse>> GetFinancialStatementContactsRevenueAsyncWithHttpInfo (string accessToken, string xeroTenantId, List<Guid> contactIds = null, bool? includeManualJournals = null, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetFinancialStatementContactsRevenue");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (contactIds != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("multi", "contactIds", contactIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (includeManualJournals != null)
            {
              requestOptions.QueryParameters.Add("includeManualJournals", includeManualJournals.ToString());
            }


            if (startDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<IncomeByContactResponse>("/FinancialStatements/contacts/revenue", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFinancialStatementContactsRevenue", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get Profit &amp; Loss report The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ProfitAndLossResponse</returns>
        public async System.Threading.Tasks.Task<ProfitAndLossResponse> GetFinancialStatementProfitAndLossAsync (string accessToken, string xeroTenantId, string startDate = null, string endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<ProfitAndLossResponse> localVarResponse = await GetFinancialStatementProfitAndLossAsyncWithHttpInfo(accessToken, xeroTenantId, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Profit &amp; Loss report The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="startDate">Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used. (optional)</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (ProfitAndLossResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<ProfitAndLossResponse>> GetFinancialStatementProfitAndLossAsyncWithHttpInfo (string accessToken, string xeroTenantId, string startDate = null, string endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetFinancialStatementProfitAndLoss");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (startDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<ProfitAndLossResponse>("/FinancialStatements/ProfitAndLoss", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFinancialStatementProfitAndLoss", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Get Trial Balance report The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of TrialBalanceResponse</returns>
        public async System.Threading.Tasks.Task<TrialBalanceResponse> GetFinancialStatementTrialBalanceAsync (string accessToken, string xeroTenantId, string endDate = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<TrialBalanceResponse> localVarResponse = await GetFinancialStatementTrialBalanceAsyncWithHttpInfo(accessToken, xeroTenantId, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Trial Balance report The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="endDate">Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used. (optional)</param>
        /// <returns>Task of ApiResponse (TrialBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<TrialBalanceResponse>> GetFinancialStatementTrialBalanceAsyncWithHttpInfo (string accessToken, string xeroTenantId, string endDate = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FinanceApi->GetFinancialStatementTrialBalance");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (endDate != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<TrialBalanceResponse>("/FinancialStatements/TrialBalance", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFinancialStatementTrialBalance", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
