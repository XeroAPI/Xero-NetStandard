/* 
 * Xero Files API
 *
 * These endpoints are specific to Xero Files API
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

// The version of the OpenAPI document: 2.25.0


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Model.Files;

namespace Xero.NetStandard.OAuth2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new file association
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can create a new folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="association"> (optional)</param>
        /// <returns>Task of Association</returns>
        System.Threading.Tasks.Task<Association> CreateFileAssociationAsync (string accessToken, string xeroTenantId, Guid fileId, Association association = null);

        /// <summary>
        /// Creates a new file association
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can create a new folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="association"> (optional)</param>
        /// <returns>Task of ApiResponse (Association)</returns>
        System.Threading.Tasks.Task<ApiResponse<Association>> CreateFileAssociationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId, Association association = null);
        /// <summary>
        /// Creates a new folder
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate properties, you can create a new folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> CreateFolderAsync (string accessToken, string xeroTenantId, Folder folder = null);

        /// <summary>
        /// Creates a new folder
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate properties, you can create a new folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Folder folder = null);
        /// <summary>
        /// Deletes a specific file
        /// </summary>
        /// <remarks>
        /// Delete a specific file
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync (string accessToken, string xeroTenantId, Guid fileId);

        /// <summary>
        /// Deletes a specific file
        /// </summary>
        /// <remarks>
        /// Delete a specific file
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId);
        /// <summary>
        /// Deletes an existing file association
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can create a new folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAssociationAsync (string accessToken, string xeroTenantId, Guid fileId, Guid objectId);

        /// <summary>
        /// Deletes an existing file association
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can create a new folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileAssociationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId, Guid objectId);
        /// <summary>
        /// Deletes a folder
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate ID, you can delete a folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFolderAsync (string accessToken, string xeroTenantId, Guid folderId);

        /// <summary>
        /// Deletes a folder
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate ID, you can delete a folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId);
        /// <summary>
        /// Retrieves an association object using a unique object ID
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options,
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of List&lt;Association&gt;</returns>
        System.Threading.Tasks.Task<List<Association>> GetAssociationsByObjectAsync (string accessToken, string xeroTenantId, Guid objectId);

        /// <summary>
        /// Retrieves an association object using a unique object ID
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options,
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Association>>> GetAssociationsByObjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid objectId);
        /// <summary>
        /// Retrieves a file by a unique file ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of FileObject</returns>
        System.Threading.Tasks.Task<FileObject> GetFileAsync (string accessToken, string xeroTenantId, Guid fileId);

        /// <summary>
        /// Retrieves a file by a unique file ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileObject>> GetFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId);
        /// <summary>
        /// Retrieves a specific file associations
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options,  
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of List&lt;Association&gt;</returns>
        System.Threading.Tasks.Task<List<Association>> GetFileAssociationsAsync (string accessToken, string xeroTenantId, Guid fileId);

        /// <summary>
        /// Retrieves a specific file associations
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options,  
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Association>>> GetFileAssociationsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId);
        /// <summary>
        /// Retrieves the content of a specific file
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, retrieve data for specific file
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetFileContentAsync (string accessToken, string xeroTenantId, Guid fileId);

        /// <summary>
        /// Retrieves the content of a specific file
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, retrieve data for specific file
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetFileContentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId);
        /// <summary>
        /// Retrieves files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="pagesize">pass an optional page size value (optional)</param>
        /// <param name="page">number of records to skip for pagination (optional)</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of Files</returns>
        System.Threading.Tasks.Task<Files> GetFilesAsync (string accessToken, string xeroTenantId, int? pagesize = null, int? page = null, string sort = null);

        /// <summary>
        /// Retrieves files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="pagesize">pass an optional page size value (optional)</param>
        /// <param name="page">number of records to skip for pagination (optional)</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of ApiResponse (Files)</returns>
        System.Threading.Tasks.Task<ApiResponse<Files>> GetFilesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? pagesize = null, int? page = null, string sort = null);
        /// <summary>
        /// Retrieves specific folder by using a unique folder ID
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate ID, you can search for specific folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> GetFolderAsync (string accessToken, string xeroTenantId, Guid folderId);

        /// <summary>
        /// Retrieves specific folder by using a unique folder ID
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate ID, you can search for specific folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> GetFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId);
        /// <summary>
        /// Retrieves folders
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available folders
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        System.Threading.Tasks.Task<List<Folder>> GetFoldersAsync (string accessToken, string xeroTenantId, string sort = null);

        /// <summary>
        /// Retrieves folders
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available folders
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Folder>>> GetFoldersAsyncWithHttpInfo (string accessToken, string xeroTenantId, string sort = null);
        /// <summary>
        /// Retrieves inbox folder
        /// </summary>
        /// <remarks>
        /// Search for the user inbox
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> GetInboxAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// Retrieves inbox folder
        /// </summary>
        /// <remarks>
        /// Search for the user inbox
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> GetInboxAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// Update a file
        /// </summary>
        /// <remarks>
        /// Updates file properties of a single file
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="fileObject"> (optional)</param>
        /// <returns>Task of FileObject</returns>
        System.Threading.Tasks.Task<FileObject> UpdateFileAsync (string accessToken, string xeroTenantId, Guid fileId, FileObject fileObject = null);

        /// <summary>
        /// Update a file
        /// </summary>
        /// <remarks>
        /// Updates file properties of a single file
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="fileObject"> (optional)</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileObject>> UpdateFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId, FileObject fileObject = null);
        /// <summary>
        /// Updates an existing folder
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate ID and properties, you can update a folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <param name="folder"></param>
        /// <returns>Task of Folder</returns>
        System.Threading.Tasks.Task<Folder> UpdateFolderAsync (string accessToken, string xeroTenantId, Guid folderId, Folder folder);

        /// <summary>
        /// Updates an existing folder
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate ID and properties, you can update a folder
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <param name="folder"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        System.Threading.Tasks.Task<ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId, Folder folder);
        /// <summary>
        /// Uploads a File to the inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of FileObject</returns>
        System.Threading.Tasks.Task<FileObject> UploadFileAsync (string accessToken, string xeroTenantId, byte[] body, string name, string filename, string mimeType = null);

        /// <summary>
        /// Uploads a File to the inbox
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileObject>> UploadFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, byte[] body, string name, string filename, string mimeType = null);
        /// <summary>
        /// Uploads a File to a specific folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">pass required folder id to save file to specific folder</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of FileObject</returns>
        System.Threading.Tasks.Task<FileObject> UploadFileToFolderAsync (string accessToken, string xeroTenantId, Guid folderId, byte[] body, string name, string filename, string mimeType = null);

        /// <summary>
        /// Uploads a File to a specific folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">pass required folder id to save file to specific folder</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileObject>> UploadFileToFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId, byte[] body, string name, string filename, string mimeType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private Xero.NetStandard.OAuth2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string) null)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = "https://api.xero.com/files.xro/1.0" }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Xero.NetStandard.OAuth2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilesApi(Xero.NetStandard.OAuth2.Client.ISynchronousClient client,Xero.NetStandard.OAuth2.Client.IAsynchronousClient asyncClient, Xero.NetStandard.OAuth2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.NetStandard.OAuth2.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Creates a new file association By passing in the appropriate options, you can create a new folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="association"> (optional)</param>
        /// <returns>Task of Association</returns>
        public async System.Threading.Tasks.Task<Association> CreateFileAssociationAsync (string accessToken, string xeroTenantId, Guid fileId, Association association = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Association> localVarResponse = await CreateFileAssociationAsyncWithHttpInfo(accessToken, xeroTenantId, fileId, association);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new file association By passing in the appropriate options, you can create a new folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="association"> (optional)</param>
        /// <returns>Task of ApiResponse (Association)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Association>> CreateFileAssociationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId, Association association = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->CreateFileAssociation");

            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->CreateFileAssociation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("FileId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = association;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Association>("/Files/{FileId}/Associations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFileAssociation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Creates a new folder By passing in the appropriate properties, you can create a new folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> CreateFolderAsync (string accessToken, string xeroTenantId, Folder folder = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Folder> localVarResponse = await CreateFolderAsyncWithHttpInfo(accessToken, xeroTenantId, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new folder By passing in the appropriate properties, you can create a new folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folder"> (optional)</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Folder>> CreateFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Folder folder = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->CreateFolder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = folder;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Folder>("/Folders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes a specific file Delete a specific file
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync (string accessToken, string xeroTenantId, Guid fileId)
        {
             await DeleteFileAsyncWithHttpInfo(accessToken, xeroTenantId, fileId);

        }

        /// <summary>
        /// Deletes a specific file Delete a specific file
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> DeleteFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->DeleteFile");

            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DeleteFile");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("FileId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/Files/{FileId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteFile", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes an existing file association By passing in the appropriate options, you can create a new folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAssociationAsync (string accessToken, string xeroTenantId, Guid fileId, Guid objectId)
        {
             await DeleteFileAssociationAsyncWithHttpInfo(accessToken, xeroTenantId, fileId, objectId);

        }

        /// <summary>
        /// Deletes an existing file association By passing in the appropriate options, you can create a new folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> DeleteFileAssociationAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId, Guid objectId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->DeleteFileAssociation");

            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->DeleteFileAssociation");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'objectId' when calling FilesApi->DeleteFileAssociation");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("FileId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (objectId != null)
                requestOptions.PathParameters.Add("ObjectId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/Files/{FileId}/Associations/{ObjectId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteFileAssociation", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Deletes a folder By passing in the appropriate ID, you can delete a folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFolderAsync (string accessToken, string xeroTenantId, Guid folderId)
        {
             await DeleteFolderAsyncWithHttpInfo(accessToken, xeroTenantId, folderId);

        }

        /// <summary>
        /// Deletes a folder By passing in the appropriate ID, you can delete a folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Object>> DeleteFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->DeleteFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'folderId' when calling FilesApi->DeleteFolder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (folderId != null)
                requestOptions.PathParameters.Add("FolderId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/Folders/{FolderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves an association object using a unique object ID By passing in the appropriate options,
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of List&lt;Association&gt;</returns>
        public async System.Threading.Tasks.Task<List<Association>> GetAssociationsByObjectAsync (string accessToken, string xeroTenantId, Guid objectId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<List<Association>> localVarResponse = await GetAssociationsByObjectAsyncWithHttpInfo(accessToken, xeroTenantId, objectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an association object using a unique object ID By passing in the appropriate options,
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="objectId">Object id for single object</param>
        /// <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<List<Association>>> GetAssociationsByObjectAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid objectId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetAssociationsByObject");

            // verify the required parameter 'objectId' is set
            if (objectId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'objectId' when calling FilesApi->GetAssociationsByObject");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (objectId != null)
                requestOptions.PathParameters.Add("ObjectId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(objectId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<List<Association>>("/Associations/{ObjectId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAssociationsByObject", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a file by a unique file ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of FileObject</returns>
        public async System.Threading.Tasks.Task<FileObject> GetFileAsync (string accessToken, string xeroTenantId, Guid fileId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject> localVarResponse = await GetFileAsyncWithHttpInfo(accessToken, xeroTenantId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a file by a unique file ID 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject>> GetFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetFile");

            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFile");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("FileId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<FileObject>("/Files/{FileId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFile", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves a specific file associations By passing in the appropriate options,  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of List&lt;Association&gt;</returns>
        public async System.Threading.Tasks.Task<List<Association>> GetFileAssociationsAsync (string accessToken, string xeroTenantId, Guid fileId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<List<Association>> localVarResponse = await GetFileAssociationsAsyncWithHttpInfo(accessToken, xeroTenantId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a specific file associations By passing in the appropriate options,  
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse (List&lt;Association&gt;)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<List<Association>>> GetFileAssociationsAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetFileAssociations");

            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileAssociations");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("FileId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<List<Association>>("/Files/{FileId}/Associations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFileAssociations", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves the content of a specific file By passing in the appropriate options, retrieve data for specific file
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetFileContentAsync (string accessToken, string xeroTenantId, Guid fileId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetFileContentAsyncWithHttpInfo(accessToken, xeroTenantId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the content of a specific file By passing in the appropriate options, retrieve data for specific file
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<System.IO.Stream>> GetFileContentAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetFileContent");

            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->GetFileContent");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/octet-stream"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("FileId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/Files/{FileId}/Content", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFileContent", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves files 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="pagesize">pass an optional page size value (optional)</param>
        /// <param name="page">number of records to skip for pagination (optional)</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of Files</returns>
        public async System.Threading.Tasks.Task<Files> GetFilesAsync (string accessToken, string xeroTenantId, int? pagesize = null, int? page = null, string sort = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Files> localVarResponse = await GetFilesAsyncWithHttpInfo(accessToken, xeroTenantId, pagesize, page, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves files 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="pagesize">pass an optional page size value (optional)</param>
        /// <param name="page">number of records to skip for pagination (optional)</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of ApiResponse (Files)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Files>> GetFilesAsyncWithHttpInfo (string accessToken, string xeroTenantId, int? pagesize = null, int? page = null, string sort = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetFiles");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (pagesize != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "pagesize", pagesize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (sort != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Files>("/Files", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFiles", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves specific folder by using a unique folder ID By passing in the appropriate ID, you can search for specific folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> GetFolderAsync (string accessToken, string xeroTenantId, Guid folderId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Folder> localVarResponse = await GetFolderAsyncWithHttpInfo(accessToken, xeroTenantId, folderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves specific folder by using a unique folder ID By passing in the appropriate ID, you can search for specific folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Folder>> GetFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'folderId' when calling FilesApi->GetFolder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (folderId != null)
                requestOptions.PathParameters.Add("FolderId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Folder>("/Folders/{FolderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves folders By passing in the appropriate options, you can search for available folders
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of List&lt;Folder&gt;</returns>
        public async System.Threading.Tasks.Task<List<Folder>> GetFoldersAsync (string accessToken, string xeroTenantId, string sort = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<List<Folder>> localVarResponse = await GetFoldersAsyncWithHttpInfo(accessToken, xeroTenantId, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves folders By passing in the appropriate options, you can search for available folders
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="sort">values to sort by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Folder&gt;)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<List<Folder>>> GetFoldersAsyncWithHttpInfo (string accessToken, string xeroTenantId, string sort = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetFolders");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (sort != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<List<Folder>>("/Folders", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFolders", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves inbox folder Search for the user inbox
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> GetInboxAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Folder> localVarResponse = await GetInboxAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves inbox folder Search for the user inbox
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Folder>> GetInboxAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->GetInbox");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Folder>("/Inbox", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInbox", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Update a file Updates file properties of a single file
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="fileObject"> (optional)</param>
        /// <returns>Task of FileObject</returns>
        public async System.Threading.Tasks.Task<FileObject> UpdateFileAsync (string accessToken, string xeroTenantId, Guid fileId, FileObject fileObject = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject> localVarResponse = await UpdateFileAsyncWithHttpInfo(accessToken, xeroTenantId, fileId, fileObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a file Updates file properties of a single file
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="fileId">File id for single object</param>
        /// <param name="fileObject"> (optional)</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject>> UpdateFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid fileId, FileObject fileObject = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->UpdateFile");

            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->UpdateFile");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("FileId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = fileObject;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<FileObject>("/Files/{FileId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateFile", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Updates an existing folder By passing in the appropriate ID and properties, you can update a folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <param name="folder"></param>
        /// <returns>Task of Folder</returns>
        public async System.Threading.Tasks.Task<Folder> UpdateFolderAsync (string accessToken, string xeroTenantId, Guid folderId, Folder folder)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Folder> localVarResponse = await UpdateFolderAsyncWithHttpInfo(accessToken, xeroTenantId, folderId, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing folder By passing in the appropriate ID and properties, you can update a folder
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">Folder id for single object</param>
        /// <param name="folder"></param>
        /// <returns>Task of ApiResponse (Folder)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Folder>> UpdateFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId, Folder folder)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->UpdateFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'folderId' when calling FilesApi->UpdateFolder");

            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'folder' when calling FilesApi->UpdateFolder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (folderId != null)
                requestOptions.PathParameters.Add("FolderId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = folder;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PutAsync<Folder>("/Folders/{FolderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Uploads a File to the inbox 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of FileObject</returns>
        public async System.Threading.Tasks.Task<FileObject> UploadFileAsync (string accessToken, string xeroTenantId, byte[] body, string name, string filename, string mimeType = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject> localVarResponse = await UploadFileAsyncWithHttpInfo(accessToken, xeroTenantId, body, name, filename, mimeType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a File to the inbox 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject>> UploadFileAsyncWithHttpInfo (string accessToken, string xeroTenantId, byte[] body, string name, string filename, string mimeType = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->UploadFile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->UploadFile");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'name' when calling FilesApi->UploadFile");

            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'filename' when calling FilesApi->UploadFile");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (body != null)
            {
                var stream = new MemoryStream(body);
                requestOptions.FileParameters.Add("body", stream);
            }
            if (name != null)
            {
                requestOptions.FormParameters.Add("name", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(name)); // form parameter
            }
            if (filename != null)
            {
                requestOptions.FormParameters.Add("filename", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(filename)); // form parameter
            }
            if (mimeType != null)
            {
                requestOptions.FormParameters.Add("mimeType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(mimeType)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<FileObject>("/Files", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadFile", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Uploads a File to a specific folder 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">pass required folder id to save file to specific folder</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of FileObject</returns>
        public async System.Threading.Tasks.Task<FileObject> UploadFileToFolderAsync (string accessToken, string xeroTenantId, Guid folderId, byte[] body, string name, string filename, string mimeType = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject> localVarResponse = await UploadFileToFolderAsyncWithHttpInfo(accessToken, xeroTenantId, folderId, body, name, filename, mimeType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a File to a specific folder 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="folderId">pass required folder id to save file to specific folder</param>
        /// <param name="body"></param>
        /// <param name="name">exact name of the file you are uploading</param>
        /// <param name="filename"></param>
        /// <param name="mimeType"> (optional)</param>
        /// <returns>Task of ApiResponse (FileObject)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<FileObject>> UploadFileToFolderAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid folderId, byte[] body, string name, string filename, string mimeType = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling FilesApi->UploadFileToFolder");

            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'folderId' when calling FilesApi->UploadFileToFolder");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'body' when calling FilesApi->UploadFileToFolder");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'name' when calling FilesApi->UploadFileToFolder");

            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'filename' when calling FilesApi->UploadFileToFolder");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (folderId != null)
                requestOptions.PathParameters.Add("FolderId", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            if (body != null)
            {
                var stream = new MemoryStream(body);
                requestOptions.FileParameters.Add("body", stream);
            }
            if (name != null)
            {
                requestOptions.FormParameters.Add("name", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(name)); // form parameter
            }
            if (filename != null)
            {
                requestOptions.FormParameters.Add("filename", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(filename)); // form parameter
            }
            if (mimeType != null)
            {
                requestOptions.FormParameters.Add("mimeType", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(mimeType)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<FileObject>("/Files/{FolderId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadFileToFolder", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
