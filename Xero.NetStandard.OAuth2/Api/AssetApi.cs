/* 
 * Xero Assets API
 *
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

// The version of the OpenAPI document: 2.25.0


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Model.Asset;

namespace Xero.NetStandard.OAuth2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// adds a fixed asset
        /// </summary>
        /// <remarks>
        /// Adds an asset to the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="asset">Fixed asset you are creating</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> CreateAssetAsync (string accessToken, string xeroTenantId, Asset asset);

        /// <summary>
        /// adds a fixed asset
        /// </summary>
        /// <remarks>
        /// Adds an asset to the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="asset">Fixed asset you are creating</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> CreateAssetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Asset asset);
        /// <summary>
        /// adds a fixed asset type
        /// </summary>
        /// <remarks>
        /// Adds an fixed asset type to the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="assetType">Asset type to add (optional)</param>
        /// <returns>Task of AssetType</returns>
        System.Threading.Tasks.Task<AssetType> CreateAssetTypeAsync (string accessToken, string xeroTenantId, AssetType assetType = null);

        /// <summary>
        /// adds a fixed asset type
        /// </summary>
        /// <remarks>
        /// Adds an fixed asset type to the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="assetType">Asset type to add (optional)</param>
        /// <returns>Task of ApiResponse (AssetType)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetType>> CreateAssetTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, AssetType assetType = null);
        /// <summary>
        /// Retrieves fixed asset by id
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">fixed asset id for single object</param>
        /// <returns>Task of Asset</returns>
        System.Threading.Tasks.Task<Asset> GetAssetByIdAsync (string accessToken, string xeroTenantId, Guid id);

        /// <summary>
        /// Retrieves fixed asset by id
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">fixed asset id for single object</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Asset>> GetAssetByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id);
        /// <summary>
        /// searches fixed asset settings
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Setting</returns>
        System.Threading.Tasks.Task<Setting> GetAssetSettingsAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// searches fixed asset settings
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        System.Threading.Tasks.Task<ApiResponse<Setting>> GetAssetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// searches fixed asset types
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of List&lt;AssetType&gt;</returns>
        System.Threading.Tasks.Task<List<AssetType>> GetAssetTypesAsync (string accessToken, string xeroTenantId);

        /// <summary>
        /// searches fixed asset types
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (List&lt;AssetType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetType>>> GetAssetTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId);
        /// <summary>
        /// searches fixed asset
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available fixed asset in the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
        /// <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
        /// <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
        /// <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
        /// <param name="sortDirection">ASC or DESC (optional)</param>
        /// <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
        /// <returns>Task of Assets</returns>
        System.Threading.Tasks.Task<Assets> GetAssetsAsync (string accessToken, string xeroTenantId, AssetStatusQueryParam status, int? page = null, int? pageSize = null, string orderBy = null, string sortDirection = null, string filterBy = null);

        /// <summary>
        /// searches fixed asset
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available fixed asset in the system
        /// </remarks>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
        /// <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
        /// <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
        /// <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
        /// <param name="sortDirection">ASC or DESC (optional)</param>
        /// <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
        /// <returns>Task of ApiResponse (Assets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Assets>> GetAssetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, AssetStatusQueryParam status, int? page = null, int? pageSize = null, string orderBy = null, string sortDirection = null, string filterBy = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApi : IAssetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetApi : IAssetApi
    {
        private Xero.NetStandard.OAuth2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetApi() : this((string) null)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = "https://api.xero.com/assets.xro/1.0" }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetApi(String basePath)
        {
            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                new Xero.NetStandard.OAuth2.Client.Configuration { BasePath = basePath }
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetApi(Xero.NetStandard.OAuth2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Xero.NetStandard.OAuth2.Client.Configuration.MergeConfigurations(
                Xero.NetStandard.OAuth2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.AsynchronousClient = new Xero.NetStandard.OAuth2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetApi(Xero.NetStandard.OAuth2.Client.ISynchronousClient client,Xero.NetStandard.OAuth2.Client.IAsynchronousClient asyncClient, Xero.NetStandard.OAuth2.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Xero.NetStandard.OAuth2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Xero.NetStandard.OAuth2.Client.IReadableConfiguration Configuration {get; set;}


        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Xero.NetStandard.OAuth2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// adds a fixed asset Adds an asset to the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="asset">Fixed asset you are creating</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> CreateAssetAsync (string accessToken, string xeroTenantId, Asset asset)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Asset> localVarResponse = await CreateAssetAsyncWithHttpInfo(accessToken, xeroTenantId, asset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// adds a fixed asset Adds an asset to the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="asset">Fixed asset you are creating</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Asset>> CreateAssetAsyncWithHttpInfo (string accessToken, string xeroTenantId, Asset asset)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AssetApi->CreateAsset");

            // verify the required parameter 'asset' is set
            if (asset == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'asset' when calling AssetApi->CreateAsset");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = asset;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<Asset>("/Assets", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateAsset", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// adds a fixed asset type Adds an fixed asset type to the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="assetType">Asset type to add (optional)</param>
        /// <returns>Task of AssetType</returns>
        public async System.Threading.Tasks.Task<AssetType> CreateAssetTypeAsync (string accessToken, string xeroTenantId, AssetType assetType = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<AssetType> localVarResponse = await CreateAssetTypeAsyncWithHttpInfo(accessToken, xeroTenantId, assetType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// adds a fixed asset type Adds an fixed asset type to the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="assetType">Asset type to add (optional)</param>
        /// <returns>Task of ApiResponse (AssetType)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<AssetType>> CreateAssetTypeAsyncWithHttpInfo (string accessToken, string xeroTenantId, AssetType assetType = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AssetApi->CreateAssetType");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter
            requestOptions.Data = assetType;

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.PostAsync<AssetType>("/AssetTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateAssetType", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// Retrieves fixed asset by id By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">fixed asset id for single object</param>
        /// <returns>Task of Asset</returns>
        public async System.Threading.Tasks.Task<Asset> GetAssetByIdAsync (string accessToken, string xeroTenantId, Guid id)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Asset> localVarResponse = await GetAssetByIdAsyncWithHttpInfo(accessToken, xeroTenantId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves fixed asset by id By passing in the appropriate asset id, you can search for a specific fixed asset in the system 
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="id">fixed asset id for single object</param>
        /// <returns>Task of ApiResponse (Asset)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Asset>> GetAssetByIdAsyncWithHttpInfo (string accessToken, string xeroTenantId, Guid id)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AssetApi->GetAssetById");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'id' when calling AssetApi->GetAssetById");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Asset>("/Assets/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAssetById", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches fixed asset settings By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of Setting</returns>
        public async System.Threading.Tasks.Task<Setting> GetAssetSettingsAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Setting> localVarResponse = await GetAssetSettingsAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches fixed asset settings By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (Setting)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Setting>> GetAssetSettingsAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AssetApi->GetAssetSettings");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Setting>("/Settings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAssetSettings", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches fixed asset types By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of List&lt;AssetType&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetType>> GetAssetTypesAsync (string accessToken, string xeroTenantId)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<List<AssetType>> localVarResponse = await GetAssetTypesAsyncWithHttpInfo(accessToken, xeroTenantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches fixed asset types By passing in the appropriate options, you can search for available fixed asset types in the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <returns>Task of ApiResponse (List&lt;AssetType&gt;)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<List<AssetType>>> GetAssetTypesAsyncWithHttpInfo (string accessToken, string xeroTenantId)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AssetApi->GetAssetTypes");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<List<AssetType>>("/AssetTypes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAssetTypes", response);
                if (exception != null) throw exception;
            }

            return response;
        }


        /// <summary>
        /// searches fixed asset By passing in the appropriate options, you can search for available fixed asset in the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
        /// <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
        /// <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
        /// <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
        /// <param name="sortDirection">ASC or DESC (optional)</param>
        /// <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
        /// <returns>Task of Assets</returns>
        public async System.Threading.Tasks.Task<Assets> GetAssetsAsync (string accessToken, string xeroTenantId, AssetStatusQueryParam status, int? page = null, int? pageSize = null, string orderBy = null, string sortDirection = null, string filterBy = null)
        {
             Xero.NetStandard.OAuth2.Client.ApiResponse<Assets> localVarResponse = await GetAssetsAsyncWithHttpInfo(accessToken, xeroTenantId, status, page, pageSize, orderBy, sortDirection, filterBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches fixed asset By passing in the appropriate options, you can search for available fixed asset in the system
        /// </summary>
        /// <exception cref="Xero.NetStandard.OAuth2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken">Xero API OAuth 2.0 accessToken</param>
        /// <param name="xeroTenantId">Xero identifier for Tenant</param>
        /// <param name="status">Required when retrieving a collection of assets. See Asset Status Codes</param>
        /// <param name="page">Results are paged. This specifies which page of the results to return. The default page is 1. (optional)</param>
        /// <param name="pageSize">The number of records returned per page. By default the number of records returned is 10. (optional)</param>
        /// <param name="orderBy">Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice. (optional)</param>
        /// <param name="sortDirection">ASC or DESC (optional)</param>
        /// <param name="filterBy">A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields. (optional)</param>
        /// <returns>Task of ApiResponse (Assets)</returns>
        public async System.Threading.Tasks.Task<Xero.NetStandard.OAuth2.Client.ApiResponse<Assets>> GetAssetsAsyncWithHttpInfo (string accessToken, string xeroTenantId, AssetStatusQueryParam status, int? page = null, int? pageSize = null, string orderBy = null, string sortDirection = null, string filterBy = null)
        {
            // verify the required parameter 'xeroTenantId' is set
            if (xeroTenantId == null)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'xeroTenantId' when calling AssetApi->GetAssets");

            // verify the required parameter 'status' is set
            if (status == 0)
                throw new Xero.NetStandard.OAuth2.Client.ApiException(400, "Missing required parameter 'status' when calling AssetApi->GetAssets");


            Xero.NetStandard.OAuth2.Client.RequestOptions requestOptions = new Xero.NetStandard.OAuth2.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var cType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", cType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            if (status != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "status", status))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (page != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (pageSize != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (orderBy != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (sortDirection != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            if (filterBy != null)
            {
                foreach (var kvp in Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToMultiMap("", "filterBy", filterBy))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (xeroTenantId != null)
                requestOptions.HeaderParameters.Add("xero-tenant-id", Xero.NetStandard.OAuth2.Client.ClientUtils.ParameterToString(xeroTenantId)); // header parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(accessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + accessToken);
            }
            // make the HTTP request

      

            var response = await this.AsynchronousClient.GetAsync<Assets>("/Assets", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAssets", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
