/* 
 * Bank Feeds API
 *
 * This specifing endpoints Xero Bank feeds API
 *
 * The version of the OpenAPI document: 2.6.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Bankfeeds
{
    /// <summary>
    /// On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json.
    /// </summary>
    [DataContract]
    public partial class Error :  IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Identifies the type of error.
        /// </summary>
        /// <value>Identifies the type of error.</value>
        [JsonConverter(typeof(Client.CustomStringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum InvalidRequest for value: invalid-request
            /// </summary>
            [EnumMember(Value = "invalid-request")]
            InvalidRequest = 1,

            /// <summary>
            /// Enum InvalidApplication for value: invalid-application
            /// </summary>
            [EnumMember(Value = "invalid-application")]
            InvalidApplication = 2,

            /// <summary>
            /// Enum InvalidFeedConnection for value: invalid-feed-connection
            /// </summary>
            [EnumMember(Value = "invalid-feed-connection")]
            InvalidFeedConnection = 3,

            /// <summary>
            /// Enum DuplicateStatement for value: duplicate-statement
            /// </summary>
            [EnumMember(Value = "duplicate-statement")]
            DuplicateStatement = 4,

            /// <summary>
            /// Enum InvalidEndBalance for value: invalid-end-balance
            /// </summary>
            [EnumMember(Value = "invalid-end-balance")]
            InvalidEndBalance = 5,

            /// <summary>
            /// Enum InvalidStartAndEndDate for value: invalid-start-and-end-date
            /// </summary>
            [EnumMember(Value = "invalid-start-and-end-date")]
            InvalidStartAndEndDate = 6,

            /// <summary>
            /// Enum InvalidStartDate for value: invalid-start-date
            /// </summary>
            [EnumMember(Value = "invalid-start-date")]
            InvalidStartDate = 7,

            /// <summary>
            /// Enum InternalError for value: internal-error
            /// </summary>
            [EnumMember(Value = "internal-error")]
            InternalError = 8,

            /// <summary>
            /// Enum FeedAlreadyConnectedInCurrentOrganisation for value: feed-already-connected-in-current-organisation
            /// </summary>
            [EnumMember(Value = "feed-already-connected-in-current-organisation")]
            FeedAlreadyConnectedInCurrentOrganisation = 9,

            /// <summary>
            /// Enum InvalidEndDate for value: invalid-end-date
            /// </summary>
            [EnumMember(Value = "invalid-end-date")]
            InvalidEndDate = 10

        }

        /// <summary>
        /// Identifies the type of error.
        /// </summary>
        /// <value>Identifies the type of error.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        
        /// <summary>
        /// Human readable high level error description.
        /// </summary>
        /// <value>Human readable high level error description.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The numeric HTTP Status Code, e.g. 404
        /// </summary>
        /// <value>The numeric HTTP Status Code, e.g. 404</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Human readable detailed error description.
        /// </summary>
        /// <value>Human readable detailed error description.</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public string Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
