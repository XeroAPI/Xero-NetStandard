/* 
 * Bank Feeds API
 *
 * This specifing endpoints Xero Bank feeds API
 *
 * The version of the OpenAPI document: 2.6.1
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Bankfeeds
{
    /// <summary>
    /// Statement
    /// </summary>
    [DataContract]
    public partial class Statement :  IEquatable<Statement>, IValidatableObject
    {
        /// <summary>
        /// Current status of statements
        /// </summary>
        /// <value>Current status of statements</value>
        [JsonConverter(typeof(Client.CustomStringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 2,

            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 3

        }

        /// <summary>
        /// Current status of statements
        /// </summary>
        /// <value>Current status of statements</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        
        /// <summary>
        /// GUID used to identify the Statement.
        /// </summary>
        /// <value>GUID used to identify the Statement.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.
        /// </summary>
        /// <value>The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.</value>
        [DataMember(Name="feedConnectionId", EmitDefaultValue=false)]
        public Guid? FeedConnectionId { get; set; }

        /// <summary>
        /// Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
        /// </summary>
        /// <value>Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Closing balance date ISO-8601 YYYY-MM-DD
        /// </summary>
        /// <value>Closing balance date ISO-8601 YYYY-MM-DD</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets StartBalance
        /// </summary>
        [DataMember(Name="startBalance", EmitDefaultValue=false)]
        public StartBalance StartBalance { get; set; }

        /// <summary>
        /// Gets or Sets EndBalance
        /// </summary>
        [DataMember(Name="endBalance", EmitDefaultValue=false)]
        public EndBalance EndBalance { get; set; }

        /// <summary>
        /// Gets or Sets StatementLines
        /// </summary>
        [DataMember(Name="statementLines", EmitDefaultValue=false)]
        public List<StatementLine> StatementLines { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<Error> Errors { get; set; }

        /// <summary>
        /// Gets or Sets StatementLineCount
        /// </summary>
        [DataMember(Name="statementLineCount", EmitDefaultValue=false)]
        public int? StatementLineCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FeedConnectionId: ").Append(FeedConnectionId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartBalance: ").Append(StartBalance).Append("\n");
            sb.Append("  EndBalance: ").Append(EndBalance).Append("\n");
            sb.Append("  StatementLines: ").Append(StatementLines).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  StatementLineCount: ").Append(StatementLineCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Statement);
        }

        /// <summary>
        /// Returns true if Statement instances are equal
        /// </summary>
        /// <param name="input">Instance of Statement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FeedConnectionId == input.FeedConnectionId ||
                    (this.FeedConnectionId != null &&
                    this.FeedConnectionId.Equals(input.FeedConnectionId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StartBalance == input.StartBalance ||
                    (this.StartBalance != null &&
                    this.StartBalance.Equals(input.StartBalance))
                ) && 
                (
                    this.EndBalance == input.EndBalance ||
                    (this.EndBalance != null &&
                    this.EndBalance.Equals(input.EndBalance))
                ) && 
                (
                    this.StatementLines == input.StatementLines ||
                    this.StatementLines != null &&
                    input.StatementLines != null &&
                    this.StatementLines.SequenceEqual(input.StatementLines)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.StatementLineCount == input.StatementLineCount ||
                    this.StatementLineCount.Equals(input.StatementLineCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FeedConnectionId != null)
                    hashCode = hashCode * 59 + this.FeedConnectionId.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.StartBalance != null)
                    hashCode = hashCode * 59 + this.StartBalance.GetHashCode();
                if (this.EndBalance != null)
                    hashCode = hashCode * 59 + this.EndBalance.GetHashCode();
                if (this.StatementLines != null)
                    hashCode = hashCode * 59 + this.StatementLines.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                hashCode = hashCode * 59 + this.StatementLineCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
