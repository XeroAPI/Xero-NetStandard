/* 
 * Xero Payroll AU API
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.PayrollAu
{
    /// <summary>
    /// PaidLeaveEarningsLine
    /// </summary>
    [DataContract]
    public partial class PaidLeaveEarningsLine : IEquatable<PaidLeaveEarningsLine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaidLeaveEarningsLine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PaidLeaveEarningsLine()
        {
        }

        /// <summary>
        /// Xero leave type identifier
        /// </summary>
        /// <value>Xero leave type identifier</value>
        [DataMember(Name = "LeaveTypeID", EmitDefaultValue = false)]
        public Guid? LeaveTypeID { get; set; }

        /// <summary>
        /// Paid leave amount
        /// </summary>
        /// <value>Paid leave amount</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The amount of leave loading applied for the leave type that is subject to Superannuation Guarantee Contributions. *Only applicable for Leave Types with Annual Leave Categories
        /// </summary>
        /// <value>The amount of leave loading applied for the leave type that is subject to Superannuation Guarantee Contributions. *Only applicable for Leave Types with Annual Leave Categories</value>
        [DataMember(Name = "SGCAppliedLeaveLoadingAmount", EmitDefaultValue = false)]
        public decimal? SGCAppliedLeaveLoadingAmount { get; set; }

        /// <summary>
        /// The amount of leave loading applied for the leave type that is exempt from Superannuation Guarantee Contributions. *Only applicable for Leave Types with Annual Leave Categories
        /// </summary>
        /// <value>The amount of leave loading applied for the leave type that is exempt from Superannuation Guarantee Contributions. *Only applicable for Leave Types with Annual Leave Categories</value>
        [DataMember(Name = "SGCExemptedLeaveLoadingAmount", EmitDefaultValue = false)]
        public decimal? SGCExemptedLeaveLoadingAmount { get; set; }

        /// <summary>
        /// Reset the STP categorisations for the leave type. *Only applicable for Leave Types with Annual Leave Categories
        /// </summary>
        /// <value>Reset the STP categorisations for the leave type. *Only applicable for Leave Types with Annual Leave Categories</value>
        [DataMember(Name = "ResetSTPCategorisation", EmitDefaultValue = false)]
        public bool? ResetSTPCategorisation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaidLeaveEarningsLine {\n");
            sb.Append("  LeaveTypeID: ").Append(LeaveTypeID).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SGCAppliedLeaveLoadingAmount: ").Append(SGCAppliedLeaveLoadingAmount).Append("\n");
            sb.Append("  SGCExemptedLeaveLoadingAmount: ").Append(SGCExemptedLeaveLoadingAmount).Append("\n");
            sb.Append("  ResetSTPCategorisation: ").Append(ResetSTPCategorisation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaidLeaveEarningsLine);
        }

        /// <summary>
        /// Returns true if PaidLeaveEarningsLine instances are equal
        /// </summary>
        /// <param name="input">Instance of PaidLeaveEarningsLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaidLeaveEarningsLine input)
        {
            if (input == null)
                return false;

            return
                (
                    this.LeaveTypeID == input.LeaveTypeID ||
                    (this.LeaveTypeID != null &&
                    this.LeaveTypeID.Equals(input.LeaveTypeID))
                ) &&
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) &&
                (
                    this.SGCAppliedLeaveLoadingAmount == input.SGCAppliedLeaveLoadingAmount ||
                    (this.SGCAppliedLeaveLoadingAmount != null &&
                    this.SGCAppliedLeaveLoadingAmount.Equals(input.SGCAppliedLeaveLoadingAmount))
                ) &&
                (
                    this.SGCExemptedLeaveLoadingAmount == input.SGCExemptedLeaveLoadingAmount ||
                    (this.SGCExemptedLeaveLoadingAmount != null &&
                    this.SGCExemptedLeaveLoadingAmount.Equals(input.SGCExemptedLeaveLoadingAmount))
                ) &&
                (
                    this.ResetSTPCategorisation == input.ResetSTPCategorisation ||
                    (this.ResetSTPCategorisation != null &&
                    this.ResetSTPCategorisation.Equals(input.ResetSTPCategorisation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeaveTypeID != null)
                    hashCode = hashCode * 59 + this.LeaveTypeID.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.SGCAppliedLeaveLoadingAmount != null)
                    hashCode = hashCode * 59 + this.SGCAppliedLeaveLoadingAmount.GetHashCode();
                if (this.SGCExemptedLeaveLoadingAmount != null)
                    hashCode = hashCode * 59 + this.SGCExemptedLeaveLoadingAmount.GetHashCode();
                if (this.ResetSTPCategorisation != null)
                    hashCode = hashCode * 59 + this.ResetSTPCategorisation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
