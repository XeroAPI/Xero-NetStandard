/* 
 * Xero Payroll AU API
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.PayrollAu
{
    /// <summary>
    /// LeaveApplication
    /// </summary>
    [DataContract]
    public partial class LeaveApplication : IEquatable<LeaveApplication>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PayOutType
        /// </summary>
        [DataMember(Name = "PayOutType", EmitDefaultValue = false)]
        public PayOutType PayOutType { get; set; }

        /// <summary>
        /// The Xero identifier for Payroll Employee
        /// </summary>
        /// <value>The Xero identifier for Payroll Employee</value>
        [DataMember(Name = "LeaveApplicationID", EmitDefaultValue = false)]
        public Guid? LeaveApplicationID { get; set; }

        /// <summary>
        /// The Xero identifier for Payroll Employee
        /// </summary>
        /// <value>The Xero identifier for Payroll Employee</value>
        [DataMember(Name = "EmployeeID", EmitDefaultValue = false)]
        public Guid? EmployeeID { get; set; }

        /// <summary>
        /// The Xero identifier for Leave Type
        /// </summary>
        /// <value>The Xero identifier for Leave Type</value>
        [DataMember(Name = "LeaveTypeID", EmitDefaultValue = false)]
        public Guid? LeaveTypeID { get; set; }

        /// <summary>
        /// The title of the leave
        /// </summary>
        /// <value>The title of the leave</value>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Start date of the leave (YYYY-MM-DD)
        /// </summary>
        /// <value>Start date of the leave (YYYY-MM-DD)</value>
        [DataMember(Name = "StartDate", EmitDefaultValue = false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End date of the leave (YYYY-MM-DD)
        /// </summary>
        /// <value>End date of the leave (YYYY-MM-DD)</value>
        [DataMember(Name = "EndDate", EmitDefaultValue = false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The Description of the Leave
        /// </summary>
        /// <value>The Description of the Leave</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LeavePeriods
        /// </summary>
        [DataMember(Name = "LeavePeriods", EmitDefaultValue = false)]
        public List<LeavePeriod> LeavePeriods { get; set; }

        /// <summary>
        /// Last modified timestamp
        /// </summary>
        /// <value>Last modified timestamp</value>
        [DataMember(Name = "UpdatedDateUTC", EmitDefaultValue = false)]
        public DateTime? UpdatedDateUTC { get; private set; }

        /// <summary>
        /// Displays array of validation error messages from the API
        /// </summary>
        /// <value>Displays array of validation error messages from the API</value>
        [DataMember(Name = "ValidationErrors", EmitDefaultValue = false)]
        public List<ValidationError> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaveApplication {\n");
            sb.Append("  LeaveApplicationID: ").Append(LeaveApplicationID).Append("\n");
            sb.Append("  EmployeeID: ").Append(EmployeeID).Append("\n");
            sb.Append("  LeaveTypeID: ").Append(LeaveTypeID).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PayOutType: ").Append(PayOutType).Append("\n");
            sb.Append("  LeavePeriods: ").Append(LeavePeriods).Append("\n");
            sb.Append("  UpdatedDateUTC: ").Append(UpdatedDateUTC).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaveApplication);
        }

        /// <summary>
        /// Returns true if LeaveApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaveApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaveApplication input)
        {
            if (input == null)
                return false;

            return
                (
                    this.LeaveApplicationID == input.LeaveApplicationID ||
                    (this.LeaveApplicationID != null &&
                    this.LeaveApplicationID.Equals(input.LeaveApplicationID))
                ) &&
                (
                    this.EmployeeID == input.EmployeeID ||
                    (this.EmployeeID != null &&
                    this.EmployeeID.Equals(input.EmployeeID))
                ) &&
                (
                    this.LeaveTypeID == input.LeaveTypeID ||
                    (this.LeaveTypeID != null &&
                    this.LeaveTypeID.Equals(input.LeaveTypeID))
                ) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) &&
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) &&
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.PayOutType == input.PayOutType ||
                    this.PayOutType.Equals(input.PayOutType)
                ) &&
                (
                    this.LeavePeriods == input.LeavePeriods ||
                    this.LeavePeriods != null &&
                    input.LeavePeriods != null &&
                    this.LeavePeriods.SequenceEqual(input.LeavePeriods)
                ) &&
                (
                    this.UpdatedDateUTC == input.UpdatedDateUTC ||
                    (this.UpdatedDateUTC != null &&
                    this.UpdatedDateUTC.Equals(input.UpdatedDateUTC))
                ) &&
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    this.ValidationErrors != null &&
                    input.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(input.ValidationErrors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeaveApplicationID != null)
                    hashCode = hashCode * 59 + this.LeaveApplicationID.GetHashCode();
                if (this.EmployeeID != null)
                    hashCode = hashCode * 59 + this.EmployeeID.GetHashCode();
                if (this.LeaveTypeID != null)
                    hashCode = hashCode * 59 + this.LeaveTypeID.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.PayOutType.GetHashCode();
                if (this.LeavePeriods != null)
                    hashCode = hashCode * 59 + this.LeavePeriods.GetHashCode();
                if (this.UpdatedDateUTC != null)
                    hashCode = hashCode * 59 + this.UpdatedDateUTC.GetHashCode();
                if (this.ValidationErrors != null)
                    hashCode = hashCode * 59 + this.ValidationErrors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
