/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// DataSourceResponse
    /// </summary>
    [DataContract]
    public partial class DataSourceResponse :  IEquatable<DataSourceResponse>, IValidatableObject
    {
        
        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero via an API integration.   This could be from a bank or aggregator.   This gives an indication on the certainty of correctness of the data.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero via an API integration.   This could be from a bank or aggregator.   This gives an indication on the certainty of correctness of the data.</value>
        [DataMember(Name="directBankFeed", EmitDefaultValue=false)]
        public decimal? DirectBankFeed { get; set; }

        /// <summary>
        /// No longer in use.
        /// </summary>
        /// <value>No longer in use.</value>
        [DataMember(Name="indirectBankFeed", EmitDefaultValue=false)]
        public decimal? IndirectBankFeed { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was a file manually uploaded in to Xero.   This gives an indication on the certainty of correctness of the data.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was a file manually uploaded in to Xero.   This gives an indication on the certainty of correctness of the data.</value>
        [DataMember(Name="fileUpload", EmitDefaultValue=false)]
        public decimal? FileUpload { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was manually input in to Xero.   This gives an indication on the certainty of correctness of the data.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was manually input in to Xero.   This gives an indication on the certainty of correctness of the data.</value>
        [DataMember(Name="manual", EmitDefaultValue=false)]
        public decimal? Manual { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero via an API integration.   This could be from a bank or aggregator.  This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero via an API integration.   This could be from a bank or aggregator.  This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.</value>
        [DataMember(Name="directBankFeedPos", EmitDefaultValue=false)]
        public decimal? DirectBankFeedPos { get; set; }

        /// <summary>
        /// No longer in use.
        /// </summary>
        /// <value>No longer in use.</value>
        [DataMember(Name="indirectBankFeedPos", EmitDefaultValue=false)]
        public decimal? IndirectBankFeedPos { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was a file manually uploaded in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was a file manually uploaded in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.</value>
        [DataMember(Name="fileUploadPos", EmitDefaultValue=false)]
        public decimal? FileUploadPos { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was manually input in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was manually input in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.</value>
        [DataMember(Name="manualPos", EmitDefaultValue=false)]
        public decimal? ManualPos { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero via an API integration.   This could be from a bank or aggregator.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero via an API integration.   This could be from a bank or aggregator.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        [DataMember(Name="directBankFeedNeg", EmitDefaultValue=false)]
        public decimal? DirectBankFeedNeg { get; set; }

        /// <summary>
        /// No longer in use.
        /// </summary>
        /// <value>No longer in use.</value>
        [DataMember(Name="indirectBankFeedNeg", EmitDefaultValue=false)]
        public decimal? IndirectBankFeedNeg { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was a file manually uploaded in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was a file manually uploaded in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        [DataMember(Name="fileUploadNeg", EmitDefaultValue=false)]
        public decimal? FileUploadNeg { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was manually input in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was manually input in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        [DataMember(Name="manualNeg", EmitDefaultValue=false)]
        public decimal? ManualNeg { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was unknown.   This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was unknown.   This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.</value>
        [DataMember(Name="otherPos", EmitDefaultValue=false)]
        public decimal? OtherPos { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was unknown.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was unknown.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.</value>
        [DataMember(Name="otherNeg", EmitDefaultValue=false)]
        public decimal? OtherNeg { get; set; }

        /// <summary>
        /// Sum of the amounts of all statement lines where the source of the data was unknown.   This gives an indication on the certainty of correctness of the data.
        /// </summary>
        /// <value>Sum of the amounts of all statement lines where the source of the data was unknown.   This gives an indication on the certainty of correctness of the data.</value>
        [DataMember(Name="other", EmitDefaultValue=false)]
        public decimal? Other { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSourceResponse {\n");
            sb.Append("  DirectBankFeed: ").Append(DirectBankFeed).Append("\n");
            sb.Append("  IndirectBankFeed: ").Append(IndirectBankFeed).Append("\n");
            sb.Append("  FileUpload: ").Append(FileUpload).Append("\n");
            sb.Append("  Manual: ").Append(Manual).Append("\n");
            sb.Append("  DirectBankFeedPos: ").Append(DirectBankFeedPos).Append("\n");
            sb.Append("  IndirectBankFeedPos: ").Append(IndirectBankFeedPos).Append("\n");
            sb.Append("  FileUploadPos: ").Append(FileUploadPos).Append("\n");
            sb.Append("  ManualPos: ").Append(ManualPos).Append("\n");
            sb.Append("  DirectBankFeedNeg: ").Append(DirectBankFeedNeg).Append("\n");
            sb.Append("  IndirectBankFeedNeg: ").Append(IndirectBankFeedNeg).Append("\n");
            sb.Append("  FileUploadNeg: ").Append(FileUploadNeg).Append("\n");
            sb.Append("  ManualNeg: ").Append(ManualNeg).Append("\n");
            sb.Append("  OtherPos: ").Append(OtherPos).Append("\n");
            sb.Append("  OtherNeg: ").Append(OtherNeg).Append("\n");
            sb.Append("  Other: ").Append(Other).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataSourceResponse);
        }

        /// <summary>
        /// Returns true if DataSourceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DataSourceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSourceResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DirectBankFeed == input.DirectBankFeed ||
                    (this.DirectBankFeed != null &&
                    this.DirectBankFeed.Equals(input.DirectBankFeed))
                ) && 
                (
                    this.IndirectBankFeed == input.IndirectBankFeed ||
                    (this.IndirectBankFeed != null &&
                    this.IndirectBankFeed.Equals(input.IndirectBankFeed))
                ) && 
                (
                    this.FileUpload == input.FileUpload ||
                    (this.FileUpload != null &&
                    this.FileUpload.Equals(input.FileUpload))
                ) && 
                (
                    this.Manual == input.Manual ||
                    (this.Manual != null &&
                    this.Manual.Equals(input.Manual))
                ) && 
                (
                    this.DirectBankFeedPos == input.DirectBankFeedPos ||
                    (this.DirectBankFeedPos != null &&
                    this.DirectBankFeedPos.Equals(input.DirectBankFeedPos))
                ) && 
                (
                    this.IndirectBankFeedPos == input.IndirectBankFeedPos ||
                    (this.IndirectBankFeedPos != null &&
                    this.IndirectBankFeedPos.Equals(input.IndirectBankFeedPos))
                ) && 
                (
                    this.FileUploadPos == input.FileUploadPos ||
                    (this.FileUploadPos != null &&
                    this.FileUploadPos.Equals(input.FileUploadPos))
                ) && 
                (
                    this.ManualPos == input.ManualPos ||
                    (this.ManualPos != null &&
                    this.ManualPos.Equals(input.ManualPos))
                ) && 
                (
                    this.DirectBankFeedNeg == input.DirectBankFeedNeg ||
                    (this.DirectBankFeedNeg != null &&
                    this.DirectBankFeedNeg.Equals(input.DirectBankFeedNeg))
                ) && 
                (
                    this.IndirectBankFeedNeg == input.IndirectBankFeedNeg ||
                    (this.IndirectBankFeedNeg != null &&
                    this.IndirectBankFeedNeg.Equals(input.IndirectBankFeedNeg))
                ) && 
                (
                    this.FileUploadNeg == input.FileUploadNeg ||
                    (this.FileUploadNeg != null &&
                    this.FileUploadNeg.Equals(input.FileUploadNeg))
                ) && 
                (
                    this.ManualNeg == input.ManualNeg ||
                    (this.ManualNeg != null &&
                    this.ManualNeg.Equals(input.ManualNeg))
                ) && 
                (
                    this.OtherPos == input.OtherPos ||
                    (this.OtherPos != null &&
                    this.OtherPos.Equals(input.OtherPos))
                ) && 
                (
                    this.OtherNeg == input.OtherNeg ||
                    (this.OtherNeg != null &&
                    this.OtherNeg.Equals(input.OtherNeg))
                ) && 
                (
                    this.Other == input.Other ||
                    (this.Other != null &&
                    this.Other.Equals(input.Other))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DirectBankFeed != null)
                    hashCode = hashCode * 59 + this.DirectBankFeed.GetHashCode();
                if (this.IndirectBankFeed != null)
                    hashCode = hashCode * 59 + this.IndirectBankFeed.GetHashCode();
                if (this.FileUpload != null)
                    hashCode = hashCode * 59 + this.FileUpload.GetHashCode();
                if (this.Manual != null)
                    hashCode = hashCode * 59 + this.Manual.GetHashCode();
                if (this.DirectBankFeedPos != null)
                    hashCode = hashCode * 59 + this.DirectBankFeedPos.GetHashCode();
                if (this.IndirectBankFeedPos != null)
                    hashCode = hashCode * 59 + this.IndirectBankFeedPos.GetHashCode();
                if (this.FileUploadPos != null)
                    hashCode = hashCode * 59 + this.FileUploadPos.GetHashCode();
                if (this.ManualPos != null)
                    hashCode = hashCode * 59 + this.ManualPos.GetHashCode();
                if (this.DirectBankFeedNeg != null)
                    hashCode = hashCode * 59 + this.DirectBankFeedNeg.GetHashCode();
                if (this.IndirectBankFeedNeg != null)
                    hashCode = hashCode * 59 + this.IndirectBankFeedNeg.GetHashCode();
                if (this.FileUploadNeg != null)
                    hashCode = hashCode * 59 + this.FileUploadNeg.GetHashCode();
                if (this.ManualNeg != null)
                    hashCode = hashCode * 59 + this.ManualNeg.GetHashCode();
                if (this.OtherPos != null)
                    hashCode = hashCode * 59 + this.OtherPos.GetHashCode();
                if (this.OtherNeg != null)
                    hashCode = hashCode * 59 + this.OtherNeg.GetHashCode();
                if (this.Other != null)
                    hashCode = hashCode * 59 + this.Other.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
