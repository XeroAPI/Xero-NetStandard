/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// ContactDetail
    /// </summary>
    [DataContract]
    public partial class ContactDetail : IEquatable<ContactDetail>, IValidatableObject
    {

        /// <summary>
        /// ID of the contact associated with the transactions.    Transactions with no contact will be grouped under the special ID: 86793108-198C-46D8-90A3-43C1D12686CE.    Transactions that are receive or spend bank transfers will be grouped under the special ID: 207322B3-6A58-4BE7-80F1-430123914AD6
        /// </summary>
        /// <value>ID of the contact associated with the transactions.    Transactions with no contact will be grouped under the special ID: 86793108-198C-46D8-90A3-43C1D12686CE.    Transactions that are receive or spend bank transfers will be grouped under the special ID: 207322B3-6A58-4BE7-80F1-430123914AD6</value>
        [DataMember(Name = "contactId", EmitDefaultValue = false)]
        public Guid? ContactId { get; set; }

        /// <summary>
        /// Name of the contact associated with the transactions.    If no contact is associated with the transactions this will appear as “None Provided”,    For receive or spend bank transfer transactions, this will appear as “Bank Transfer”.
        /// </summary>
        /// <value>Name of the contact associated with the transactions.    If no contact is associated with the transactions this will appear as “None Provided”,    For receive or spend bank transfer transactions, this will appear as “Bank Transfer”.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Total value for the contact
        /// </summary>
        /// <value>Total value for the contact</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Gets or Sets TotalDetail
        /// </summary>
        [DataMember(Name = "totalDetail", EmitDefaultValue = false)]
        public ContactTotalDetail TotalDetail { get; set; }

        /// <summary>
        /// Gets or Sets TotalOther
        /// </summary>
        [DataMember(Name = "totalOther", EmitDefaultValue = false)]
        public ContactTotalOther TotalOther { get; set; }

        /// <summary>
        /// A list of account codes involved in transactions.
        /// </summary>
        /// <value>A list of account codes involved in transactions.</value>
        [DataMember(Name = "accountCodes", EmitDefaultValue = false)]
        public List<string> AccountCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactDetail {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalDetail: ").Append(TotalDetail).Append("\n");
            sb.Append("  TotalOther: ").Append(TotalOther).Append("\n");
            sb.Append("  AccountCodes: ").Append(AccountCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactDetail);
        }

        /// <summary>
        /// Returns true if ContactDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactDetail input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) &&
                (
                    this.TotalDetail == input.TotalDetail ||
                    (this.TotalDetail != null &&
                    this.TotalDetail.Equals(input.TotalDetail))
                ) &&
                (
                    this.TotalOther == input.TotalOther ||
                    (this.TotalOther != null &&
                    this.TotalOther.Equals(input.TotalOther))
                ) &&
                (
                    this.AccountCodes == input.AccountCodes ||
                    this.AccountCodes != null &&
                    input.AccountCodes != null &&
                    this.AccountCodes.SequenceEqual(input.AccountCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.TotalDetail != null)
                    hashCode = hashCode * 59 + this.TotalDetail.GetHashCode();
                if (this.TotalOther != null)
                    hashCode = hashCode * 59 + this.TotalOther.GetHashCode();
                if (this.AccountCodes != null)
                    hashCode = hashCode * 59 + this.AccountCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
