/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// BankStatementAccountingResponse
    /// </summary>
    [DataContract]
    public partial class BankStatementAccountingResponse :  IEquatable<BankStatementAccountingResponse>, IValidatableObject
    {
        
        /// <summary>
        /// Xero Identifier of bank account
        /// </summary>
        /// <value>Xero Identifier of bank account</value>
        [DataMember(Name="bankAccountId", EmitDefaultValue=false)]
        public Guid? BankAccountId { get; set; }

        /// <summary>
        /// Name of bank account
        /// </summary>
        /// <value>Name of bank account</value>
        [DataMember(Name="bankAccountName", EmitDefaultValue=false)]
        public string BankAccountName { get; set; }

        /// <summary>
        /// Currency code of the bank account
        /// </summary>
        /// <value>Currency code of the bank account</value>
        [DataMember(Name="bankAccountCurrencyCode", EmitDefaultValue=false)]
        public string BankAccountCurrencyCode { get; set; }

        /// <summary>
        /// List of bank statements and linked accounting data for the requested period
        /// </summary>
        /// <value>List of bank statements and linked accounting data for the requested period</value>
        [DataMember(Name="statements", EmitDefaultValue=false)]
        public List<StatementResponse> Statements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankStatementAccountingResponse {\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  BankAccountName: ").Append(BankAccountName).Append("\n");
            sb.Append("  BankAccountCurrencyCode: ").Append(BankAccountCurrencyCode).Append("\n");
            sb.Append("  Statements: ").Append(Statements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankStatementAccountingResponse);
        }

        /// <summary>
        /// Returns true if BankStatementAccountingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BankStatementAccountingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankStatementAccountingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.BankAccountName == input.BankAccountName ||
                    (this.BankAccountName != null &&
                    this.BankAccountName.Equals(input.BankAccountName))
                ) && 
                (
                    this.BankAccountCurrencyCode == input.BankAccountCurrencyCode ||
                    (this.BankAccountCurrencyCode != null &&
                    this.BankAccountCurrencyCode.Equals(input.BankAccountCurrencyCode))
                ) && 
                (
                    this.Statements == input.Statements ||
                    this.Statements != null &&
                    input.Statements != null &&
                    this.Statements.SequenceEqual(input.Statements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankAccountId != null)
                    hashCode = hashCode * 59 + this.BankAccountId.GetHashCode();
                if (this.BankAccountName != null)
                    hashCode = hashCode * 59 + this.BankAccountName.GetHashCode();
                if (this.BankAccountCurrencyCode != null)
                    hashCode = hashCode * 59 + this.BankAccountCurrencyCode.GetHashCode();
                if (this.Statements != null)
                    hashCode = hashCode * 59 + this.Statements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
