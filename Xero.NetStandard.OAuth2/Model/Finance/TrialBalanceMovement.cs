/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// TrialBalanceMovement
    /// </summary>
    [DataContract]
    public partial class TrialBalanceMovement : IEquatable<TrialBalanceMovement>, IValidatableObject
    {

        /// <summary>
        /// Debit amount
        /// </summary>
        /// <value>Debit amount</value>
        [DataMember(Name = "debits", EmitDefaultValue = false)]
        public decimal? Debits { get; set; }

        /// <summary>
        /// Credit amount
        /// </summary>
        /// <value>Credit amount</value>
        [DataMember(Name = "credits", EmitDefaultValue = false)]
        public decimal? Credits { get; set; }

        /// <summary>
        /// Gets or Sets Movement
        /// </summary>
        [DataMember(Name = "movement", EmitDefaultValue = false)]
        public TrialBalanceEntry Movement { get; set; }

        /// <summary>
        /// Value of movement. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative
        /// </summary>
        /// <value>Value of movement. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative</value>
        [DataMember(Name = "signedMovement", EmitDefaultValue = false)]
        public decimal? SignedMovement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrialBalanceMovement {\n");
            sb.Append("  Debits: ").Append(Debits).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("  Movement: ").Append(Movement).Append("\n");
            sb.Append("  SignedMovement: ").Append(SignedMovement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrialBalanceMovement);
        }

        /// <summary>
        /// Returns true if TrialBalanceMovement instances are equal
        /// </summary>
        /// <param name="input">Instance of TrialBalanceMovement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrialBalanceMovement input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Debits == input.Debits ||
                    (this.Debits != null &&
                    this.Debits.Equals(input.Debits))
                ) &&
                (
                    this.Credits == input.Credits ||
                    (this.Credits != null &&
                    this.Credits.Equals(input.Credits))
                ) &&
                (
                    this.Movement == input.Movement ||
                    (this.Movement != null &&
                    this.Movement.Equals(input.Movement))
                ) &&
                (
                    this.SignedMovement == input.SignedMovement ||
                    (this.SignedMovement != null &&
                    this.SignedMovement.Equals(input.SignedMovement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Debits != null)
                    hashCode = hashCode * 59 + this.Debits.GetHashCode();
                if (this.Credits != null)
                    hashCode = hashCode * 59 + this.Credits.GetHashCode();
                if (this.Movement != null)
                    hashCode = hashCode * 59 + this.Movement.GetHashCode();
                if (this.SignedMovement != null)
                    hashCode = hashCode * 59 + this.SignedMovement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
