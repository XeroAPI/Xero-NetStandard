/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// BalanceSheetResponse
    /// </summary>
    [DataContract]
    public partial class BalanceSheetResponse :  IEquatable<BalanceSheetResponse>, IValidatableObject
    {
        
        /// <summary>
        /// Balance date of the report
        /// </summary>
        /// <value>Balance date of the report</value>
        [DataMember(Name="balanceDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? BalanceDate { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset", EmitDefaultValue=false)]
        public BalanceSheetAccountGroup Asset { get; set; }

        /// <summary>
        /// Gets or Sets Liability
        /// </summary>
        [DataMember(Name="liability", EmitDefaultValue=false)]
        public BalanceSheetAccountGroup Liability { get; set; }

        /// <summary>
        /// Gets or Sets Equity
        /// </summary>
        [DataMember(Name="equity", EmitDefaultValue=false)]
        public BalanceSheetAccountGroup Equity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceSheetResponse {\n");
            sb.Append("  BalanceDate: ").Append(BalanceDate).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Liability: ").Append(Liability).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceSheetResponse);
        }

        /// <summary>
        /// Returns true if BalanceSheetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceSheetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceSheetResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BalanceDate == input.BalanceDate ||
                    (this.BalanceDate != null &&
                    this.BalanceDate.Equals(input.BalanceDate))
                ) && 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.Liability == input.Liability ||
                    (this.Liability != null &&
                    this.Liability.Equals(input.Liability))
                ) && 
                (
                    this.Equity == input.Equity ||
                    (this.Equity != null &&
                    this.Equity.Equals(input.Equity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BalanceDate != null)
                    hashCode = hashCode * 59 + this.BalanceDate.GetHashCode();
                if (this.Asset != null)
                    hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this.Liability != null)
                    hashCode = hashCode * 59 + this.Liability.GetHashCode();
                if (this.Equity != null)
                    hashCode = hashCode * 59 + this.Equity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
