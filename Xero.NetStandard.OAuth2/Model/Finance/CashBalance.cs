/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// CashBalance
    /// </summary>
    [DataContract]
    public partial class CashBalance : IEquatable<CashBalance>, IValidatableObject
    {

        /// <summary>
        /// Opening balance of cash and cash equivalents
        /// </summary>
        /// <value>Opening balance of cash and cash equivalents</value>
        [DataMember(Name = "openingCashBalance", EmitDefaultValue = false)]
        public decimal? OpeningCashBalance { get; set; }

        /// <summary>
        /// Closing balance of cash and cash equivalents
        /// </summary>
        /// <value>Closing balance of cash and cash equivalents</value>
        [DataMember(Name = "closingCashBalance", EmitDefaultValue = false)]
        public decimal? ClosingCashBalance { get; set; }

        /// <summary>
        /// Net movement of cash and cash equivalents for the period
        /// </summary>
        /// <value>Net movement of cash and cash equivalents for the period</value>
        [DataMember(Name = "netCashMovement", EmitDefaultValue = false)]
        public decimal? NetCashMovement { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashBalance {\n");
            sb.Append("  OpeningCashBalance: ").Append(OpeningCashBalance).Append("\n");
            sb.Append("  ClosingCashBalance: ").Append(ClosingCashBalance).Append("\n");
            sb.Append("  NetCashMovement: ").Append(NetCashMovement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashBalance);
        }

        /// <summary>
        /// Returns true if CashBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of CashBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashBalance input)
        {
            if (input == null)
                return false;

            return
                (
                    this.OpeningCashBalance == input.OpeningCashBalance ||
                    (this.OpeningCashBalance != null &&
                    this.OpeningCashBalance.Equals(input.OpeningCashBalance))
                ) &&
                (
                    this.ClosingCashBalance == input.ClosingCashBalance ||
                    (this.ClosingCashBalance != null &&
                    this.ClosingCashBalance.Equals(input.ClosingCashBalance))
                ) &&
                (
                    this.NetCashMovement == input.NetCashMovement ||
                    (this.NetCashMovement != null &&
                    this.NetCashMovement.Equals(input.NetCashMovement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpeningCashBalance != null)
                    hashCode = hashCode * 59 + this.OpeningCashBalance.GetHashCode();
                if (this.ClosingCashBalance != null)
                    hashCode = hashCode * 59 + this.ClosingCashBalance.GetHashCode();
                if (this.NetCashMovement != null)
                    hashCode = hashCode * 59 + this.NetCashMovement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
