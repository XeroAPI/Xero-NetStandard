/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// StatementLineResponse
    /// </summary>
    [DataContract]
    public partial class StatementLineResponse :  IEquatable<StatementLineResponse>, IValidatableObject
    {
        
        /// <summary>
        /// Xero Identifier of statement line
        /// </summary>
        /// <value>Xero Identifier of statement line</value>
        [DataMember(Name="statementLineId", EmitDefaultValue=false)]
        public Guid? StatementLineId { get; set; }

        /// <summary>
        /// Date of when statement line was posted
        /// </summary>
        /// <value>Date of when statement line was posted</value>
        [DataMember(Name="postedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        /// Reference description of statement line
        /// </summary>
        /// <value>Reference description of statement line</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Notes description of statement line
        /// </summary>
        /// <value>Notes description of statement line</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Cheque number of statement line
        /// </summary>
        /// <value>Cheque number of statement line</value>
        [DataMember(Name="chequeNo", EmitDefaultValue=false)]
        public string ChequeNo { get; set; }

        /// <summary>
        /// Amount of statement line
        /// </summary>
        /// <value>Amount of statement line</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Transaction date of statement line
        /// </summary>
        /// <value>Transaction date of statement line</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Type of statement line
        /// </summary>
        /// <value>Type of statement line</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Boolean to show if statement line is reconciled
        /// </summary>
        /// <value>Boolean to show if statement line is reconciled</value>
        [DataMember(Name="isReconciled", EmitDefaultValue=false)]
        public bool? IsReconciled { get; set; }

        /// <summary>
        /// Boolean to show if statement line is duplicate
        /// </summary>
        /// <value>Boolean to show if statement line is duplicate</value>
        [DataMember(Name="isDuplicate", EmitDefaultValue=false)]
        public bool? IsDuplicate { get; set; }

        /// <summary>
        /// Boolean to show if statement line is deleted
        /// </summary>
        /// <value>Boolean to show if statement line is deleted</value>
        [DataMember(Name="isDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// List of payments associated with reconciled statement lines
        /// </summary>
        /// <value>List of payments associated with reconciled statement lines</value>
        [DataMember(Name="payments", EmitDefaultValue=false)]
        public List<PaymentResponse> Payments { get; set; }

        /// <summary>
        /// List of bank transactions associated with reconciled statement lines
        /// </summary>
        /// <value>List of bank transactions associated with reconciled statement lines</value>
        [DataMember(Name="bankTransactions", EmitDefaultValue=false)]
        public List<BankTransactionResponse> BankTransactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatementLineResponse {\n");
            sb.Append("  StatementLineId: ").Append(StatementLineId).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ChequeNo: ").Append(ChequeNo).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsReconciled: ").Append(IsReconciled).Append("\n");
            sb.Append("  IsDuplicate: ").Append(IsDuplicate).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  BankTransactions: ").Append(BankTransactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatementLineResponse);
        }

        /// <summary>
        /// Returns true if StatementLineResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StatementLineResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatementLineResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatementLineId == input.StatementLineId ||
                    (this.StatementLineId != null &&
                    this.StatementLineId.Equals(input.StatementLineId))
                ) && 
                (
                    this.PostedDate == input.PostedDate ||
                    (this.PostedDate != null &&
                    this.PostedDate.Equals(input.PostedDate))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.ChequeNo == input.ChequeNo ||
                    (this.ChequeNo != null &&
                    this.ChequeNo.Equals(input.ChequeNo))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IsReconciled == input.IsReconciled ||
                    (this.IsReconciled != null &&
                    this.IsReconciled.Equals(input.IsReconciled))
                ) && 
                (
                    this.IsDuplicate == input.IsDuplicate ||
                    (this.IsDuplicate != null &&
                    this.IsDuplicate.Equals(input.IsDuplicate))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.BankTransactions == input.BankTransactions ||
                    this.BankTransactions != null &&
                    input.BankTransactions != null &&
                    this.BankTransactions.SequenceEqual(input.BankTransactions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatementLineId != null)
                    hashCode = hashCode * 59 + this.StatementLineId.GetHashCode();
                if (this.PostedDate != null)
                    hashCode = hashCode * 59 + this.PostedDate.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.ChequeNo != null)
                    hashCode = hashCode * 59 + this.ChequeNo.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IsReconciled != null)
                    hashCode = hashCode * 59 + this.IsReconciled.GetHashCode();
                if (this.IsDuplicate != null)
                    hashCode = hashCode * 59 + this.IsDuplicate.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.Payments != null)
                    hashCode = hashCode * 59 + this.Payments.GetHashCode();
                if (this.BankTransactions != null)
                    hashCode = hashCode * 59 + this.BankTransactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
