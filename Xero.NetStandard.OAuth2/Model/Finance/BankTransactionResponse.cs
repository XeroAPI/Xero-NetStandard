/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// BankTransactionResponse
    /// </summary>
    [DataContract]
    public partial class BankTransactionResponse :  IEquatable<BankTransactionResponse>, IValidatableObject
    {
        
        /// <summary>
        /// Xero Identifier of transaction
        /// </summary>
        /// <value>Xero Identifier of transaction</value>
        [DataMember(Name="bankTransactionId", EmitDefaultValue=false)]
        public Guid? BankTransactionId { get; set; }

        /// <summary>
        /// Xero Identifier of batch payment. Present if the transaction is part of a batch.
        /// </summary>
        /// <value>Xero Identifier of batch payment. Present if the transaction is part of a batch.</value>
        [DataMember(Name="batchPaymentId", EmitDefaultValue=false)]
        public Guid? BatchPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public ContactResponse Contact { get; set; }

        /// <summary>
        /// Date of transaction - YYYY-MM-DD
        /// </summary>
        /// <value>Date of transaction - YYYY-MM-DD</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Amount of transaction
        /// </summary>
        /// <value>Amount of transaction</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The LineItems element can contain any number of individual LineItem sub-elements. Not included in summary mode
        /// </summary>
        /// <value>The LineItems element can contain any number of individual LineItem sub-elements. Not included in summary mode</value>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<LineItemResponse> LineItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankTransactionResponse {\n");
            sb.Append("  BankTransactionId: ").Append(BankTransactionId).Append("\n");
            sb.Append("  BatchPaymentId: ").Append(BatchPaymentId).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankTransactionResponse);
        }

        /// <summary>
        /// Returns true if BankTransactionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BankTransactionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankTransactionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankTransactionId == input.BankTransactionId ||
                    (this.BankTransactionId != null &&
                    this.BankTransactionId.Equals(input.BankTransactionId))
                ) && 
                (
                    this.BatchPaymentId == input.BatchPaymentId ||
                    (this.BatchPaymentId != null &&
                    this.BatchPaymentId.Equals(input.BatchPaymentId))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankTransactionId != null)
                    hashCode = hashCode * 59 + this.BankTransactionId.GetHashCode();
                if (this.BatchPaymentId != null)
                    hashCode = hashCode * 59 + this.BatchPaymentId.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
