/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// UserResponse
    /// </summary>
    [DataContract]
    public partial class UserResponse :  IEquatable<UserResponse>, IValidatableObject
    {
        
        /// <summary>
        /// The Xero identifier for the user
        /// </summary>
        /// <value>The Xero identifier for the user</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Timestamp of user creation.
        /// </summary>
        /// <value>Timestamp of user creation.</value>
        [DataMember(Name="userCreatedDateUtc", EmitDefaultValue=true)]
        public DateTime? UserCreatedDateUtc { get; set; }

        /// <summary>
        /// Timestamp of user last login
        /// </summary>
        /// <value>Timestamp of user last login</value>
        [DataMember(Name="lastLoginDateUtc", EmitDefaultValue=true)]
        public DateTime? LastLoginDateUtc { get; set; }

        /// <summary>
        /// User is external partner.
        /// </summary>
        /// <value>User is external partner.</value>
        [DataMember(Name="isExternalPartner", EmitDefaultValue=false)]
        public bool? IsExternalPartner { get; set; }

        /// <summary>
        /// User has Accountant role.
        /// </summary>
        /// <value>User has Accountant role.</value>
        [DataMember(Name="hasAccountantRole", EmitDefaultValue=false)]
        public bool? HasAccountantRole { get; set; }

        /// <summary>
        /// Month period in format  yyyy-MM.
        /// </summary>
        /// <value>Month period in format  yyyy-MM.</value>
        [DataMember(Name="monthPeriod", EmitDefaultValue=true)]
        public string MonthPeriod { get; set; }

        /// <summary>
        /// Number of times the user has logged in.
        /// </summary>
        /// <value>Number of times the user has logged in.</value>
        [DataMember(Name="numberOfLogins", EmitDefaultValue=false)]
        public int? NumberOfLogins { get; set; }

        /// <summary>
        /// Number of documents created.
        /// </summary>
        /// <value>Number of documents created.</value>
        [DataMember(Name="numberOfDocumentsCreated", EmitDefaultValue=false)]
        public int? NumberOfDocumentsCreated { get; set; }

        /// <summary>
        /// Net value of documents created.
        /// </summary>
        /// <value>Net value of documents created.</value>
        [DataMember(Name="netValueDocumentsCreated", EmitDefaultValue=true)]
        public double? NetValueDocumentsCreated { get; set; }

        /// <summary>
        /// Absolute value of documents created.
        /// </summary>
        /// <value>Absolute value of documents created.</value>
        [DataMember(Name="absoluteValueDocumentsCreated", EmitDefaultValue=true)]
        public double? AbsoluteValueDocumentsCreated { get; set; }

        /// <summary>
        /// Gets or Sets AttachedPractices
        /// </summary>
        [DataMember(Name="attachedPractices", EmitDefaultValue=true)]
        public List<PracticeResponse> AttachedPractices { get; set; }

        /// <summary>
        /// Gets or Sets HistoryRecords
        /// </summary>
        [DataMember(Name="historyRecords", EmitDefaultValue=true)]
        public List<HistoryRecordResponse> HistoryRecords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserCreatedDateUtc: ").Append(UserCreatedDateUtc).Append("\n");
            sb.Append("  LastLoginDateUtc: ").Append(LastLoginDateUtc).Append("\n");
            sb.Append("  IsExternalPartner: ").Append(IsExternalPartner).Append("\n");
            sb.Append("  HasAccountantRole: ").Append(HasAccountantRole).Append("\n");
            sb.Append("  MonthPeriod: ").Append(MonthPeriod).Append("\n");
            sb.Append("  NumberOfLogins: ").Append(NumberOfLogins).Append("\n");
            sb.Append("  NumberOfDocumentsCreated: ").Append(NumberOfDocumentsCreated).Append("\n");
            sb.Append("  NetValueDocumentsCreated: ").Append(NetValueDocumentsCreated).Append("\n");
            sb.Append("  AbsoluteValueDocumentsCreated: ").Append(AbsoluteValueDocumentsCreated).Append("\n");
            sb.Append("  AttachedPractices: ").Append(AttachedPractices).Append("\n");
            sb.Append("  HistoryRecords: ").Append(HistoryRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResponse);
        }

        /// <summary>
        /// Returns true if UserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserCreatedDateUtc == input.UserCreatedDateUtc ||
                    (this.UserCreatedDateUtc != null &&
                    this.UserCreatedDateUtc.Equals(input.UserCreatedDateUtc))
                ) && 
                (
                    this.LastLoginDateUtc == input.LastLoginDateUtc ||
                    (this.LastLoginDateUtc != null &&
                    this.LastLoginDateUtc.Equals(input.LastLoginDateUtc))
                ) && 
                (
                    this.IsExternalPartner == input.IsExternalPartner ||
                    (this.IsExternalPartner != null &&
                    this.IsExternalPartner.Equals(input.IsExternalPartner))
                ) && 
                (
                    this.HasAccountantRole == input.HasAccountantRole ||
                    (this.HasAccountantRole != null &&
                    this.HasAccountantRole.Equals(input.HasAccountantRole))
                ) && 
                (
                    this.MonthPeriod == input.MonthPeriod ||
                    (this.MonthPeriod != null &&
                    this.MonthPeriod.Equals(input.MonthPeriod))
                ) && 
                (
                    this.NumberOfLogins == input.NumberOfLogins ||
                    (this.NumberOfLogins != null &&
                    this.NumberOfLogins.Equals(input.NumberOfLogins))
                ) && 
                (
                    this.NumberOfDocumentsCreated == input.NumberOfDocumentsCreated ||
                    (this.NumberOfDocumentsCreated != null &&
                    this.NumberOfDocumentsCreated.Equals(input.NumberOfDocumentsCreated))
                ) && 
                (
                    this.NetValueDocumentsCreated == input.NetValueDocumentsCreated ||
                    (this.NetValueDocumentsCreated != null &&
                    this.NetValueDocumentsCreated.Equals(input.NetValueDocumentsCreated))
                ) && 
                (
                    this.AbsoluteValueDocumentsCreated == input.AbsoluteValueDocumentsCreated ||
                    (this.AbsoluteValueDocumentsCreated != null &&
                    this.AbsoluteValueDocumentsCreated.Equals(input.AbsoluteValueDocumentsCreated))
                ) && 
                (
                    this.AttachedPractices == input.AttachedPractices ||
                    this.AttachedPractices != null &&
                    input.AttachedPractices != null &&
                    this.AttachedPractices.SequenceEqual(input.AttachedPractices)
                ) && 
                (
                    this.HistoryRecords == input.HistoryRecords ||
                    this.HistoryRecords != null &&
                    input.HistoryRecords != null &&
                    this.HistoryRecords.SequenceEqual(input.HistoryRecords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserCreatedDateUtc != null)
                    hashCode = hashCode * 59 + this.UserCreatedDateUtc.GetHashCode();
                if (this.LastLoginDateUtc != null)
                    hashCode = hashCode * 59 + this.LastLoginDateUtc.GetHashCode();
                if (this.IsExternalPartner != null)
                    hashCode = hashCode * 59 + this.IsExternalPartner.GetHashCode();
                if (this.HasAccountantRole != null)
                    hashCode = hashCode * 59 + this.HasAccountantRole.GetHashCode();
                if (this.MonthPeriod != null)
                    hashCode = hashCode * 59 + this.MonthPeriod.GetHashCode();
                if (this.NumberOfLogins != null)
                    hashCode = hashCode * 59 + this.NumberOfLogins.GetHashCode();
                if (this.NumberOfDocumentsCreated != null)
                    hashCode = hashCode * 59 + this.NumberOfDocumentsCreated.GetHashCode();
                if (this.NetValueDocumentsCreated != null)
                    hashCode = hashCode * 59 + this.NetValueDocumentsCreated.GetHashCode();
                if (this.AbsoluteValueDocumentsCreated != null)
                    hashCode = hashCode * 59 + this.AbsoluteValueDocumentsCreated.GetHashCode();
                if (this.AttachedPractices != null)
                    hashCode = hashCode * 59 + this.AttachedPractices.GetHashCode();
                if (this.HistoryRecords != null)
                    hashCode = hashCode * 59 + this.HistoryRecords.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
