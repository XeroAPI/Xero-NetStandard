/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// TotalOther
    /// </summary>
    [DataContract]
    public partial class TotalOther : IEquatable<TotalOther>, IValidatableObject
    {

        /// <summary>
        /// Total outstanding invoice value within the period where the invoices are more than 90 days old
        /// </summary>
        /// <value>Total outstanding invoice value within the period where the invoices are more than 90 days old</value>
        [DataMember(Name = "totalOutstandingAged", EmitDefaultValue = false)]
        public decimal? TotalOutstandingAged { get; set; }

        /// <summary>
        /// Total voided value.
        /// </summary>
        /// <value>Total voided value.</value>
        [DataMember(Name = "totalVoided", EmitDefaultValue = false)]
        public decimal? TotalVoided { get; set; }

        /// <summary>
        /// Total credited value.
        /// </summary>
        /// <value>Total credited value.</value>
        [DataMember(Name = "totalCredited", EmitDefaultValue = false)]
        public decimal? TotalCredited { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TotalOther {\n");
            sb.Append("  TotalOutstandingAged: ").Append(TotalOutstandingAged).Append("\n");
            sb.Append("  TotalVoided: ").Append(TotalVoided).Append("\n");
            sb.Append("  TotalCredited: ").Append(TotalCredited).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TotalOther);
        }

        /// <summary>
        /// Returns true if TotalOther instances are equal
        /// </summary>
        /// <param name="input">Instance of TotalOther to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TotalOther input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TotalOutstandingAged == input.TotalOutstandingAged ||
                    (this.TotalOutstandingAged != null &&
                    this.TotalOutstandingAged.Equals(input.TotalOutstandingAged))
                ) &&
                (
                    this.TotalVoided == input.TotalVoided ||
                    (this.TotalVoided != null &&
                    this.TotalVoided.Equals(input.TotalVoided))
                ) &&
                (
                    this.TotalCredited == input.TotalCredited ||
                    (this.TotalCredited != null &&
                    this.TotalCredited.Equals(input.TotalCredited))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalOutstandingAged != null)
                    hashCode = hashCode * 59 + this.TotalOutstandingAged.GetHashCode();
                if (this.TotalVoided != null)
                    hashCode = hashCode * 59 + this.TotalVoided.GetHashCode();
                if (this.TotalCredited != null)
                    hashCode = hashCode * 59 + this.TotalCredited.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
