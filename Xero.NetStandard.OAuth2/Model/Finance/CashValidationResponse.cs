/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// CashValidationResponse
    /// </summary>
    [DataContract]
    public partial class CashValidationResponse :  IEquatable<CashValidationResponse>, IValidatableObject
    {
        
        /// <summary>
        /// The Xero identifier for an account
        /// </summary>
        /// <value>The Xero identifier for an account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets StatementBalance
        /// </summary>
        [DataMember(Name="statementBalance", EmitDefaultValue=false)]
        public StatementBalanceResponse StatementBalance { get; set; }

        /// <summary>
        /// UTC Date when the last bank statement item was entered into Xero. This date is represented in ISO 8601 format.
        /// </summary>
        /// <value>UTC Date when the last bank statement item was entered into Xero. This date is represented in ISO 8601 format.</value>
        [DataMember(Name="statementBalanceDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime?? StatementBalanceDate { get; set; }

        /// <summary>
        /// Gets or Sets BankStatement
        /// </summary>
        [DataMember(Name="bankStatement", EmitDefaultValue=false)]
        public BankStatementResponse BankStatement { get; set; }

        /// <summary>
        /// Gets or Sets CashAccount
        /// </summary>
        [DataMember(Name="cashAccount", EmitDefaultValue=false)]
        public CashAccountResponse CashAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashValidationResponse {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  StatementBalance: ").Append(StatementBalance).Append("\n");
            sb.Append("  StatementBalanceDate: ").Append(StatementBalanceDate).Append("\n");
            sb.Append("  BankStatement: ").Append(BankStatement).Append("\n");
            sb.Append("  CashAccount: ").Append(CashAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashValidationResponse);
        }

        /// <summary>
        /// Returns true if CashValidationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CashValidationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashValidationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.StatementBalance == input.StatementBalance ||
                    (this.StatementBalance != null &&
                    this.StatementBalance.Equals(input.StatementBalance))
                ) && 
                (
                    this.StatementBalanceDate == input.StatementBalanceDate ||
                    (this.StatementBalanceDate != null &&
                    this.StatementBalanceDate.Equals(input.StatementBalanceDate))
                ) && 
                (
                    this.BankStatement == input.BankStatement ||
                    (this.BankStatement != null &&
                    this.BankStatement.Equals(input.BankStatement))
                ) && 
                (
                    this.CashAccount == input.CashAccount ||
                    (this.CashAccount != null &&
                    this.CashAccount.Equals(input.CashAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.StatementBalance != null)
                    hashCode = hashCode * 59 + this.StatementBalance.GetHashCode();
                if (this.StatementBalanceDate != null)
                    hashCode = hashCode * 59 + this.StatementBalanceDate.GetHashCode();
                if (this.BankStatement != null)
                    hashCode = hashCode * 59 + this.BankStatement.GetHashCode();
                if (this.CashAccount != null)
                    hashCode = hashCode * 59 + this.CashAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
