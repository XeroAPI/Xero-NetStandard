/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// CashAccountResponse
    /// </summary>
    [DataContract]
    public partial class CashAccountResponse : IEquatable<CashAccountResponse>, IValidatableObject
    {

        /// <summary>
        /// Total value of transactions in the journals which are not reconciled to bank statement lines, and have a positive (debit) value.
        /// </summary>
        /// <value>Total value of transactions in the journals which are not reconciled to bank statement lines, and have a positive (debit) value.</value>
        [DataMember(Name = "unreconciledAmountPos", EmitDefaultValue = false)]
        public decimal? UnreconciledAmountPos { get; set; }

        /// <summary>
        /// Total value of transactions in the journals which are not reconciled to bank statement lines, and have a negative (credit) value.
        /// </summary>
        /// <value>Total value of transactions in the journals which are not reconciled to bank statement lines, and have a negative (credit) value.</value>
        [DataMember(Name = "unreconciledAmountNeg", EmitDefaultValue = false)]
        public decimal? UnreconciledAmountNeg { get; set; }

        /// <summary>
        /// Starting (or historic) balance from the journals (manually keyed in by users on account creation - unverified).
        /// </summary>
        /// <value>Starting (or historic) balance from the journals (manually keyed in by users on account creation - unverified).</value>
        [DataMember(Name = "startingBalance", EmitDefaultValue = false)]
        public decimal? StartingBalance { get; set; }

        /// <summary>
        /// Current cash at bank accounting value from the journals.
        /// </summary>
        /// <value>Current cash at bank accounting value from the journals.</value>
        [DataMember(Name = "accountBalance", EmitDefaultValue = false)]
        public decimal? AccountBalance { get; set; }

        /// <summary>
        /// Currency which the cashAccount transactions relate to.
        /// </summary>
        /// <value>Currency which the cashAccount transactions relate to.</value>
        [DataMember(Name = "balanceCurrency", EmitDefaultValue = false)]
        public string BalanceCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashAccountResponse {\n");
            sb.Append("  UnreconciledAmountPos: ").Append(UnreconciledAmountPos).Append("\n");
            sb.Append("  UnreconciledAmountNeg: ").Append(UnreconciledAmountNeg).Append("\n");
            sb.Append("  StartingBalance: ").Append(StartingBalance).Append("\n");
            sb.Append("  AccountBalance: ").Append(AccountBalance).Append("\n");
            sb.Append("  BalanceCurrency: ").Append(BalanceCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashAccountResponse);
        }

        /// <summary>
        /// Returns true if CashAccountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CashAccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashAccountResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.UnreconciledAmountPos == input.UnreconciledAmountPos ||
                    (this.UnreconciledAmountPos != null &&
                    this.UnreconciledAmountPos.Equals(input.UnreconciledAmountPos))
                ) &&
                (
                    this.UnreconciledAmountNeg == input.UnreconciledAmountNeg ||
                    (this.UnreconciledAmountNeg != null &&
                    this.UnreconciledAmountNeg.Equals(input.UnreconciledAmountNeg))
                ) &&
                (
                    this.StartingBalance == input.StartingBalance ||
                    (this.StartingBalance != null &&
                    this.StartingBalance.Equals(input.StartingBalance))
                ) &&
                (
                    this.AccountBalance == input.AccountBalance ||
                    (this.AccountBalance != null &&
                    this.AccountBalance.Equals(input.AccountBalance))
                ) &&
                (
                    this.BalanceCurrency == input.BalanceCurrency ||
                    (this.BalanceCurrency != null &&
                    this.BalanceCurrency.Equals(input.BalanceCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnreconciledAmountPos != null)
                    hashCode = hashCode * 59 + this.UnreconciledAmountPos.GetHashCode();
                if (this.UnreconciledAmountNeg != null)
                    hashCode = hashCode * 59 + this.UnreconciledAmountNeg.GetHashCode();
                if (this.StartingBalance != null)
                    hashCode = hashCode * 59 + this.StartingBalance.GetHashCode();
                if (this.AccountBalance != null)
                    hashCode = hashCode * 59 + this.AccountBalance.GetHashCode();
                if (this.BalanceCurrency != null)
                    hashCode = hashCode * 59 + this.BalanceCurrency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
