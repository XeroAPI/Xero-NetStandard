/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// IncomeByContactResponse
    /// </summary>
    [DataContract]
    public partial class IncomeByContactResponse : IEquatable<IncomeByContactResponse>, IValidatableObject
    {

        /// <summary>
        /// Start date of the report
        /// </summary>
        /// <value>Start date of the report</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End date of the report
        /// </summary>
        /// <value>End date of the report</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Total value
        /// </summary>
        /// <value>Total value</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Gets or Sets TotalDetail
        /// </summary>
        [DataMember(Name = "totalDetail", EmitDefaultValue = false)]
        public TotalDetail TotalDetail { get; set; }

        /// <summary>
        /// Gets or Sets TotalOther
        /// </summary>
        [DataMember(Name = "totalOther", EmitDefaultValue = false)]
        public TotalOther TotalOther { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<ContactDetail> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets ManualJournals
        /// </summary>
        [DataMember(Name = "manualJournals", EmitDefaultValue = false)]
        public ManualJournalTotal ManualJournals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncomeByContactResponse {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalDetail: ").Append(TotalDetail).Append("\n");
            sb.Append("  TotalOther: ").Append(TotalOther).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  ManualJournals: ").Append(ManualJournals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomeByContactResponse);
        }

        /// <summary>
        /// Returns true if IncomeByContactResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomeByContactResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomeByContactResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) &&
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) &&
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) &&
                (
                    this.TotalDetail == input.TotalDetail ||
                    (this.TotalDetail != null &&
                    this.TotalDetail.Equals(input.TotalDetail))
                ) &&
                (
                    this.TotalOther == input.TotalOther ||
                    (this.TotalOther != null &&
                    this.TotalOther.Equals(input.TotalOther))
                ) &&
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) &&
                (
                    this.ManualJournals == input.ManualJournals ||
                    (this.ManualJournals != null &&
                    this.ManualJournals.Equals(input.ManualJournals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.TotalDetail != null)
                    hashCode = hashCode * 59 + this.TotalDetail.GetHashCode();
                if (this.TotalOther != null)
                    hashCode = hashCode * 59 + this.TotalOther.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.ManualJournals != null)
                    hashCode = hashCode * 59 + this.ManualJournals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
