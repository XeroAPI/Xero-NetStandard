/* 
 * Xero Finance API
 *
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Finance
{
    /// <summary>
    /// TrialBalanceAccount
    /// </summary>
    [DataContract]
    public partial class TrialBalanceAccount :  IEquatable<TrialBalanceAccount>, IValidatableObject
    {
        
        /// <summary>
        /// ID of the account
        /// </summary>
        /// <value>ID of the account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;
        /// </summary>
        /// <value>The type of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountTypes&#39;&gt;Account Types&lt;/a&gt;</value>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public string AccountType { get; set; }

        /// <summary>
        /// Customer defined alpha numeric account code e.g 200 or SALES
        /// </summary>
        /// <value>Customer defined alpha numeric account code e.g 200 or SALES</value>
        [DataMember(Name="accountCode", EmitDefaultValue=true)]
        public string AccountCode { get; set; }

        /// <summary>
        /// The class of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountClassTypes&#39;&gt;Account Class Types&lt;/a&gt;
        /// </summary>
        /// <value>The class of the account. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountClassTypes&#39;&gt;Account Class Types&lt;/a&gt;</value>
        [DataMember(Name="accountClass", EmitDefaultValue=true)]
        public string AccountClass { get; set; }

        /// <summary>
        /// Accounts with a status of ACTIVE can be updated to ARCHIVED. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountStatusCodes&#39;&gt;Account Status Codes&lt;/a&gt;
        /// </summary>
        /// <value>Accounts with a status of ACTIVE can be updated to ARCHIVED. See &lt;a href&#x3D;&#39;https://developer.xero.com/documentation/api/types#AccountStatusCodes&#39;&gt;Account Status Codes&lt;/a&gt;</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Reporting code (Shown if set)
        /// </summary>
        /// <value>Reporting code (Shown if set)</value>
        [DataMember(Name="reportingCode", EmitDefaultValue=true)]
        public string ReportingCode { get; set; }

        /// <summary>
        /// Name of the account
        /// </summary>
        /// <value>Name of the account</value>
        [DataMember(Name="accountName", EmitDefaultValue=true)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public TrialBalanceEntry Balance { get; set; }

        /// <summary>
        /// Value of balance. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative
        /// </summary>
        /// <value>Value of balance. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative</value>
        [DataMember(Name="signedBalance", EmitDefaultValue=false)]
        public double? SignedBalance { get; set; }

        /// <summary>
        /// Gets or Sets AccountMovement
        /// </summary>
        [DataMember(Name="accountMovement", EmitDefaultValue=false)]
        public TrialBalanceMovement AccountMovement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrialBalanceAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountCode: ").Append(AccountCode).Append("\n");
            sb.Append("  AccountClass: ").Append(AccountClass).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReportingCode: ").Append(ReportingCode).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  SignedBalance: ").Append(SignedBalance).Append("\n");
            sb.Append("  AccountMovement: ").Append(AccountMovement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrialBalanceAccount);
        }

        /// <summary>
        /// Returns true if TrialBalanceAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of TrialBalanceAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrialBalanceAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountCode == input.AccountCode ||
                    (this.AccountCode != null &&
                    this.AccountCode.Equals(input.AccountCode))
                ) && 
                (
                    this.AccountClass == input.AccountClass ||
                    (this.AccountClass != null &&
                    this.AccountClass.Equals(input.AccountClass))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ReportingCode == input.ReportingCode ||
                    (this.ReportingCode != null &&
                    this.ReportingCode.Equals(input.ReportingCode))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.SignedBalance == input.SignedBalance ||
                    (this.SignedBalance != null &&
                    this.SignedBalance.Equals(input.SignedBalance))
                ) && 
                (
                    this.AccountMovement == input.AccountMovement ||
                    (this.AccountMovement != null &&
                    this.AccountMovement.Equals(input.AccountMovement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountCode != null)
                    hashCode = hashCode * 59 + this.AccountCode.GetHashCode();
                if (this.AccountClass != null)
                    hashCode = hashCode * 59 + this.AccountClass.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ReportingCode != null)
                    hashCode = hashCode * 59 + this.ReportingCode.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.SignedBalance != null)
                    hashCode = hashCode * 59 + this.SignedBalance.GetHashCode();
                if (this.AccountMovement != null)
                    hashCode = hashCode * 59 + this.AccountMovement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
