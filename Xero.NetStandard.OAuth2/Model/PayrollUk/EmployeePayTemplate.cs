/* 
 * Xero Payroll UK
 *
 * This is the Xero Payroll API for orgs in the UK region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.PayrollUk
{
    /// <summary>
    /// EmployeePayTemplate
    /// </summary>
    [DataContract]
    public partial class EmployeePayTemplate : IEquatable<EmployeePayTemplate>, IValidatableObject
    {

        /// <summary>
        /// Unique identifier for the employee
        /// </summary>
        /// <value>Unique identifier for the employee</value>
        [DataMember(Name = "employeeID", EmitDefaultValue = false)]
        public Guid? EmployeeID { get; set; }

        /// <summary>
        /// Gets or Sets EarningTemplates
        /// </summary>
        [DataMember(Name = "earningTemplates", EmitDefaultValue = false)]
        public List<EarningsTemplate> EarningTemplates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmployeePayTemplate {\n");
            sb.Append("  EmployeeID: ").Append(EmployeeID).Append("\n");
            sb.Append("  EarningTemplates: ").Append(EarningTemplates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmployeePayTemplate);
        }

        /// <summary>
        /// Returns true if EmployeePayTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of EmployeePayTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeePayTemplate input)
        {
            if (input == null)
                return false;

            return
                (
                    this.EmployeeID == input.EmployeeID ||
                    (this.EmployeeID != null &&
                    this.EmployeeID.Equals(input.EmployeeID))
                ) &&
                (
                    this.EarningTemplates == input.EarningTemplates ||
                    this.EarningTemplates != null &&
                    input.EarningTemplates != null &&
                    this.EarningTemplates.SequenceEqual(input.EarningTemplates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployeeID != null)
                    hashCode = hashCode * 59 + this.EmployeeID.GetHashCode();
                if (this.EarningTemplates != null)
                    hashCode = hashCode * 59 + this.EarningTemplates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
