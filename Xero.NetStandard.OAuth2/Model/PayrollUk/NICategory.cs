/* 
 * Xero Payroll UK
 *
 * This is the Xero Payroll API for orgs in the UK region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.PayrollUk
{
    /// <summary>
    /// NICategory
    /// </summary>
    [DataContract]
    public partial class NICategory :  IEquatable<NICategory>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets _NiCategory
        /// </summary>
        [DataMember(Name="niCategory", EmitDefaultValue=false)]
        public NICategoryLetter _NiCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NICategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NICategory() 
        { 
        }
        
        /// <summary>
        /// The start date of the NI category (YYYY-MM-DD)
        /// </summary>
        /// <value>The start date of the NI category (YYYY-MM-DD)</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Xero unique identifier for the NI category
        /// </summary>
        /// <value>Xero unique identifier for the NI category</value>
        [DataMember(Name="niCategoryID", EmitDefaultValue=false)]
        public decimal? NiCategoryID { get; set; }

        /// <summary>
        /// The date in which the employee was first employed as a civilian (YYYY-MM-DD)
        /// </summary>
        /// <value>The date in which the employee was first employed as a civilian (YYYY-MM-DD)</value>
        [DataMember(Name="dateFirstEmployedAsCivilian", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DateFirstEmployedAsCivilian { get; set; }

        /// <summary>
        /// The workplace postcode
        /// </summary>
        /// <value>The workplace postcode</value>
        [DataMember(Name="workplacePostcode", EmitDefaultValue=false)]
        public string WorkplacePostcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NICategory {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  _NiCategory: ").Append(_NiCategory).Append("\n");
            sb.Append("  NiCategoryID: ").Append(NiCategoryID).Append("\n");
            sb.Append("  DateFirstEmployedAsCivilian: ").Append(DateFirstEmployedAsCivilian).Append("\n");
            sb.Append("  WorkplacePostcode: ").Append(WorkplacePostcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NICategory);
        }

        /// <summary>
        /// Returns true if NICategory instances are equal
        /// </summary>
        /// <param name="input">Instance of NICategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NICategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this._NiCategory == input._NiCategory ||
                    this._NiCategory.Equals(input._NiCategory)
                ) && 
                (
                    this.NiCategoryID == input.NiCategoryID ||
                    (this.NiCategoryID != null &&
                    this.NiCategoryID.Equals(input.NiCategoryID))
                ) && 
                (
                    this.DateFirstEmployedAsCivilian == input.DateFirstEmployedAsCivilian ||
                    (this.DateFirstEmployedAsCivilian != null &&
                    this.DateFirstEmployedAsCivilian.Equals(input.DateFirstEmployedAsCivilian))
                ) && 
                (
                    this.WorkplacePostcode == input.WorkplacePostcode ||
                    (this.WorkplacePostcode != null &&
                    this.WorkplacePostcode.Equals(input.WorkplacePostcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                hashCode = hashCode * 59 + this._NiCategory.GetHashCode();
                if (this.NiCategoryID != null)
                    hashCode = hashCode * 59 + this.NiCategoryID.GetHashCode();
                if (this.DateFirstEmployedAsCivilian != null)
                    hashCode = hashCode * 59 + this.DateFirstEmployedAsCivilian.GetHashCode();
                if (this.WorkplacePostcode != null)
                    hashCode = hashCode * 59 + this.WorkplacePostcode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
