/* 
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model
{
    /// <summary>
    /// TaxRate
    /// </summary>
    [DataContract]
    public partial class TaxRate :  IEquatable<TaxRate>, IValidatableObject
    {
        /// <summary>
        /// See Status Codes
        /// </summary>
        /// <value>See Status Codes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum DELETED for value: DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED = 2,

            /// <summary>
            /// Enum ARCHIVED for value: ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVED = 3

        }

        /// <summary>
        /// See Status Codes
        /// </summary>
        /// <value>See Status Codes</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// See ReportTaxTypes
        /// </summary>
        /// <value>See ReportTaxTypes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportTaxTypeEnum
        {
            /// <summary>
            /// Enum OUTPUT for value: OUTPUT
            /// </summary>
            [EnumMember(Value = "OUTPUT")]
            OUTPUT = 1,

            /// <summary>
            /// Enum INPUT for value: INPUT
            /// </summary>
            [EnumMember(Value = "INPUT")]
            INPUT = 2,

            /// <summary>
            /// Enum EXEMPTOUTPUT for value: EXEMPTOUTPUT
            /// </summary>
            [EnumMember(Value = "EXEMPTOUTPUT")]
            EXEMPTOUTPUT = 3,

            /// <summary>
            /// Enum INPUTTAXED for value: INPUTTAXED
            /// </summary>
            [EnumMember(Value = "INPUTTAXED")]
            INPUTTAXED = 4,

            /// <summary>
            /// Enum BASEXCLUDED for value: BASEXCLUDED
            /// </summary>
            [EnumMember(Value = "BASEXCLUDED")]
            BASEXCLUDED = 5,

            /// <summary>
            /// Enum EXEMPTEXPENSES for value: EXEMPTEXPENSES
            /// </summary>
            [EnumMember(Value = "EXEMPTEXPENSES")]
            EXEMPTEXPENSES = 6,

            /// <summary>
            /// Enum EXEMPTINPUT for value: EXEMPTINPUT
            /// </summary>
            [EnumMember(Value = "EXEMPTINPUT")]
            EXEMPTINPUT = 7,

            /// <summary>
            /// Enum ECOUTPUT for value: ECOUTPUT
            /// </summary>
            [EnumMember(Value = "ECOUTPUT")]
            ECOUTPUT = 8,

            /// <summary>
            /// Enum ECOUTPUTSERVICES for value: ECOUTPUTSERVICES
            /// </summary>
            [EnumMember(Value = "ECOUTPUTSERVICES")]
            ECOUTPUTSERVICES = 9,

            /// <summary>
            /// Enum ECINPUT for value: ECINPUT
            /// </summary>
            [EnumMember(Value = "ECINPUT")]
            ECINPUT = 10,

            /// <summary>
            /// Enum ECACQUISITIONS for value: ECACQUISITIONS
            /// </summary>
            [EnumMember(Value = "ECACQUISITIONS")]
            ECACQUISITIONS = 11,

            /// <summary>
            /// Enum CAPITALSALESOUTPUT for value: CAPITALSALESOUTPUT
            /// </summary>
            [EnumMember(Value = "CAPITALSALESOUTPUT")]
            CAPITALSALESOUTPUT = 12,

            /// <summary>
            /// Enum CAPITALEXPENSESINPUT for value: CAPITALEXPENSESINPUT
            /// </summary>
            [EnumMember(Value = "CAPITALEXPENSESINPUT")]
            CAPITALEXPENSESINPUT = 13,

            /// <summary>
            /// Enum MOSSSALES for value: MOSSSALES
            /// </summary>
            [EnumMember(Value = "MOSSSALES")]
            MOSSSALES = 14,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 15,

            /// <summary>
            /// Enum GSTONIMPORTS for value: GSTONIMPORTS
            /// </summary>
            [EnumMember(Value = "GSTONIMPORTS")]
            GSTONIMPORTS = 16

        }

        /// <summary>
        /// See ReportTaxTypes
        /// </summary>
        /// <value>See ReportTaxTypes</value>
        [DataMember(Name="ReportTaxType", EmitDefaultValue=false)]
        public ReportTaxTypeEnum ReportTaxType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TaxRate() { }
        
        /// <summary>
        /// Name of tax rate
        /// </summary>
        /// <value>Name of tax rate</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The tax type
        /// </summary>
        /// <value>The tax type</value>
        [DataMember(Name="TaxType", EmitDefaultValue=false)]
        public string TaxType { get; set; }

        /// <summary>
        /// See TaxComponents
        /// </summary>
        /// <value>See TaxComponents</value>
        [DataMember(Name="TaxComponents", EmitDefaultValue=false)]
        public List<TaxComponent> TaxComponents { get; set; }

        /// <summary>
        /// Boolean to describe if tax rate can be used for asset accounts i.e.  true,false
        /// </summary>
        /// <value>Boolean to describe if tax rate can be used for asset accounts i.e.  true,false</value>
        [DataMember(Name="CanApplyToAssets", EmitDefaultValue=false)]
        public bool? CanApplyToAssets { get; private set; }

        /// <summary>
        /// Boolean to describe if tax rate can be used for equity accounts i.e true,false
        /// </summary>
        /// <value>Boolean to describe if tax rate can be used for equity accounts i.e true,false</value>
        [DataMember(Name="CanApplyToEquity", EmitDefaultValue=false)]
        public bool? CanApplyToEquity { get; private set; }

        /// <summary>
        /// Boolean to describe if tax rate can be used for expense accounts  i.e. true,false
        /// </summary>
        /// <value>Boolean to describe if tax rate can be used for expense accounts  i.e. true,false</value>
        [DataMember(Name="CanApplyToExpenses", EmitDefaultValue=false)]
        public bool? CanApplyToExpenses { get; private set; }

        /// <summary>
        /// Boolean to describe if tax rate can be used for liability accounts  i.e. true,false
        /// </summary>
        /// <value>Boolean to describe if tax rate can be used for liability accounts  i.e. true,false</value>
        [DataMember(Name="CanApplyToLiabilities", EmitDefaultValue=false)]
        public bool? CanApplyToLiabilities { get; private set; }

        /// <summary>
        /// Boolean to describe if tax rate can be used for revenue accounts i.e. true,false
        /// </summary>
        /// <value>Boolean to describe if tax rate can be used for revenue accounts i.e. true,false</value>
        [DataMember(Name="CanApplyToRevenue", EmitDefaultValue=false)]
        public bool? CanApplyToRevenue { get; private set; }

        /// <summary>
        /// Tax Rate (decimal to 4dp) e.g 12.5000
        /// </summary>
        /// <value>Tax Rate (decimal to 4dp) e.g 12.5000</value>
        [DataMember(Name="DisplayTaxRate", EmitDefaultValue=false)]
        public double? DisplayTaxRate { get; private set; }

        /// <summary>
        /// Effective Tax Rate (decimal to 4dp) e.g 12.5000
        /// </summary>
        /// <value>Effective Tax Rate (decimal to 4dp) e.g 12.5000</value>
        [DataMember(Name="EffectiveRate", EmitDefaultValue=false)]
        public double? EffectiveRate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxRate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxComponents: ").Append(TaxComponents).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ReportTaxType: ").Append(ReportTaxType).Append("\n");
            sb.Append("  CanApplyToAssets: ").Append(CanApplyToAssets).Append("\n");
            sb.Append("  CanApplyToEquity: ").Append(CanApplyToEquity).Append("\n");
            sb.Append("  CanApplyToExpenses: ").Append(CanApplyToExpenses).Append("\n");
            sb.Append("  CanApplyToLiabilities: ").Append(CanApplyToLiabilities).Append("\n");
            sb.Append("  CanApplyToRevenue: ").Append(CanApplyToRevenue).Append("\n");
            sb.Append("  DisplayTaxRate: ").Append(DisplayTaxRate).Append("\n");
            sb.Append("  EffectiveRate: ").Append(EffectiveRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxRate);
        }

        /// <summary>
        /// Returns true if TaxRate instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TaxType == input.TaxType ||
                    (this.TaxType != null &&
                    this.TaxType.Equals(input.TaxType))
                ) && 
                (
                    this.TaxComponents == input.TaxComponents ||
                    this.TaxComponents != null &&
                    input.TaxComponents != null &&
                    this.TaxComponents.SequenceEqual(input.TaxComponents)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ReportTaxType == input.ReportTaxType ||
                    this.ReportTaxType.Equals(input.ReportTaxType)
                ) && 
                (
                    this.CanApplyToAssets == input.CanApplyToAssets ||
                    this.CanApplyToAssets.Equals(input.CanApplyToAssets)
                ) && 
                (
                    this.CanApplyToEquity == input.CanApplyToEquity ||
                    this.CanApplyToEquity.Equals(input.CanApplyToEquity)
                ) && 
                (
                    this.CanApplyToExpenses == input.CanApplyToExpenses ||
                    this.CanApplyToExpenses.Equals(input.CanApplyToExpenses)
                ) && 
                (
                    this.CanApplyToLiabilities == input.CanApplyToLiabilities ||
                    this.CanApplyToLiabilities.Equals(input.CanApplyToLiabilities)
                ) && 
                (
                    this.CanApplyToRevenue == input.CanApplyToRevenue ||
                    this.CanApplyToRevenue.Equals(input.CanApplyToRevenue)
                ) && 
                (
                    this.DisplayTaxRate == input.DisplayTaxRate ||
                    this.DisplayTaxRate.Equals(input.DisplayTaxRate)
                ) && 
                (
                    this.EffectiveRate == input.EffectiveRate ||
                    this.EffectiveRate.Equals(input.EffectiveRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TaxType != null)
                    hashCode = hashCode * 59 + this.TaxType.GetHashCode();
                if (this.TaxComponents != null)
                    hashCode = hashCode * 59 + this.TaxComponents.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.ReportTaxType.GetHashCode();
                hashCode = hashCode * 59 + this.CanApplyToAssets.GetHashCode();
                hashCode = hashCode * 59 + this.CanApplyToEquity.GetHashCode();
                hashCode = hashCode * 59 + this.CanApplyToExpenses.GetHashCode();
                hashCode = hashCode * 59 + this.CanApplyToLiabilities.GetHashCode();
                hashCode = hashCode * 59 + this.CanApplyToRevenue.GetHashCode();
                hashCode = hashCode * 59 + this.DisplayTaxRate.GetHashCode();
                hashCode = hashCode * 59 + this.EffectiveRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
