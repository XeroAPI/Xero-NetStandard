/* 
 * Xero Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Accounting
{
    /// <summary>
    /// TaxBreakdownComponent
    /// </summary>
    [DataContract]
    public partial class TaxBreakdownComponent : IEquatable<TaxBreakdownComponent>, IValidatableObject
    {
        /// <summary>
        /// The type of the jurisdiction
        /// </summary>
        /// <value>The type of the jurisdiction</value>
        [JsonConverter(typeof(Client.CustomStringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum USCOUNTRY for value: SYSGST/USCOUNTRY
            /// </summary>
            [EnumMember(Value = "SYSGST/USCOUNTRY")]
            USCOUNTRY = 1,

            /// <summary>
            /// Enum USSTATE for value: SYSGST/USSTATE
            /// </summary>
            [EnumMember(Value = "SYSGST/USSTATE")]
            USSTATE = 2,

            /// <summary>
            /// Enum USCOUNTY for value: SYSGST/USCOUNTY
            /// </summary>
            [EnumMember(Value = "SYSGST/USCOUNTY")]
            USCOUNTY = 3,

            /// <summary>
            /// Enum USCITY for value: SYSGST/USCITY
            /// </summary>
            [EnumMember(Value = "SYSGST/USCITY")]
            USCITY = 4,

            /// <summary>
            /// Enum USSPECIAL for value: SYSGST/USSPECIAL
            /// </summary>
            [EnumMember(Value = "SYSGST/USSPECIAL")]
            USSPECIAL = 5

        }

        /// <summary>
        /// The type of the jurisdiction
        /// </summary>
        /// <value>The type of the jurisdiction</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The unique ID number of this component
        /// </summary>
        /// <value>The unique ID number of this component</value>
        [DataMember(Name = "TaxComponentId", EmitDefaultValue = false)]
        public Guid? TaxComponentId { get; set; }

        /// <summary>
        /// The name of the jurisdiction
        /// </summary>
        /// <value>The name of the jurisdiction</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The percentage of the tax
        /// </summary>
        /// <value>The percentage of the tax</value>
        [DataMember(Name = "TaxPercentage", EmitDefaultValue = false)]
        public decimal? TaxPercentage { get; set; }

        /// <summary>
        /// The amount of the tax
        /// </summary>
        /// <value>The amount of the tax</value>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public decimal? TaxAmount { get; set; }

        /// <summary>
        /// The amount that is taxable
        /// </summary>
        /// <value>The amount that is taxable</value>
        [DataMember(Name = "TaxableAmount", EmitDefaultValue = false)]
        public decimal? TaxableAmount { get; set; }

        /// <summary>
        /// The amount that is not taxable
        /// </summary>
        /// <value>The amount that is not taxable</value>
        [DataMember(Name = "NonTaxableAmount", EmitDefaultValue = false)]
        public decimal? NonTaxableAmount { get; set; }

        /// <summary>
        /// The amount that is exempt
        /// </summary>
        /// <value>The amount that is exempt</value>
        [DataMember(Name = "ExemptAmount", EmitDefaultValue = false)]
        public decimal? ExemptAmount { get; set; }

        /// <summary>
        /// The state assigned number of the jurisdiction
        /// </summary>
        /// <value>The state assigned number of the jurisdiction</value>
        [DataMember(Name = "StateAssignedNo", EmitDefaultValue = false)]
        public string StateAssignedNo { get; set; }

        /// <summary>
        /// Name identifying the region within the country
        /// </summary>
        /// <value>Name identifying the region within the country</value>
        [DataMember(Name = "JurisdictionRegion", EmitDefaultValue = false)]
        public string JurisdictionRegion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxBreakdownComponent {\n");
            sb.Append("  TaxComponentId: ").Append(TaxComponentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  NonTaxableAmount: ").Append(NonTaxableAmount).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  StateAssignedNo: ").Append(StateAssignedNo).Append("\n");
            sb.Append("  JurisdictionRegion: ").Append(JurisdictionRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxBreakdownComponent);
        }

        /// <summary>
        /// Returns true if TaxBreakdownComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxBreakdownComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxBreakdownComponent input)
        {
            if (input == null)
                return false;

            return
                (
                    this.TaxComponentId == input.TaxComponentId ||
                    (this.TaxComponentId != null &&
                    this.TaxComponentId.Equals(input.TaxComponentId))
                ) &&
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.TaxPercentage == input.TaxPercentage ||
                    (this.TaxPercentage != null &&
                    this.TaxPercentage.Equals(input.TaxPercentage))
                ) &&
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) &&
                (
                    this.TaxableAmount == input.TaxableAmount ||
                    (this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(input.TaxableAmount))
                ) &&
                (
                    this.NonTaxableAmount == input.NonTaxableAmount ||
                    (this.NonTaxableAmount != null &&
                    this.NonTaxableAmount.Equals(input.NonTaxableAmount))
                ) &&
                (
                    this.ExemptAmount == input.ExemptAmount ||
                    (this.ExemptAmount != null &&
                    this.ExemptAmount.Equals(input.ExemptAmount))
                ) &&
                (
                    this.StateAssignedNo == input.StateAssignedNo ||
                    (this.StateAssignedNo != null &&
                    this.StateAssignedNo.Equals(input.StateAssignedNo))
                ) &&
                (
                    this.JurisdictionRegion == input.JurisdictionRegion ||
                    (this.JurisdictionRegion != null &&
                    this.JurisdictionRegion.Equals(input.JurisdictionRegion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaxComponentId != null)
                    hashCode = hashCode * 59 + this.TaxComponentId.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TaxPercentage != null)
                    hashCode = hashCode * 59 + this.TaxPercentage.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxableAmount != null)
                    hashCode = hashCode * 59 + this.TaxableAmount.GetHashCode();
                if (this.NonTaxableAmount != null)
                    hashCode = hashCode * 59 + this.NonTaxableAmount.GetHashCode();
                if (this.ExemptAmount != null)
                    hashCode = hashCode * 59 + this.ExemptAmount.GetHashCode();
                if (this.StateAssignedNo != null)
                    hashCode = hashCode * 59 + this.StateAssignedNo.GetHashCode();
                if (this.JurisdictionRegion != null)
                    hashCode = hashCode * 59 + this.JurisdictionRegion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
