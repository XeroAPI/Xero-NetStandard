/* 
 * Xero AppStore API
 *
 * These endpoints are for Xero Partners to interact with the App Store Billing platform
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.Appstore
{
    /// <summary>
    /// UsageRecord
    /// </summary>
    [DataContract]
    public partial class UsageRecord : IEquatable<UsageRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public UsageRecord()
        {
        }

        /// <summary>
        /// The quantity recorded
        /// </summary>
        /// <value>The quantity recorded</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// The unique identifier of the Subscription.
        /// </summary>
        /// <value>The unique identifier of the Subscription.</value>
        [DataMember(Name = "subscriptionId", EmitDefaultValue = false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The unique identifier of the SubscriptionItem.
        /// </summary>
        /// <value>The unique identifier of the SubscriptionItem.</value>
        [DataMember(Name = "subscriptionItemId", EmitDefaultValue = false)]
        public string SubscriptionItemId { get; set; }

        /// <summary>
        /// If the subscription is a test subscription
        /// </summary>
        /// <value>If the subscription is a test subscription</value>
        [DataMember(Name = "testMode", EmitDefaultValue = false)]
        public bool? TestMode { get; set; }

        /// <summary>
        /// The time when this usage was recorded in UTC
        /// </summary>
        /// <value>The time when this usage was recorded in UTC</value>
        [DataMember(Name = "recordedAt", EmitDefaultValue = false)]
        public DateTime? RecordedAt { get; set; }

        /// <summary>
        /// The unique identifier of the usageRecord.
        /// </summary>
        /// <value>The unique identifier of the usageRecord.</value>
        [DataMember(Name = "usageRecordId", EmitDefaultValue = false)]
        public string UsageRecordId { get; set; }

        /// <summary>
        /// The price per unit
        /// </summary>
        /// <value>The price per unit</value>
        [DataMember(Name = "pricePerUnit", EmitDefaultValue = false)]
        public decimal? PricePerUnit { get; set; }

        /// <summary>
        /// The unique identifier of the linked Product
        /// </summary>
        /// <value>The unique identifier of the linked Product</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsageRecord {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionItemId: ").Append(SubscriptionItemId).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  RecordedAt: ").Append(RecordedAt).Append("\n");
            sb.Append("  UsageRecordId: ").Append(UsageRecordId).Append("\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsageRecord);
        }

        /// <summary>
        /// Returns true if UsageRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of UsageRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageRecord input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) &&
                (
                    this.SubscriptionItemId == input.SubscriptionItemId ||
                    (this.SubscriptionItemId != null &&
                    this.SubscriptionItemId.Equals(input.SubscriptionItemId))
                ) &&
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                ) &&
                (
                    this.RecordedAt == input.RecordedAt ||
                    (this.RecordedAt != null &&
                    this.RecordedAt.Equals(input.RecordedAt))
                ) &&
                (
                    this.UsageRecordId == input.UsageRecordId ||
                    (this.UsageRecordId != null &&
                    this.UsageRecordId.Equals(input.UsageRecordId))
                ) &&
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    (this.PricePerUnit != null &&
                    this.PricePerUnit.Equals(input.PricePerUnit))
                ) &&
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                if (this.SubscriptionItemId != null)
                    hashCode = hashCode * 59 + this.SubscriptionItemId.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                if (this.RecordedAt != null)
                    hashCode = hashCode * 59 + this.RecordedAt.GetHashCode();
                if (this.UsageRecordId != null)
                    hashCode = hashCode * 59 + this.UsageRecordId.GetHashCode();
                if (this.PricePerUnit != null)
                    hashCode = hashCode * 59 + this.PricePerUnit.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
