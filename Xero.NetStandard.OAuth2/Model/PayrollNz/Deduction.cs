/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Xero.NetStandard.OAuth2.Client.OpenAPIDateConverter;

namespace Xero.NetStandard.OAuth2.Model.PayrollNz
{
    /// <summary>
    /// Deduction
    /// </summary>
    [DataContract]
    public partial class Deduction :  IEquatable<Deduction>, IValidatableObject
    {
        /// <summary>
        /// Deduction Category type
        /// </summary>
        /// <value>Deduction Category type</value>
        [JsonConverter(typeof(Client.CustomStringEnumConverter))]
        public enum DeductionCategoryEnum
        {
            /// <summary>
            /// Enum PayrollGiving for value: PayrollGiving
            /// </summary>
            [EnumMember(Value = "PayrollGiving")]
            PayrollGiving = 1,

            /// <summary>
            /// Enum KiwiSaverVoluntaryContributions for value: KiwiSaverVoluntaryContributions
            /// </summary>
            [EnumMember(Value = "KiwiSaverVoluntaryContributions")]
            KiwiSaverVoluntaryContributions = 2,

            /// <summary>
            /// Enum Superannuation for value: Superannuation
            /// </summary>
            [EnumMember(Value = "Superannuation")]
            Superannuation = 3,

            /// <summary>
            /// Enum NzOther for value: NzOther
            /// </summary>
            [EnumMember(Value = "NzOther")]
            NzOther = 4,

            /// <summary>
            /// Enum UnknownDefaultOpenApi for value: unknown_default_open_api
            /// </summary>
            [EnumMember(Value = "unknown_default_open_api")]
            UnknownDefaultOpenApi = 5

        }

        /// <summary>
        /// Deduction Category type
        /// </summary>
        /// <value>Deduction Category type</value>
        [DataMember(Name="deductionCategory", EmitDefaultValue=false)]
        public DeductionCategoryEnum DeductionCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Deduction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public Deduction() 
        { 
        }
        
        /// <summary>
        /// The Xero identifier for Deduction
        /// </summary>
        /// <value>The Xero identifier for Deduction</value>
        [DataMember(Name="deductionId", EmitDefaultValue=false)]
        public Guid? DeductionId { get; set; }

        /// <summary>
        /// Name of the deduction
        /// </summary>
        /// <value>Name of the deduction</value>
        [DataMember(Name="deductionName", EmitDefaultValue=false)]
        public string DeductionName { get; set; }

        /// <summary>
        /// Xero identifier for Liability Account
        /// </summary>
        /// <value>Xero identifier for Liability Account</value>
        [DataMember(Name="liabilityAccountId", EmitDefaultValue=false)]
        public Guid? LiabilityAccountId { get; set; }

        /// <summary>
        /// Identifier of a record is active or not.
        /// </summary>
        /// <value>Identifier of a record is active or not.</value>
        [DataMember(Name="currentRecord", EmitDefaultValue=false)]
        public bool? CurrentRecord { get; set; }

        /// <summary>
        /// Standard amount of the deduction.
        /// </summary>
        /// <value>Standard amount of the deduction.</value>
        [DataMember(Name="standardAmount", EmitDefaultValue=false)]
        public decimal? StandardAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Deduction {\n");
            sb.Append("  DeductionId: ").Append(DeductionId).Append("\n");
            sb.Append("  DeductionName: ").Append(DeductionName).Append("\n");
            sb.Append("  DeductionCategory: ").Append(DeductionCategory).Append("\n");
            sb.Append("  LiabilityAccountId: ").Append(LiabilityAccountId).Append("\n");
            sb.Append("  CurrentRecord: ").Append(CurrentRecord).Append("\n");
            sb.Append("  StandardAmount: ").Append(StandardAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Deduction);
        }

        /// <summary>
        /// Returns true if Deduction instances are equal
        /// </summary>
        /// <param name="input">Instance of Deduction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Deduction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeductionId == input.DeductionId ||
                    (this.DeductionId != null &&
                    this.DeductionId.Equals(input.DeductionId))
                ) && 
                (
                    this.DeductionName == input.DeductionName ||
                    (this.DeductionName != null &&
                    this.DeductionName.Equals(input.DeductionName))
                ) && 
                (
                    this.DeductionCategory == input.DeductionCategory ||
                    this.DeductionCategory.Equals(input.DeductionCategory)
                ) && 
                (
                    this.LiabilityAccountId == input.LiabilityAccountId ||
                    (this.LiabilityAccountId != null &&
                    this.LiabilityAccountId.Equals(input.LiabilityAccountId))
                ) && 
                (
                    this.CurrentRecord == input.CurrentRecord ||
                    (this.CurrentRecord != null &&
                    this.CurrentRecord.Equals(input.CurrentRecord))
                ) && 
                (
                    this.StandardAmount == input.StandardAmount ||
                    (this.StandardAmount != null &&
                    this.StandardAmount.Equals(input.StandardAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeductionId != null)
                    hashCode = hashCode * 59 + this.DeductionId.GetHashCode();
                if (this.DeductionName != null)
                    hashCode = hashCode * 59 + this.DeductionName.GetHashCode();
                hashCode = hashCode * 59 + this.DeductionCategory.GetHashCode();
                if (this.LiabilityAccountId != null)
                    hashCode = hashCode * 59 + this.LiabilityAccountId.GetHashCode();
                if (this.CurrentRecord != null)
                    hashCode = hashCode * 59 + this.CurrentRecord.GetHashCode();
                if (this.StandardAmount != null)
                    hashCode = hashCode * 59 + this.StandardAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
