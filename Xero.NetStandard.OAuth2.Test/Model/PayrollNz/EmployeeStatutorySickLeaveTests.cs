/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollNz;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollNz
{
    /// <summary>
    ///  Class for testing EmployeeStatutorySickLeave
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class EmployeeStatutorySickLeaveTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for EmployeeStatutorySickLeave
        //private EmployeeStatutorySickLeave instance;

        public EmployeeStatutorySickLeaveTests()
        {
            // TODO uncomment below to create an instance of EmployeeStatutorySickLeave
            //instance = new EmployeeStatutorySickLeave();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EmployeeStatutorySickLeave
        /// </summary>
        [Fact]
        public void EmployeeStatutorySickLeaveInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" EmployeeStatutorySickLeave
            //Assert.IsInstanceOfType<EmployeeStatutorySickLeave> (instance, "variable 'instance' is a EmployeeStatutorySickLeave");
        }


        /// <summary>
        /// Test the property 'StatutoryLeaveID'
        /// </summary>
        [Fact]
        public void StatutoryLeaveIDTest()
        {
            // TODO unit test for the property 'StatutoryLeaveID'
        }
        /// <summary>
        /// Test the property 'EmployeeID'
        /// </summary>
        [Fact]
        public void EmployeeIDTest()
        {
            // TODO unit test for the property 'EmployeeID'
        }
        /// <summary>
        /// Test the property 'LeaveTypeID'
        /// </summary>
        [Fact]
        public void LeaveTypeIDTest()
        {
            // TODO unit test for the property 'LeaveTypeID'
        }
        /// <summary>
        /// Test the property 'StartDate'
        /// </summary>
        [Fact]
        public void StartDateTest()
        {
            // TODO unit test for the property 'StartDate'
        }
        /// <summary>
        /// Test the property 'EndDate'
        /// </summary>
        [Fact]
        public void EndDateTest()
        {
            // TODO unit test for the property 'EndDate'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }
        /// <summary>
        /// Test the property 'WorkPattern'
        /// </summary>
        [Fact]
        public void WorkPatternTest()
        {
            // TODO unit test for the property 'WorkPattern'
        }
        /// <summary>
        /// Test the property 'IsPregnancyRelated'
        /// </summary>
        [Fact]
        public void IsPregnancyRelatedTest()
        {
            // TODO unit test for the property 'IsPregnancyRelated'
        }
        /// <summary>
        /// Test the property 'SufficientNotice'
        /// </summary>
        [Fact]
        public void SufficientNoticeTest()
        {
            // TODO unit test for the property 'SufficientNotice'
        }
        /// <summary>
        /// Test the property 'IsEntitled'
        /// </summary>
        [Fact]
        public void IsEntitledTest()
        {
            // TODO unit test for the property 'IsEntitled'
        }
        /// <summary>
        /// Test the property 'EntitlementWeeksRequested'
        /// </summary>
        [Fact]
        public void EntitlementWeeksRequestedTest()
        {
            // TODO unit test for the property 'EntitlementWeeksRequested'
        }
        /// <summary>
        /// Test the property 'EntitlementWeeksQualified'
        /// </summary>
        [Fact]
        public void EntitlementWeeksQualifiedTest()
        {
            // TODO unit test for the property 'EntitlementWeeksQualified'
        }
        /// <summary>
        /// Test the property 'EntitlementWeeksRemaining'
        /// </summary>
        [Fact]
        public void EntitlementWeeksRemainingTest()
        {
            // TODO unit test for the property 'EntitlementWeeksRemaining'
        }
        /// <summary>
        /// Test the property 'OverlapsWithOtherLeave'
        /// </summary>
        [Fact]
        public void OverlapsWithOtherLeaveTest()
        {
            // TODO unit test for the property 'OverlapsWithOtherLeave'
        }
        /// <summary>
        /// Test the property 'EntitlementFailureReasons'
        /// </summary>
        [Theory]
        [InlineData("AweLowerThanLel", EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.AweLowerThanLel)]
        [InlineData("ExceededMaximumDurationOfPiw", EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.ExceededMaximumDurationOfPiw)]
        [InlineData("ExceededMaximumEntitlementWeeksOfSsp", EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.ExceededMaximumEntitlementWeeksOfSsp)]
        [InlineData("NotQualifiedInPreviousPiw", EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.NotQualifiedInPreviousPiw)]
        [InlineData("SufficientNoticeNotGiven", EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.SufficientNoticeNotGiven)]
        [InlineData("UnableToCalculateAwe", EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum.UnableToCalculateAwe)]
        public async Task EntitlementFailureReasonsEnum_ValidInput_Deserialises(string input, EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum expected)
        {
            var jsonContent = $@"""{input}""";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum>(response);
            Assert.Equal(expected, actual);
        }

        [Fact]
        public async Task EntitlementFailureReasonsEnum_NullInput_Deserialises()
        {
            var jsonContent = "null";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<EmployeeStatutorySickLeave.EntitlementFailureReasonsEnum>(response);
            Assert.Equal(0, (int)actual);

        }

    }

}
