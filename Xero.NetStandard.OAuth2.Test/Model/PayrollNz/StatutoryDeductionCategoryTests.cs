/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollNz;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollNz
{
    /// <summary>
    ///  Class for testing StatutoryDeductionCategory
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class StatutoryDeductionCategoryTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for StatutoryDeductionCategory
        //private StatutoryDeductionCategory instance;

        public StatutoryDeductionCategoryTests()
        {
            // TODO uncomment below to create an instance of StatutoryDeductionCategory
            //instance = new StatutoryDeductionCategory();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of StatutoryDeductionCategory
        /// </summary>
        [Theory]
        [InlineData("AdditionalStudentLoan", StatutoryDeductionCategory.AdditionalStudentLoan)]
        [InlineData("ChildSupport", StatutoryDeductionCategory.ChildSupport)]
        [InlineData("CourtFines", StatutoryDeductionCategory.CourtFines)]
        [InlineData("InlandRevenueArrears", StatutoryDeductionCategory.InlandRevenueArrears)]
        [InlineData("KiwiSaver", StatutoryDeductionCategory.KiwiSaver)]
        [InlineData("MsdRepayments", StatutoryDeductionCategory.MsdRepayments)]
        [InlineData("NonPriorityOrder", StatutoryDeductionCategory.NonPriorityOrder)]
        [InlineData("PriorityOrder", StatutoryDeductionCategory.PriorityOrder)]
        [InlineData("StudentLoan", StatutoryDeductionCategory.StudentLoan)]
        [InlineData("TableBased", StatutoryDeductionCategory.TableBased)]
        [InlineData("VoluntaryStudentLoan", StatutoryDeductionCategory.VoluntaryStudentLoan)]
        public async Task StatutoryDeductionCategory_ValidInput_Deserialises(string input, StatutoryDeductionCategory expected)
        {
            var jsonContent = $@"""{input}""";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<StatutoryDeductionCategory>(response);
            Assert.Equal(expected, actual);
        }

        [Fact]
        public async Task StatutoryDeductionCategory_NullInput_Deserialises()
        {
            var jsonContent = "null";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<StatutoryDeductionCategory>(response);
            Assert.Equal(0, (int)actual);
        }



    }

}
