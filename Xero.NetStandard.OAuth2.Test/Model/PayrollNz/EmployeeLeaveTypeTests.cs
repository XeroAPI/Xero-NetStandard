/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollNz;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollNz
{
    /// <summary>
    ///  Class for testing EmployeeLeaveType
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class EmployeeLeaveTypeTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for EmployeeLeaveType
        //private EmployeeLeaveType instance;

        public EmployeeLeaveTypeTests()
        {
            // TODO uncomment below to create an instance of EmployeeLeaveType
            //instance = new EmployeeLeaveType();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EmployeeLeaveType
        /// </summary>
        [Fact]
        public void EmployeeLeaveTypeInstanceTest()
        {

            // TODO uncomment below to test "IsInstanceOfType" EmployeeLeaveType
            //Assert.IsInstanceOfType<EmployeeLeaveType> (instance, "variable 'instance' is a EmployeeLeaveType");
        }


        /// <summary>
        /// Test the property 'LeaveTypeID'
        /// </summary>
        [Fact]
        public void LeaveTypeIDTest()
        {
            // TODO unit test for the property 'LeaveTypeID'
        }
        /// <summary>
        /// Test the property 'ScheduleOfAccrual'
        /// </summary>
        [Theory]
        [InlineData("AnnuallyAfter6Months", EmployeeLeaveType.ScheduleOfAccrualEnum.AnnuallyAfter6Months)]
        [InlineData("NoAccruals", EmployeeLeaveType.ScheduleOfAccrualEnum.NoAccruals)]
        [InlineData("OnAnniversaryDate", EmployeeLeaveType.ScheduleOfAccrualEnum.OnAnniversaryDate)]
        [InlineData("PercentageOfGrossEarnings", EmployeeLeaveType.ScheduleOfAccrualEnum.PercentageOfGrossEarnings)]
        public async Task ScheduleOfAccrualEnum_ValidInput_Deserialises(string input, EmployeeLeaveType.ScheduleOfAccrualEnum expected)
        {
            var jsonContent = $@"""{input}""";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<EmployeeLeaveType.ScheduleOfAccrualEnum>(response);
            Assert.Equal(expected, actual);
        }

        [Fact]
        public async Task ScheduleOfAccrualEnum_NullInput_Deserialises()
        {
            var jsonContent = "null";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<EmployeeLeaveType.ScheduleOfAccrualEnum>(response);
            Assert.Equal(0, (int)actual);
        }
        /// <summary>
        /// Test the property 'HoursAccruedAnnually'
        /// </summary>
        [Fact]
        public void HoursAccruedAnnuallyTest()
        {
            // TODO unit test for the property 'HoursAccruedAnnually'
        }
        /// <summary>
        /// Test the property 'MaximumToAccrue'
        /// </summary>
        [Fact]
        public void MaximumToAccrueTest()
        {
            // TODO unit test for the property 'MaximumToAccrue'
        }
        /// <summary>
        /// Test the property 'OpeningBalance'
        /// </summary>
        [Fact]
        public void OpeningBalanceTest()
        {
            // TODO unit test for the property 'OpeningBalance'
        }
        /// <summary>
        /// Test the property 'RateAccruedHourly'
        /// </summary>
        [Fact]
        public void RateAccruedHourlyTest()
        {
            // TODO unit test for the property 'RateAccruedHourly'
        }
        /// <summary>
        /// Test the property 'PercentageOfGrossEarnings'
        /// </summary>
        [Fact]
        public void PercentageOfGrossEarningsTest()
        {
            // TODO unit test for the property 'PercentageOfGrossEarnings'
        }
        /// <summary>
        /// Test the property 'IncludeHolidayPayEveryPay'
        /// </summary>
        [Fact]
        public void IncludeHolidayPayEveryPayTest()
        {
            // TODO unit test for the property 'IncludeHolidayPayEveryPay'
        }
        /// <summary>
        /// Test the property 'ShowAnnualLeaveInAdvance'
        /// </summary>
        [Fact]
        public void ShowAnnualLeaveInAdvanceTest()
        {
            // TODO unit test for the property 'ShowAnnualLeaveInAdvance'
        }
        /// <summary>
        /// Test the property 'AnnualLeaveTotalAmountPaid'
        /// </summary>
        [Fact]
        public void AnnualLeaveTotalAmountPaidTest()
        {
            // TODO unit test for the property 'AnnualLeaveTotalAmountPaid'
        }

    }

}
