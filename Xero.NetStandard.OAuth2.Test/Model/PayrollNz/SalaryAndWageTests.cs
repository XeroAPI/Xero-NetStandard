/* 
 * Xero Payroll NZ
 *
 * This is the Xero Payroll API for orgs in the NZ region.
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollNz;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollNz
{
    /// <summary>
    ///  Class for testing SalaryAndWage
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SalaryAndWageTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SalaryAndWage
        //private SalaryAndWage instance;

        public SalaryAndWageTests()
        {
            // TODO uncomment below to create an instance of SalaryAndWage
            //instance = new SalaryAndWage();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SalaryAndWage
        /// </summary>
        [Fact]
        public void SalaryAndWageInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" SalaryAndWage
            //Assert.IsInstanceOfType<SalaryAndWage> (instance, "variable 'instance' is a SalaryAndWage");
        }


        /// <summary>
        /// Test the property 'SalaryAndWagesID'
        /// </summary>
        [Fact]
        public void SalaryAndWagesIDTest()
        {
            // TODO unit test for the property 'SalaryAndWagesID'
        }
        /// <summary>
        /// Test the property 'EarningsRateID'
        /// </summary>
        [Fact]
        public void EarningsRateIDTest()
        {
            // TODO unit test for the property 'EarningsRateID'
        }
        /// <summary>
        /// Test the property 'NumberOfUnitsPerWeek'
        /// </summary>
        [Fact]
        public void NumberOfUnitsPerWeekTest()
        {
            // TODO unit test for the property 'NumberOfUnitsPerWeek'
        }
        /// <summary>
        /// Test the property 'RatePerUnit'
        /// </summary>
        [Fact]
        public void RatePerUnitTest()
        {
            // TODO unit test for the property 'RatePerUnit'
        }
        /// <summary>
        /// Test the property 'NumberOfUnitsPerDay'
        /// </summary>
        [Fact]
        public void NumberOfUnitsPerDayTest()
        {
            // TODO unit test for the property 'NumberOfUnitsPerDay'
        }
        /// <summary>
        /// Test the property 'DaysPerWeek'
        /// </summary>
        [Fact]
        public void DaysPerWeekTest()
        {
            // TODO unit test for the property 'DaysPerWeek'
        }
        /// <summary>
        /// Test the property 'EffectiveFrom'
        /// </summary>
        [Fact]
        public void EffectiveFromTest()
        {
            // TODO unit test for the property 'EffectiveFrom'
        }
        /// <summary>
        /// Test the property 'AnnualSalary'
        /// </summary>
        [Fact]
        public void AnnualSalaryTest()
        {
            // TODO unit test for the property 'AnnualSalary'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Theory]
        [InlineData("Active", SalaryAndWage.StatusEnum.Active)]
        [InlineData("Pending", SalaryAndWage.StatusEnum.Pending)]
        public async Task StatusEnum_ValidInput_Deserialises(string input, SalaryAndWage.StatusEnum expected)
        {
            var jsonContent = $@"""{input}""";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<SalaryAndWage.StatusEnum>(response);
            Assert.Equal(expected, actual);
        }

        [Fact]
        public async Task StatusEnum_NullInput_Deserialises()
        {
            var jsonContent = "null";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<SalaryAndWage.StatusEnum>(response);
            Assert.Equal(0, (int)actual);
        }
        /// <summary>
        /// Test the property 'PaymentType'
        /// </summary>
        [Theory]
        [InlineData("Hourly", SalaryAndWage.PaymentTypeEnum.Hourly)]
        [InlineData("Salary", SalaryAndWage.PaymentTypeEnum.Salary)]
        public async Task PaymentTypeEnum_ValidInput_Deserialises(string input, SalaryAndWage.PaymentTypeEnum expected)
        {
            var jsonContent = $@"""{input}""";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<SalaryAndWage.PaymentTypeEnum>(response);
            Assert.Equal(expected, actual);
        }

        [Fact]
        public async Task PaymentTypeEnum_NullInput_Deserialises()
        {
            var jsonContent = "null";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<SalaryAndWage.PaymentTypeEnum>(response);
            Assert.Equal(0, (int)actual);
        }

    }

}
