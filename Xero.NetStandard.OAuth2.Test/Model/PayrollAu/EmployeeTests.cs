/* 
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollAu;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollAu
{
    /// <summary>
    ///  Class for testing Employee
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class EmployeeTests : IDisposable
    {
        public EmployeeTests()
        {
            // TODO uncomment below to create an instance of Employee
            //instance = new Employee();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test the property 'Gender'
        /// </summary>
        [Theory]
        [InlineData("N", Employee.GenderEnum.N)]
        [InlineData("M", Employee.GenderEnum.M)]
        [InlineData("F", Employee.GenderEnum.F)]
        [InlineData("I", Employee.GenderEnum.I)]
        public async Task Gender_ValidInput_Deserialises(string input, Employee.GenderEnum expected)
        {
            var jsonContent = $@"{{
                ""Gender"": ""{input}""
            }}";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<Employee>(response);
            Assert.Equal(expected, actual.Gender);
        }
        [Fact]
        public async Task Gender_NullInput_DeserialisesTo0()
        {
            var jsonContent = @"{
                ""Gender"": null
            }";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<Employee>(response);
            Assert.Equal(0, (int)actual.Gender);
        }
        [Fact]
        public async Task Gender_NotPresentInInput_DeserialisesTo0()
        {
            var jsonContent = "{}";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<Employee>(response);
            Assert.Equal(0, (int)actual.Gender);
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Theory]
        [InlineData("ACTIVE", EmployeeStatus.ACTIVE)]
        [InlineData("TERMINATED", EmployeeStatus.TERMINATED)]
        public async Task StatusTest(string input, EmployeeStatus expected)
        {
            await JsonDoc.Assert<Employee, EmployeeStatus>(
                input: new JsonDoc.String(nameof(Employee.Status), input),
                toProperty: x => x.Status,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'ValidationErrors'
        /// </summary>
        [Fact]
        public async Task ValidationErrorsTest()
        {
            var jsonContent = $@"{{
                ""ValidationErrors"": [
                    {{
                        ""Message"": ""One""
                    }},
                    {{
                        ""Message"": ""Two""
                    }}
                ]
            }}";
            var response = new HttpResponseMessage(HttpStatusCode.OK)
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };
            response.EnsureSuccessStatusCode();
            var deserializer = new CustomJsonCodec(new Configuration());
            var actual = await deserializer.Deserialize<Employee>(response);
            Assert.Equal(2, actual.ValidationErrors.Count);
            Assert.Equal("One", actual.ValidationErrors.First().Message);
        }
    }
}
