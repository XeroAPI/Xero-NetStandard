/* 
 * Xero Payroll AU
 *
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.PayrollAu;
using Xero.NetStandard.OAuth2.Client;
using System.Reflection;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace Xero.NetStandard.OAuth2.Test.Model.PayrollAu
{
    /// <summary>
    ///  Class for testing EarningsLine
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class EarningsLineTests : IDisposable
    {
        public EarningsLineTests()
        {
            // TODO uncomment below to create an instance of EarningsLine
            //instance = new EarningsLine();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test the property 'AnnualSalary'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public async Task AnnualSalaryTest(string input)
        {
            await JsonDoc.Assert<EarningsLine, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsLine.AnnualSalary), input),
                toProperty: x => x.AnnualSalary,
                shouldBe: 20m
            );
        }
        /// <summary>
        /// Test the property 'NumberOfUnitsPerWeek'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public async Task NumberOfUnitsPerWeekTest(string input)
        {
            await JsonDoc.Assert<EarningsLine, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsLine.NumberOfUnitsPerWeek), input),
                toProperty: x => x.NumberOfUnitsPerWeek,
                shouldBe: 20m
            );
        }
        /// <summary>
        /// Test the property 'RatePerUnit'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public async Task RatePerUnitTest(string input)
        {
            await JsonDoc.Assert<EarningsLine, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsLine.RatePerUnit), input),
                toProperty: x => x.RatePerUnit,
                shouldBe: 20m
            );
        }
        /// <summary>
        /// Test the property 'NormalNumberOfUnits'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public async Task NormalNumberOfUnitsTest(string input)
        {
            await JsonDoc.Assert<EarningsLine, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsLine.NormalNumberOfUnits), input),
                toProperty: x => x.NormalNumberOfUnits,
                shouldBe: 20m
            );
        }
        /// <summary>
        /// Test the property 'Amount'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public async Task AmountTest(string input)
        {
            await JsonDoc.Assert<EarningsLine, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsLine.Amount), input),
                toProperty: x => x.Amount,
                shouldBe: 20m
            );
        }
        /// <summary>
        /// Test the property 'NumberOfUnits'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public async Task NumberOfUnitsTest(string input)
        {
            await JsonDoc.Assert<EarningsLine, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsLine.NumberOfUnits), input),
                toProperty: x => x.NumberOfUnits,
                shouldBe: 20m
            );
        }
        /// <summary>
        /// Test the property 'FixedAmount'
        /// </summary>
        [Theory]
        [InlineData("20.00")]
        [InlineData("20")]
        public async Task FixedAmountTest(string input)
        {
            await JsonDoc.Assert<EarningsLine, decimal?>(
                input: new JsonDoc.Number(nameof(EarningsLine.FixedAmount), input),
                toProperty: x => x.FixedAmount,
                shouldBe: 20m
            );
        }
        /// <summary>
        /// Test the property 'CalculationType' deserialises from valid inputs
        /// </summary>
        [Theory]
        [InlineData("USEEARNINGSRATE", EarningsRateCalculationType.USEEARNINGSRATE)]
        [InlineData("ANNUALSALARY", EarningsRateCalculationType.ANNUALSALARY)]
        [InlineData("ENTEREARNINGSRATE", EarningsRateCalculationType.ENTEREARNINGSRATE)]
        public async Task CalculationType_ValidInputs_Deserialises(string input, EarningsRateCalculationType expected)
        {
            await JsonDoc.Assert<EarningsLine, EarningsRateCalculationType>(
                input: new JsonDoc.String(nameof(EarningsLine.CalculationType), input),
                toProperty: x => x.CalculationType,
                shouldBe: expected
            );
        }
        /// <summary>
        /// Test the property 'CalculationType' deserialises from null
        /// </summary>
        [Fact]
        public async Task CalculationType_NullInput_DeserialisesTo0()
        {
            await JsonDoc.Assert<EarningsLine, EarningsRateCalculationType>(
                input: new JsonDoc.Null(nameof(EarningsLine.CalculationType)),
                toProperty: x => x.CalculationType,
                shouldBe: 0
            );
        }
        /// <summary>
        /// Test the property 'CalculationType' deserialises when not present
        /// </summary>
        [Fact]
        public async Task CalculationType_NotPresent_DeserialisesTo0()
        {
            await JsonDoc.Assert<EarningsLine, EarningsRateCalculationType>(
                input: new JsonDoc.NotPresent(nameof(EarningsLine.CalculationType)),
                toProperty: x => x.CalculationType,
                shouldBe: 0
            );
        }
    }
}
