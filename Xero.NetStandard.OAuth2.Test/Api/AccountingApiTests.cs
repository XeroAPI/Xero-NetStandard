/* 
 * Accounting API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;
using System.Threading.Tasks;
using AutoBogus;

using Xero.NetStandard.OAuth2.Client;
using Xero.NetStandard.OAuth2.Api;
using Xero.NetStandard.OAuth2.Model.Accounting;
using Xunit.Abstractions;

[assembly: CollectionBehavior(DisableTestParallelization = true)]
namespace Xero.NetStandard.OAuth2.Test.Api.Accounting
{
  /// <summary>
  ///  Class for testing AccountingApi
  /// </summary>
  /// <remarks>
  /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
  /// Please update the test case below to test the API endpoint.
  /// </remarks>
  public class AccountingApiTests : IAsyncLifetime
  {
    private AccountingApi instance;

    private const string accessToken = "XeroNetStandardTestAccessToken";

    private const string xeroTenantId = "XeroNetStandardTestTenantId";
    private readonly ITestOutputHelper output;


    public AccountingApiTests(ITestOutputHelper output)
    {
      this.output = output;
    }

    // Methods are async but may not require it in specific cases
    #pragma warning disable CS1998 // This async method lacks 'await' operators
    public async Task InitializeAsync()
    {
      var directory = Directory.GetCurrentDirectory();
      var configuration = TestHelper.GetApplicationConfiguration(directory);
      var config = new Xero.NetStandard.OAuth2.Client.Configuration();
      config.BasePath = configuration.AccountingBaseUrl;
      instance = new AccountingApi(config);
    }

    public async Task DisposeAsync()
    {
      // Cleanup when everything is done.
    }
    #pragma warning restore CS1998 // This async method lacks 'await' operators

    /// <summary>
    /// Test an instance of AccountingApi
    /// </summary>
    [Fact]
    public void InstanceTest()
    {
      // TODO uncomment below to test 'IsInstanceOfType' AccountingApi
      Assert.IsType(typeof(AccountingApi), instance);
    }

    /// <summary>
    /// Test CreateAccount
    /// </summary>
    [Fact]
    public async Task CreateAccountTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Account account = new Account();
      var response = await instance.CreateAccountAsync(accessToken, xeroTenantId, account);//.ConfigureAwait(false);
      Assert.IsType<Accounts>(response);
    }

    // /// <summary>
    // /// Test CreateAccountAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateAccountAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid accountID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateAccountAttachmentByFileNameAsync(accessToken, xeroTenantId, accountID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    // /// <summary>
    // /// Test CreateBankTransactionAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateBankTransactionAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransactionID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateBankTransactionAttachmentByFileNameAsync(accessToken, xeroTenantId, bankTransactionID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateBankTransactionHistoryRecord
    /// </summary>
    [Fact]
    public async Task CreateBankTransactionHistoryRecordTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid bankTransactionID = AutoFaker.Generate<Guid>();
      var historyRecord = new HistoryRecord();
      var historyRecordList = new List<HistoryRecord> { historyRecord };
      HistoryRecords historyRecords = new HistoryRecords();
      historyRecords._HistoryRecords = historyRecordList;
      var response = await instance.CreateBankTransactionHistoryRecordAsync(accessToken, xeroTenantId, bankTransactionID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateBankTransactions
    /// </summary>
    [Fact]
    public async Task CreateBankTransactionsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      BankTransactions bankTransactions = new BankTransactions();
      bankTransactions._BankTransactions = new List<BankTransaction> { new BankTransaction() };
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.CreateBankTransactionsAsync(accessToken, xeroTenantId, bankTransactions, summarizeErrors, null, idempotencyKey ).ConfigureAwait(false);
      Assert.IsType<BankTransactions>(response);
    }

    /// <summary>
    /// Test CreateBankTransfer
    /// </summary>
    [Fact]
    public async Task CreateBankTransferTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      BankTransfers bankTransfers = new BankTransfers();
      bankTransfers._BankTransfers = new List<BankTransfer>() { new BankTransfer() };
      var response = await instance.CreateBankTransferAsync(accessToken, xeroTenantId, bankTransfers).ConfigureAwait(false);
      Assert.IsType<BankTransfers>(response);
    }

    // /// <summary>
    // /// Test CreateBankTransferAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateBankTransferAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransferID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateBankTransferAttachmentByFileNameAsync(accessToken, xeroTenantId, bankTransferID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateBankTransferHistoryRecord
    /// </summary>
    [Fact]
    public async Task CreateBankTransferHistoryRecordTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid bankTransferID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateBankTransferHistoryRecordAsync(accessToken, xeroTenantId, bankTransferID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateBatchPayment
    /// </summary>
    [Fact]
    public async Task CreateBatchPaymentTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      BatchPayments batchPayments = new BatchPayments();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.CreateBatchPaymentAsync(accessToken, xeroTenantId, batchPayments, summarizeErrors).ConfigureAwait(false);
      Assert.IsType<BatchPayments>(response);
    }

    /// <summary>
    /// Test CreateBatchPaymentHistoryRecord
    /// </summary>
    [Fact]
    public async Task CreateBatchPaymentHistoryRecordTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid batchPaymentID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateBatchPaymentHistoryRecordAsync(accessToken, xeroTenantId, batchPaymentID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateBrandingThemePaymentServices
    /// </summary>
    [Fact]
    public async Task CreateBrandingThemePaymentServicesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid brandingThemeID = AutoFaker.Generate<Guid>();
      PaymentServices paymentServices = new PaymentServices();
      var response = await instance.CreateBrandingThemePaymentServicesAsync(accessToken, xeroTenantId, brandingThemeID, paymentServices).ConfigureAwait(false);
      Assert.IsType<PaymentServices>(response);
    }

    // /// <summary>
    // /// Test CreateContactAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateContactAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid contactID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateContactAttachmentByFileNameAsync(accessToken, xeroTenantId, contactID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateContactGroup
    /// </summary>
    [Fact]
    public async Task CreateContactGroupTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      ContactGroups contactGroups = new ContactGroups();
      var response = await instance.CreateContactGroupAsync(accessToken, xeroTenantId, contactGroups).ConfigureAwait(false);
      Assert.IsType<ContactGroups>(response);
    }

    /// <summary>
    /// Test CreateContactGroupContacts
    /// </summary>
    [Fact]
    public async Task CreateContactGroupContactsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactGroupID = AutoFaker.Generate<Guid>();
      Contacts contacts = new Contacts();
      var response = await instance.CreateContactGroupContactsAsync(accessToken, xeroTenantId, contactGroupID, contacts).ConfigureAwait(false);
      Assert.IsType<Contacts>(response);
    }

    /// <summary>
    /// Test CreateContactHistory
    /// </summary>
    [Fact]
    public async Task CreateContactHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateContactHistoryAsync(accessToken, xeroTenantId, contactID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateContacts
    /// </summary>
    [Fact]
    public async Task CreateContactsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Contacts contacts = new Contacts();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.CreateContactsAsync(accessToken, xeroTenantId, contacts, summarizeErrors, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<Contacts>(response);
    }

    /// <summary>
    /// Test CreateCreditNoteAllocation
    /// </summary>
    [Fact]
    public async Task CreateCreditNoteAllocationTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid creditNoteID = AutoFaker.Generate<Guid>();
      Allocations allocations = new Allocations();
      var response = await instance.CreateCreditNoteAllocationAsync(accessToken, xeroTenantId, creditNoteID, allocations).ConfigureAwait(false);
      Assert.IsType<Allocations>(response);
    }

    // /// <summary>
    // /// Test CreateCreditNoteAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateCreditNoteAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid creditNoteID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateCreditNoteAttachmentByFileNameAsync(accessToken, xeroTenantId, creditNoteID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateCreditNoteHistory
    /// </summary>
    [Fact]
    public async Task CreateCreditNoteHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid creditNoteID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateCreditNoteHistoryAsync(accessToken, xeroTenantId, creditNoteID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateCreditNotes
    /// </summary>
    [Fact]
    public async Task CreateCreditNotesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      CreditNotes creditNotes = new CreditNotes();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.CreateCreditNotesAsync(accessToken, xeroTenantId, creditNotes, summarizeErrors, null, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<CreditNotes>(response);
    }

    /// <summary>
    /// Test CreateCurrency
    /// </summary>
    [Fact]
    public async Task CreateCurrencyTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Currency currency = new Currency();
      var response = await instance.CreateCurrencyAsync(accessToken, xeroTenantId, currency).ConfigureAwait(false);
      Assert.IsType<Currencies>(response);
    }

    /// <summary>
    /// Test CreateEmployees
    /// </summary>
    [Fact]
    public async Task CreateEmployeesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Employees employees = new Employees();
      employees._Employees = new List<Employee> { new Employee() };
      var response = await instance.CreateEmployeesAsync(accessToken, xeroTenantId, employees).ConfigureAwait(false);
      Assert.IsType<Employees>(response);
    }

    /// <summary>
    /// Test CreateExpenseClaimHistory
    /// </summary>
    [Fact]
    public async Task CreateExpenseClaimHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid expenseClaimID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateExpenseClaimHistoryAsync(accessToken, xeroTenantId, expenseClaimID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateExpenseClaims
    /// </summary>
    [Fact]
    public async Task CreateExpenseClaimsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      ExpenseClaims expenseClaims = new ExpenseClaims();
      var response = await instance.CreateExpenseClaimsAsync(accessToken, xeroTenantId, expenseClaims).ConfigureAwait(false);
      Assert.IsType<ExpenseClaims>(response);
    }

    // /// <summary>
    // /// Test CreateInvoiceAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateInvoiceAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid invoiceID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateInvoiceAttachmentByFileNameAsync(accessToken, xeroTenantId, invoiceID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateInvoiceHistory
    /// </summary>
    [Fact]
    public async Task CreateInvoiceHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateInvoiceHistoryAsync(accessToken, xeroTenantId, invoiceID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateInvoices
    /// </summary>
    [Fact]
    public async Task CreateInvoicesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();

      Invoices invoices = new Invoices();//AutoFaker.Generate<Invoices>();
      Invoice invoice = new Invoice();
      List<Invoice> invList = new List<Invoice>();
      invList.Add(invoice);
      invoices._Invoices = invList;
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.CreateInvoicesAsync(accessToken, xeroTenantId, invoices, summarizeErrors, null, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<Invoices>(response);
    }

    /// <summary>
    /// Test CreateItemHistory
    /// </summary>
    [Fact]
    public async Task CreateItemHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid itemID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateItemHistoryAsync(accessToken, xeroTenantId, itemID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateItems
    /// </summary>
    [Fact]
    public async Task CreateItemsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Items items = new Items();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.CreateItemsAsync(accessToken, xeroTenantId, items, summarizeErrors, null, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<Items>(response);
    }

    /// <summary>
    /// Test CreateLinkedTransaction
    /// </summary>
    [Fact]
    public async Task CreateLinkedTransactionTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      LinkedTransaction linkedTransaction = new LinkedTransaction();
      var response = await instance.CreateLinkedTransactionAsync(accessToken, xeroTenantId, linkedTransaction).ConfigureAwait(false);
      Assert.IsType<LinkedTransactions>(response);
    }

    /// <summary>
    /// Test CreateManualJournals
    /// </summary>
    [Fact]
    public async Task CreateManualJournalsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      ManualJournals manualJournals = new ManualJournals();
      manualJournals._ManualJournals = new List<ManualJournal> { new ManualJournal() };
      var response = await instance.CreateManualJournalsAsync(accessToken, xeroTenantId, manualJournals).ConfigureAwait(false);
      Assert.IsType<ManualJournals>(response);
    }

    // /// <summary>
    // /// Test CreateManualJournalAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateManualJournalAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid manualJournalID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateManualJournalAttachmentByFileNameAsync(accessToken, xeroTenantId, manualJournalID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateOverpaymentAllocations
    /// </summary>
    [Fact]
    public async Task CreateOverpaymentAllocationsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid overpaymentID = AutoFaker.Generate<Guid>();
      Allocations allocations = new Allocations();
      allocations._Allocations = new List<Allocation> { new Allocation() };
      var response = await instance.CreateOverpaymentAllocationsAsync(accessToken, xeroTenantId, overpaymentID, allocations).ConfigureAwait(false);
      Assert.IsType<Allocations>(response);
    }

    // /// <summary>
    // /// Test CreateOverpaymentAllocations
    // /// </summary>
    // [Fact]
    // public async Task CreateOverpaymentAllocationsTest()
    // {
    //   // TODO uncomment below to test the method and replace null with proper value
    //   string xeroTenantId = AutoFaker.Generate<string>();
    //   Guid overpaymentID = AutoFaker.Generate<Guid>();
    //   Allocations allocations = new Allocations();
    //   var response = await instance.CreateOverpaymentAllocationsAsync(accessToken, xeroTenantId, overpaymentID, allocations).ConfigureAwait(false);
    //   Assert.IsType<Allocations>(response);
    // }

    /// <summary>
    /// Test CreateOverpaymentHistory
    /// </summary>
    [Fact]
    public async Task CreateOverpaymentHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid overpaymentID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateOverpaymentHistoryAsync(accessToken, xeroTenantId, overpaymentID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreatePayment
    /// </summary>
    [Fact]
    public async Task CreatePaymentTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Payment payment = new Payment();
      var response = await instance.CreatePaymentAsync(accessToken, xeroTenantId, payment).ConfigureAwait(false);
      Assert.IsType<Payments>(response);
    }

    /// <summary>
    /// Test CreatePaymentHistory
    /// </summary>
    [Fact]
    public async Task CreatePaymentHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid paymentID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreatePaymentHistoryAsync(accessToken, xeroTenantId, paymentID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreatePaymentService
    /// </summary>
    [Fact]
    public async Task CreatePaymentServiceTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      PaymentServices paymentServices = new PaymentServices();
      var response = await instance.CreatePaymentServiceAsync(accessToken, xeroTenantId, paymentServices).ConfigureAwait(false);
      Assert.IsType<PaymentServices>(response);
    }

    /// <summary>
    /// Test CreatePayments
    /// </summary>
    [Fact]
    public async Task CreatePaymentsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Payments payments = new Payments();
      var response = await instance.CreatePaymentsAsync(accessToken, xeroTenantId, payments).ConfigureAwait(false);
      Assert.IsType<Payments>(response);
    }

    /// <summary>
    /// Test CreatePrepaymentAllocation
    /// </summary>
    [Fact]
    public async Task CreatePrepaymentAllocationsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid prepaymentID = AutoFaker.Generate<Guid>();
      Allocations allocations = new Allocations();
      var response = await instance.CreatePrepaymentAllocationsAsync(accessToken, xeroTenantId, prepaymentID, allocations).ConfigureAwait(false);
      Assert.IsType<Allocations>(response);
    }

    /// <summary>
    /// Test CreatePrepaymentHistory
    /// </summary>
    [Fact]
    public async Task CreatePrepaymentHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid prepaymentID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreatePrepaymentHistoryAsync(accessToken, xeroTenantId, prepaymentID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreatePurchaseOrderHistory
    /// </summary>
    [Fact]
    public async Task CreatePurchaseOrderHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid purchaseOrderID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreatePurchaseOrderHistoryAsync(accessToken, xeroTenantId, purchaseOrderID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreatePurchaseOrders
    /// </summary>
    [Fact]
    public async Task CreatePurchaseOrdersTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      PurchaseOrders purchaseOrders = new PurchaseOrders();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.CreatePurchaseOrdersAsync(accessToken, xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<PurchaseOrders>(response);
    }

    /// <summary>
    /// Test CreateReceipt
    /// </summary>
    [Fact]
    public async Task CreateReceiptTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Receipts receipts = new Receipts();
      var response = await instance.CreateReceiptAsync(accessToken, xeroTenantId, receipts).ConfigureAwait(false);
      Assert.IsType<Receipts>(response);
    }

    // /// <summary>
    // /// Test CreateReceiptAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task CreateReceiptAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid receiptID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateReceiptAttachmentByFileNameAsync(accessToken, xeroTenantId, receiptID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateReceiptHistory
    /// </summary>
    [Fact]
    public async Task CreateReceiptHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid receiptID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateReceiptHistoryAsync(accessToken, xeroTenantId, receiptID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateRepeatingInvoiceAttachmentByFileName
    /// </summary>
    // [Fact]
    // public async Task CreateRepeatingInvoiceAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.CreateRepeatingInvoiceAttachmentByFileNameAsync(accessToken, xeroTenantId, repeatingInvoiceID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test CreateRepeatingInvoiceHistory
    /// </summary>
    [Fact]
    public async Task CreateRepeatingInvoiceHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
      HistoryRecords historyRecords = new HistoryRecords();
      var response = await instance.CreateRepeatingInvoiceHistoryAsync(accessToken, xeroTenantId, repeatingInvoiceID, historyRecords).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test CreateTaxRates
    /// </summary>
    [Fact]
    public async Task CreateTaxRatesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      TaxRates taxRates = new TaxRates();
      var response = await instance.CreateTaxRatesAsync(accessToken, xeroTenantId, taxRates).ConfigureAwait(false);
      Assert.IsType<TaxRates>(response);
    }

    /// <summary>
    /// Test CreateTrackingCategory
    /// </summary>
    [Fact]
    public async Task CreateTrackingCategoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      TrackingCategory trackingCategory = new TrackingCategory();
      var response = await instance.CreateTrackingCategoryAsync(accessToken, xeroTenantId, trackingCategory).ConfigureAwait(false);
      Assert.IsType<TrackingCategories>(response);
    }

    /// <summary>
    /// Test CreateTrackingOptions
    /// </summary>
    [Fact]
    public async Task CreateTrackingOptionsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid trackingCategoryID = AutoFaker.Generate<Guid>();
      TrackingOption trackingOption = new TrackingOption();
      var response = await instance.CreateTrackingOptionsAsync(accessToken, xeroTenantId, trackingCategoryID, trackingOption).ConfigureAwait(false);
      Assert.IsType<TrackingOptions>(response);
    }

    /// <summary>
    /// Test DeleteAccount
    /// </summary>
    [Fact]
    public async Task DeleteAccountTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid accountID = AutoFaker.Generate<Guid>();
      var response = await instance.DeleteAccountAsync(accessToken, xeroTenantId, accountID).ConfigureAwait(false);
      Assert.IsType<Accounts>(response);
    }

    /// <summary>
    /// Test DeleteContactGroupContact
    /// </summary>
    [Fact]
    public async Task DeleteContactGroupContactTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactGroupID = AutoFaker.Generate<Guid>();
      Guid contactID = AutoFaker.Generate<Guid>();
      await instance.DeleteContactGroupContactAsync(accessToken, xeroTenantId, contactGroupID, contactID).ConfigureAwait(false);

    }

    /// <summary>
    /// Test DeleteContactGroupContacts
    /// </summary>
    [Fact]
    public async Task DeleteContactGroupContactsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactGroupID = AutoFaker.Generate<Guid>();
      await instance.DeleteContactGroupContactsAsync(accessToken, xeroTenantId, contactGroupID).ConfigureAwait(false);

    }

    /// <summary>
    /// Test DeleteItem
    /// </summary>
    [Fact]
    public async Task DeleteItemTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid itemID = AutoFaker.Generate<Guid>();
      await instance.DeleteItemAsync(accessToken, xeroTenantId, itemID).ConfigureAwait(false);

    }

    /// <summary>
    /// Test DeleteLinkedTransaction
    /// </summary>
    [Fact]
    public async Task DeleteLinkedTransactionTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid linkedTransactionID = AutoFaker.Generate<Guid>();
      await instance.DeleteLinkedTransactionAsync(accessToken, xeroTenantId, linkedTransactionID).ConfigureAwait(false);

    }

    /// <summary>
    /// Test DeletePayment
    /// </summary>
    [Fact]
    public async Task DeletePaymentTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid paymentID = AutoFaker.Generate<Guid>();
      Payments payments = new Payments();
      PaymentDelete paymentDelete = new PaymentDelete();
      var response = await instance.DeletePaymentAsync(accessToken, xeroTenantId, paymentID, paymentDelete).ConfigureAwait(false);
      Assert.IsType<Payments>(response);
    }

    /// <summary>
    /// Test DeleteTrackingCategory
    /// </summary>
    [Fact]
    public async Task DeleteTrackingCategoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid trackingCategoryID = AutoFaker.Generate<Guid>();
      var response = await instance.DeleteTrackingCategoryAsync(accessToken, xeroTenantId, trackingCategoryID).ConfigureAwait(false);
      Assert.IsType<TrackingCategories>(response);
    }

    /// <summary>
    /// Test DeleteTrackingOptions
    /// </summary>
    [Fact]
    public async Task DeleteTrackingOptionsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid trackingCategoryID = AutoFaker.Generate<Guid>();
      Guid trackingOptionID = AutoFaker.Generate<Guid>();
      var response = await instance.DeleteTrackingOptionsAsync(accessToken, xeroTenantId, trackingCategoryID, trackingOptionID).ConfigureAwait(false);
      Assert.IsType<TrackingOptions>(response);
    }

    /// <summary>
    /// Test EmailInvoice
    /// </summary>
    [Fact]
    public async Task EmailInvoiceTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      RequestEmpty requestEmpty = new RequestEmpty();
      await instance.EmailInvoiceAsync(accessToken, xeroTenantId, invoiceID, requestEmpty).ConfigureAwait(false);

    }

    /// <summary>
    /// Test GetAccount
    /// </summary>
    [Fact]
    public async Task GetAccountTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid accountID = AutoFaker.Generate<Guid>();
      var response = await instance.GetAccountAsync(accessToken, xeroTenantId, accountID).ConfigureAwait(false);
      Assert.IsType<Accounts>(response);
    }

    // /// <summary>
    // /// Test GetAccountAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetAccountAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //    
    //  
    //         string xeroTenantId = AutoFaker.Generate<string>();
    //         Guid accountID = AutoFaker.Generate<Guid>();
    //         string fileName = AutoFaker.Generate<string>();
    //         string contentType = AutoFaker.Generate<string>();
    //         var response = await instance.GetAccountAttachmentByFileNameAsync(accessToken, xeroTenantId, accountID, fileName, contentType).ConfigureAwait(false);
    //         Assert.IsType<System.IO.Stream>(response);
    // 
    // }

    // /// <summary>
    // /// Test GetAccountAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetAccountAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid accountID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetAccountAttachmentByIdAsync(accessToken, xeroTenantId, accountID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetAccountAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetAccountAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid accountID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetAccountAttachmentsAsync(accessToken, xeroTenantId, accountID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetAccounts
    /// </summary>
    [Fact]
    public async Task GetAccountsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetAccountsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order).ConfigureAwait(false);
      Assert.IsType<Accounts>(response);
    }

    /// <summary>
    /// Test GetBankTransaction
    /// </summary>
    [Fact]
    public async Task GetBankTransactionTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid bankTransactionID = AutoFaker.Generate<Guid>();
      var response = await instance.GetBankTransactionAsync(accessToken, xeroTenantId, bankTransactionID).ConfigureAwait(false);
      Assert.IsType<BankTransactions>(response);
    }

    // /// <summary>
    // /// Test GetBankTransactionAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetBankTransactionAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransactionID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetBankTransactionAttachmentByFileNameAsync(accessToken, xeroTenantId, bankTransactionID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetBankTransactionAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetBankTransactionAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransactionID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetBankTransactionAttachmentByIdAsync(accessToken, xeroTenantId, bankTransactionID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetBankTransactionAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetBankTransactionAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransactionID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetBankTransactionAttachmentsAsync(accessToken, xeroTenantId, bankTransactionID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetBankTransactions
    /// </summary>
    [Fact]
    public async Task GetBankTransactionsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      int? unitdp = AutoFaker.Generate<int?>();
      var response = await instance.GetBankTransactionsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, page, unitdp).ConfigureAwait(false);
      Assert.IsType<BankTransactions>(response);
    }

    /// <summary>
    /// Test GetBankTransactionsHistory
    /// </summary>
    [Fact]
    public async Task GetBankTransactionsHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid bankTransactionID = AutoFaker.Generate<Guid>();
      var response = await instance.GetBankTransactionsHistoryAsync(accessToken, xeroTenantId, bankTransactionID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetBankTransfer
    /// </summary>
    [Fact]
    public async Task GetBankTransferTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid bankTransferID = AutoFaker.Generate<Guid>();
      var response = await instance.GetBankTransferAsync(accessToken, xeroTenantId, bankTransferID).ConfigureAwait(false);
      Assert.IsType<BankTransfers>(response);
    }

    // /// <summary>
    // /// Test GetBankTransferAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetBankTransferAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransferID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetBankTransferAttachmentByFileNameAsync(accessToken, xeroTenantId, bankTransferID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetBankTransferAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetBankTransferAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransferID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetBankTransferAttachmentByIdAsync(accessToken, xeroTenantId, bankTransferID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetBankTransferAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetBankTransferAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransferID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetBankTransferAttachmentsAsync(accessToken, xeroTenantId, bankTransferID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetBankTransferHistory
    /// </summary>
    [Fact]
    public async Task GetBankTransferHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid bankTransferID = AutoFaker.Generate<Guid>();
      var response = await instance.GetBankTransferHistoryAsync(accessToken, xeroTenantId, bankTransferID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetBankTransfers
    /// </summary>
    [Fact]
    public async Task GetBankTransfersTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetBankTransfersAsync(accessToken, xeroTenantId, ifModifiedSince, where, order).ConfigureAwait(false);
      Assert.IsType<BankTransfers>(response);
    }

    /// <summary>
    /// Test GetBatchPaymentHistory
    /// </summary>
    [Fact]
    public async Task GetBatchPaymentHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid batchPaymentID = AutoFaker.Generate<Guid>();
      var response = await instance.GetBatchPaymentHistoryAsync(accessToken, xeroTenantId, batchPaymentID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetBatchPayments
    /// </summary>
    [Fact]
    public async Task GetBatchPaymentsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetBatchPaymentsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order).ConfigureAwait(false);
      Assert.IsType<BatchPayments>(response);
    }

    /// <summary>
    /// Test GetBrandingTheme
    /// </summary>
    [Fact]
    public async Task GetBrandingThemeTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid brandingThemeID = AutoFaker.Generate<Guid>();
      var response = await instance.GetBrandingThemeAsync(accessToken, xeroTenantId, brandingThemeID).ConfigureAwait(false);
      Assert.IsType<BrandingThemes>(response);
    }

    /// <summary>
    /// Test GetBrandingThemePaymentServices
    /// </summary>
    [Fact]
    public async Task GetBrandingThemePaymentServicesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid brandingThemeID = AutoFaker.Generate<Guid>();
      var response = await instance.GetBrandingThemePaymentServicesAsync(accessToken, xeroTenantId, brandingThemeID).ConfigureAwait(false);
      Assert.IsType<PaymentServices>(response);
    }

    /// <summary>
    /// Test GetBrandingThemes
    /// </summary>
    [Fact]
    public async Task GetBrandingThemesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      var response = await instance.GetBrandingThemesAsync(accessToken, xeroTenantId).ConfigureAwait(false);
      Assert.IsType<BrandingThemes>(response);
    }

    /// <summary>
    /// Test GetContact
    /// </summary>
    [Fact]
    public async Task GetContactTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactID = AutoFaker.Generate<Guid>();
      var response = await instance.GetContactAsync(accessToken, xeroTenantId, contactID).ConfigureAwait(false);
      Assert.IsType<Contacts>(response);
    }

    // /// <summary>
    // /// Test GetContactAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetContactAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid contactID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetContactAttachmentByFileNameAsync(accessToken, xeroTenantId, contactID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetContactAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetContactAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid contactID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetContactAttachmentByIdAsync(accessToken, xeroTenantId, contactID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetContactAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetContactAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid contactID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetContactAttachmentsAsync(accessToken, xeroTenantId, contactID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetContactCISSettings
    /// </summary>
    [Fact]
    public async Task GetContactCISSettingsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactID = AutoFaker.Generate<Guid>();
      var response = await instance.GetContactCISSettingsAsync(accessToken, xeroTenantId, contactID).ConfigureAwait(false);
      Assert.IsType<CISSettings>(response);
    }

    /// <summary>
    /// Test GetContactGroup
    /// </summary>
    [Fact]
    public async Task GetContactGroupTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactGroupID = AutoFaker.Generate<Guid>();
      var response = await instance.GetContactGroupAsync(accessToken, xeroTenantId, contactGroupID).ConfigureAwait(false);
      Assert.IsType<ContactGroups>(response);
    }

    /// <summary>
    /// Test GetContactGroups
    /// </summary>
    [Fact]
    public async Task GetContactGroupsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetContactGroupsAsync(accessToken, xeroTenantId, where, order).ConfigureAwait(false);
      Assert.IsType<ContactGroups>(response);
    }

    /// <summary>
    /// Test GetContactHistory
    /// </summary>
    [Fact]
    public async Task GetContactHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactID = AutoFaker.Generate<Guid>();
      var response = await instance.GetContactHistoryAsync(accessToken, xeroTenantId, contactID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetContacts
    /// </summary>
    [Fact]
    public async Task GetContactsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      List<Guid> iDs = AutoFaker.Generate<List<Guid>>();
      int? page = AutoFaker.Generate<int?>();
      bool? includeArchived = AutoFaker.Generate<bool?>();
      var response = await instance.GetContactsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, iDs, page, includeArchived).ConfigureAwait(false);
      Assert.IsType<Contacts>(response);
    }

    /// <summary>
    /// Test GetCreditNote
    /// </summary>
    [Fact]
    public async Task GetCreditNoteTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid creditNoteID = AutoFaker.Generate<Guid>();
      var response = await instance.GetCreditNoteAsync(accessToken, xeroTenantId, creditNoteID).ConfigureAwait(false);
      Assert.IsType<CreditNotes>(response);
    }

    /// <summary>
    /// Test GetCreditNoteAsPdf
    /// </summary>
    [Fact(Skip = "mock server doesn't run binary streams yet")]
    public async Task GetCreditNoteAsPdfTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid creditNoteID = AutoFaker.Generate<Guid>();
      // string contentType = AutoFaker.Generate<string>();
      var response = await instance.GetCreditNoteAsPdfAsync(accessToken, xeroTenantId, creditNoteID).ConfigureAwait(false);
      Assert.IsType<System.IO.Stream>(response);
    }

    // /// <summary>
    // /// Test GetCreditNoteAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetCreditNoteAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid creditNoteID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetCreditNoteAttachmentByFileNameAsync(accessToken, xeroTenantId, creditNoteID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetCreditNoteAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetCreditNoteAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid creditNoteID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetCreditNoteAttachmentByIdAsync(accessToken, xeroTenantId, creditNoteID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetCreditNoteAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetCreditNoteAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid creditNoteID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetCreditNoteAttachmentsAsync(accessToken, xeroTenantId, creditNoteID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetCreditNoteHistory
    /// </summary>
    [Fact]
    public async Task GetCreditNoteHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid creditNoteID = AutoFaker.Generate<Guid>();
      var response = await instance.GetCreditNoteHistoryAsync(accessToken, xeroTenantId, creditNoteID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetCreditNotes
    /// </summary>
    [Fact]
    public async Task GetCreditNotesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      var response = await instance.GetCreditNotesAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, page).ConfigureAwait(false);
      Assert.IsType<CreditNotes>(response);
    }

    /// <summary>
    /// Test GetCurrencies
    /// </summary>
    [Fact]
    public async Task GetCurrenciesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetCurrenciesAsync(accessToken, xeroTenantId, where, order).ConfigureAwait(false);
      Assert.IsType<Currencies>(response);
    }

    /// <summary>
    /// Test GetEmployee
    /// </summary>
    [Fact]
    public async Task GetEmployeeTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid employeeID = AutoFaker.Generate<Guid>();
      var response = await instance.GetEmployeeAsync(accessToken, xeroTenantId, employeeID).ConfigureAwait(false);
      Assert.IsType<Employees>(response);
    }

    /// <summary>
    /// Test GetEmployees
    /// </summary>
    [Fact]
    public async Task GetEmployeesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetEmployeesAsync(accessToken, xeroTenantId, ifModifiedSince, where, order).ConfigureAwait(false);
      Assert.IsType<Employees>(response);
    }

    /// <summary>
    /// Test GetExpenseClaim
    /// </summary>
    [Fact]
    public async Task GetExpenseClaimTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid expenseClaimID = AutoFaker.Generate<Guid>();
      var response = await instance.GetExpenseClaimAsync(accessToken, xeroTenantId, expenseClaimID).ConfigureAwait(false);
      Assert.IsType<ExpenseClaims>(response);
    }

    /// <summary>
    /// Test GetExpenseClaimHistory
    /// </summary>
    [Fact]
    public async Task GetExpenseClaimHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid expenseClaimID = AutoFaker.Generate<Guid>();
      var response = await instance.GetExpenseClaimHistoryAsync(accessToken, xeroTenantId, expenseClaimID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetExpenseClaims
    /// </summary>
    [Fact]
    public async Task GetExpenseClaimsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetExpenseClaimsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order).ConfigureAwait(false);
      Assert.IsType<ExpenseClaims>(response);
    }

    /// <summary>
    /// Test GetInvoice
    /// </summary>
    [Fact]
    public async Task GetInvoiceTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      var response = await instance.GetInvoiceAsync(accessToken, xeroTenantId, invoiceID).ConfigureAwait(false);
      Assert.IsType<Invoices>(response);
    }

    /// <summary>
    /// Test GetInvoice UpdatedDateUTC is UTC time
    /// </summary>
    [Fact]
    public async Task GetInvoiceUpdatedDateUtcTest()
    {
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      var response = await instance.GetInvoiceAsync(accessToken, xeroTenantId, invoiceID).ConfigureAwait(false);
      DateTime actualTime = response._Invoices[0].UpdatedDateUTC.Value;
      DateTime expectedTime = new DateTime(2019, 3, 7, 17, 59, 28, 133);
      Assert.Equal(expectedTime, actualTime);
    }

    /// <summary>
    /// Test GetInvoiceAsPdf
    /// </summary>
    [Fact(Skip = "PDF still can't render from mock server")]
    public async Task GetInvoiceAsPdfTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      // string contentType = AutoFaker.Generate<string>();
      var response = await instance.GetInvoiceAsPdfAsync(accessToken, xeroTenantId, invoiceID).ConfigureAwait(false);
      Assert.IsType<System.IO.Stream>(response);
    }

    // /// <summary>
    // /// Test GetInvoiceAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetInvoiceAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid invoiceID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetInvoiceAttachmentByFileNameAsync(accessToken, xeroTenantId, invoiceID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetInvoiceAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetInvoiceAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid invoiceID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetInvoiceAttachmentByIdAsync(accessToken, xeroTenantId, invoiceID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetInvoiceAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetInvoiceAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid invoiceID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetInvoiceAttachmentsAsync(accessToken, xeroTenantId, invoiceID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetInvoiceHistory
    /// </summary>
    [Fact]
    public async Task GetInvoiceHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      var response = await instance.GetInvoiceHistoryAsync(accessToken, xeroTenantId, invoiceID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetInvoiceReminders
    /// </summary>
    [Fact]
    public async Task GetInvoiceRemindersTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      var response = await instance.GetInvoiceRemindersAsync(accessToken, xeroTenantId).ConfigureAwait(false);
      Assert.IsType<InvoiceReminders>(response);
    }

    /// <summary>
    /// Test GetInvoices
    /// </summary>
    [Fact]
    public async Task GetInvoicesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      List<Guid> iDs = AutoFaker.Generate<List<Guid>>();
      List<string> invoiceNumbers = AutoFaker.Generate<List<string>>();
      List<Guid> contactIDs = AutoFaker.Generate<List<Guid>>();
      List<string> statuses = AutoFaker.Generate<List<string>>();
      int? page = AutoFaker.Generate<int?>();
      bool? includeArchived = AutoFaker.Generate<bool?>();
      bool? createdByMyApp = AutoFaker.Generate<bool?>();
      int? unitdp = AutoFaker.Generate<int?>();
      var response = await instance.GetInvoicesAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, iDs, invoiceNumbers, contactIDs, statuses, page, includeArchived, createdByMyApp, unitdp).ConfigureAwait(false);
      Assert.IsType<Invoices>(response);
    }

    /// <summary>
    /// Test GetItem
    /// </summary>
    [Fact]
    public async Task GetItemTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid itemID = AutoFaker.Generate<Guid>();
      var response = await instance.GetItemAsync(accessToken, xeroTenantId, itemID).ConfigureAwait(false);
      Assert.IsType<Items>(response);
    }

    /// <summary>
    /// Test GetItemHistory
    /// </summary>
    [Fact]
    public async Task GetItemHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid itemID = AutoFaker.Generate<Guid>();
      var response = await instance.GetItemHistoryAsync(accessToken, xeroTenantId, itemID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetItems
    /// </summary>
    [Fact]
    public async Task GetItemsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? unitdp = AutoFaker.Generate<int?>();
      var response = await instance.GetItemsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, unitdp).ConfigureAwait(false);
      Assert.IsType<Items>(response);
    }

    /// <summary>
    /// Test GetJournal
    /// </summary>
    [Fact]
    public async Task GetJournalTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid journalID = AutoFaker.Generate<Guid>();
      var response = await instance.GetJournalAsync(accessToken, xeroTenantId, journalID).ConfigureAwait(false);
      Assert.IsType<Journals>(response);
    }

    /// <summary>
    /// Test GetJournals
    /// </summary>
    [Fact]
    public async Task GetJournalsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      int? offset = AutoFaker.Generate<int?>();
      bool? paymentsOnly = AutoFaker.Generate<bool?>();
      var response = await instance.GetJournalsAsync(accessToken, xeroTenantId, ifModifiedSince, offset, paymentsOnly).ConfigureAwait(false);
      Assert.IsType<Journals>(response);
    }

    /// <summary>
    /// Test GetLinkedTransaction
    /// </summary>
    [Fact]
    public async Task GetLinkedTransactionTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid linkedTransactionID = AutoFaker.Generate<Guid>();
      var response = await instance.GetLinkedTransactionAsync(accessToken, xeroTenantId, linkedTransactionID).ConfigureAwait(false);
      Assert.IsType<LinkedTransactions>(response);
    }

    /// <summary>
    /// Test GetLinkedTransactions
    /// </summary>
    [Fact]
    public async Task GetLinkedTransactionsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      Guid linkedTransactionID = AutoFaker.Generate<Guid>();
      Guid sourceTransactionID = AutoFaker.Generate<Guid>();
      Guid contactID = AutoFaker.Generate<Guid>();
      string status = AutoFaker.Generate<string>();
      Guid targetTransactionID = AutoFaker.Generate<Guid>();
      var response = await instance.GetLinkedTransactionsAsync(accessToken, xeroTenantId, page, linkedTransactionID, sourceTransactionID, contactID, status, targetTransactionID).ConfigureAwait(false);
      Assert.IsType<LinkedTransactions>(response);
    }

    /// <summary>
    /// Test GetManualJournal
    /// </summary>
    [Fact]
    public async Task GetManualJournalTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid manualJournalID = AutoFaker.Generate<Guid>();
      var response = await instance.GetManualJournalAsync(accessToken, xeroTenantId, manualJournalID).ConfigureAwait(false);
      Assert.IsType<ManualJournals>(response);
    }

    // /// <summary>
    // /// Test GetManualJournalAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetManualJournalAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid manualJournalID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetManualJournalAttachmentByFileNameAsync(accessToken, xeroTenantId, manualJournalID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetManualJournalAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetManualJournalAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid manualJournalID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetManualJournalAttachmentByIdAsync(accessToken, xeroTenantId, manualJournalID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetManualJournalAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetManualJournalAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid manualJournalID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetManualJournalAttachmentsAsync(accessToken, xeroTenantId, manualJournalID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetManualJournals
    /// </summary>
    [Fact]
    public async Task GetManualJournalsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      var response = await instance.GetManualJournalsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, page).ConfigureAwait(false);
      Assert.IsType<ManualJournals>(response);
    }

    /// <summary>
    /// Test GetOnlineInvoice
    /// </summary>
    [Fact]
    public async Task GetOnlineInvoiceTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      var response = await instance.GetOnlineInvoiceAsync(accessToken, xeroTenantId, invoiceID).ConfigureAwait(false);
      Assert.IsType<OnlineInvoices>(response);
    }

    /// <summary>
    /// Test GetOrganisationCISSettings
    /// </summary>
    [Fact]
    public async Task GetOrganisationCISSettingsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid organisationID = AutoFaker.Generate<Guid>();
      var response = await instance.GetOrganisationCISSettingsAsync(accessToken, xeroTenantId, organisationID).ConfigureAwait(false);
      Assert.IsType<CISOrgSettings>(response);
    }

    /// <summary>
    /// Test GetOrganisations
    /// </summary>
    [Fact]
    public async Task GetOrganisationsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      var response = await instance.GetOrganisationsAsync(accessToken, xeroTenantId).ConfigureAwait(false);
      Assert.IsType<Organisations>(response);
    }

    /// <summary>
    /// Test GetOverpayment
    /// </summary>
    [Fact]
    public async Task GetOverpaymentTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid overpaymentID = AutoFaker.Generate<Guid>();
      var response = await instance.GetOverpaymentAsync(accessToken, xeroTenantId, overpaymentID).ConfigureAwait(false);
      Assert.IsType<Overpayments>(response);
    }

    /// <summary>
    /// Test GetOverpaymentHistory
    /// </summary>
    [Fact]
    public async Task GetOverpaymentHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid overpaymentID = AutoFaker.Generate<Guid>();
      var response = await instance.GetOverpaymentHistoryAsync(accessToken, xeroTenantId, overpaymentID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetOverpayments
    /// </summary>
    [Fact]
    public async Task GetOverpaymentsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      int? unitdp = AutoFaker.Generate<int?>();
      var response = await instance.GetOverpaymentsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, page, unitdp).ConfigureAwait(false);
      Assert.IsType<Overpayments>(response);
    }

    /// <summary>
    /// Test GetPayment
    /// </summary>
    [Fact]
    public async Task GetPaymentTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid paymentID = AutoFaker.Generate<Guid>();
      var response = await instance.GetPaymentAsync(accessToken, xeroTenantId, paymentID).ConfigureAwait(false);
      Assert.IsType<Payments>(response);
    }

    /// <summary>
    /// Test GetPaymentHistory
    /// </summary>
    [Fact]
    public async Task GetPaymentHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid paymentID = AutoFaker.Generate<Guid>();
      var response = await instance.GetPaymentHistoryAsync(accessToken, xeroTenantId, paymentID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetPaymentServices
    /// </summary>
    [Fact]
    public async Task GetPaymentServicesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      var response = await instance.GetPaymentServicesAsync(accessToken, xeroTenantId).ConfigureAwait(false);
      Assert.IsType<PaymentServices>(response);
    }

    /// <summary>
    /// Test GetPayments
    /// </summary>
    [Fact]
    public async Task GetPaymentsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetPaymentsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order).ConfigureAwait(false);
      Assert.IsType<Payments>(response);
    }

    /// <summary>
    /// Test GetPrepayment
    /// </summary>
    [Fact]
    public async Task GetPrepaymentTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid prepaymentID = AutoFaker.Generate<Guid>();
      var response = await instance.GetPrepaymentAsync(accessToken, xeroTenantId, prepaymentID).ConfigureAwait(false);
      Assert.IsType<Prepayments>(response);
    }

    /// <summary>
    /// Test GetPrepaymentHistory
    /// </summary>
    [Fact]
    public async Task GetPrepaymentHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid prepaymentID = AutoFaker.Generate<Guid>();
      var response = await instance.GetPrepaymentHistoryAsync(accessToken, xeroTenantId, prepaymentID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetPrepayments
    /// </summary>
    [Fact]
    public async Task GetPrepaymentsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      int? unitdp = AutoFaker.Generate<int?>();
      var response = await instance.GetPrepaymentsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, page, unitdp).ConfigureAwait(false);
      Assert.IsType<Prepayments>(response);
    }

    /// <summary>
    /// Test GetPurchaseOrder
    /// </summary>
    [Fact]
    public async Task GetPurchaseOrderTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid purchaseOrderID = AutoFaker.Generate<Guid>();
      var response = await instance.GetPurchaseOrderAsync(accessToken, xeroTenantId, purchaseOrderID).ConfigureAwait(false);
      Assert.IsType<PurchaseOrders>(response);
    }

    /// <summary>
    /// Test GetPurchaseOrderHistory
    /// </summary>
    [Fact]
    public async Task GetPurchaseOrderHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid purchaseOrderID = AutoFaker.Generate<Guid>();
      var response = await instance.GetPurchaseOrderHistoryAsync(accessToken, xeroTenantId, purchaseOrderID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetPurchaseOrders
    /// </summary>
    [Fact]
    public async Task GetPurchaseOrdersTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string status = AutoFaker.Generate<string>();
      string dateFrom = AutoFaker.Generate<string>();
      string dateTo = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      var response = await instance.GetPurchaseOrdersAsync(accessToken, xeroTenantId, ifModifiedSince, status, dateFrom, dateTo, order, page).ConfigureAwait(false);
      Assert.IsType<PurchaseOrders>(response);
    }

    /// <summary>
    /// Test GetQuote
    /// </summary>
    [Fact]
    public async Task GetQuoteTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid quoteID = AutoFaker.Generate<Guid>();
      var response = await instance.GetQuoteAsync(accessToken, xeroTenantId, quoteID).ConfigureAwait(false);
      Assert.IsType<Quotes>(response);
    }

    /// <summary>
    /// Test GetQuotes
    /// </summary>
    [Fact]
    public async Task GetQuotesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      DateTime? dateFrom = AutoFaker.Generate<DateTime?>();
      DateTime? dateTo = AutoFaker.Generate<DateTime?>();
      DateTime? expiryDateFrom = AutoFaker.Generate<DateTime?>();
      DateTime? expiryDateTo = AutoFaker.Generate<DateTime?>();
      Guid? contactID = AutoFaker.Generate<Guid?>();
      string status = AutoFaker.Generate<string>();
      int? page = AutoFaker.Generate<int?>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetQuotesAsync(accessToken, xeroTenantId, ifModifiedSince, dateFrom, dateTo, expiryDateFrom, expiryDateTo, contactID, status, page, order).ConfigureAwait(false);
      Assert.IsType<Quotes>(response);
    }

    /// <summary>
    /// Test GetReceipt
    /// </summary>
    [Fact]
    public async Task GetReceiptTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid receiptID = AutoFaker.Generate<Guid>();
      var response = await instance.GetReceiptAsync(accessToken, xeroTenantId, receiptID).ConfigureAwait(false);
      Assert.IsType<Receipts>(response);
    }

    // /// <summary>
    // /// Test GetReceiptAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetReceiptAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid receiptID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetReceiptAttachmentByFileNameAsync(accessToken, xeroTenantId, receiptID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetReceiptAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetReceiptAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid receiptID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetReceiptAttachmentByIdAsync(accessToken, xeroTenantId, receiptID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetReceiptAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetReceiptAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid receiptID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetReceiptAttachmentsAsync(accessToken, xeroTenantId, receiptID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetReceiptHistory
    /// </summary>
    [Fact]
    public async Task GetReceiptHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid receiptID = AutoFaker.Generate<Guid>();
      var response = await instance.GetReceiptHistoryAsync(accessToken, xeroTenantId, receiptID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetReceipts
    /// </summary>
    [Fact]
    public async Task GetReceiptsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      int? unitdp = AutoFaker.Generate<int?>();
      var response = await instance.GetReceiptsAsync(accessToken, xeroTenantId, ifModifiedSince, where, order, unitdp).ConfigureAwait(false);
      Assert.IsType<Receipts>(response);
    }

    /// <summary>
    /// Test GetRepeatingInvoice
    /// </summary>
    [Fact]
    public async Task GetRepeatingInvoiceTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
      var response = await instance.GetRepeatingInvoiceAsync(accessToken, xeroTenantId, repeatingInvoiceID).ConfigureAwait(false);
      Assert.IsType<RepeatingInvoices>(response);
    }

    // /// <summary>
    // /// Test GetRepeatingInvoiceAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task GetRepeatingInvoiceAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetRepeatingInvoiceAttachmentByFileNameAsync(accessToken, xeroTenantId, repeatingInvoiceID, fileName, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetRepeatingInvoiceAttachmentById
    // /// </summary>
    // [Fact]
    // public async Task GetRepeatingInvoiceAttachmentByIdTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
    //     Guid attachmentID = AutoFaker.Generate<Guid>();
    //     string contentType = AutoFaker.Generate<string>();
    //     var response = await instance.GetRepeatingInvoiceAttachmentByIdAsync(accessToken, xeroTenantId, repeatingInvoiceID, attachmentID, contentType).ConfigureAwait(false);
    //     Assert.IsType<System.IO.Stream>(response);
    // }

    // /// <summary>
    // /// Test GetRepeatingInvoiceAttachments
    // /// </summary>
    // [Fact]
    // public async Task GetRepeatingInvoiceAttachmentsTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
    //     var response = await instance.GetRepeatingInvoiceAttachmentsAsync(accessToken, xeroTenantId, repeatingInvoiceID).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test GetRepeatingInvoiceHistory
    /// </summary>
    [Fact]
    public async Task GetRepeatingInvoiceHistoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
      var response = await instance.GetRepeatingInvoiceHistoryAsync(accessToken, xeroTenantId, repeatingInvoiceID).ConfigureAwait(false);
      Assert.IsType<HistoryRecords>(response);
    }

    /// <summary>
    /// Test GetRepeatingInvoices
    /// </summary>
    [Fact]
    public async Task GetRepeatingInvoicesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetRepeatingInvoicesAsync(accessToken, xeroTenantId, where, order).ConfigureAwait(false);
      Assert.IsType<RepeatingInvoices>(response);
    }

    /// <summary>
    /// Test GetReportAgedPayablesByContact
    /// </summary>
    [Fact]
    public async Task GetReportAgedPayablesByContactTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactId = AutoFaker.Generate<Guid>();
      DateTime? date = AutoFaker.Generate<DateTime?>();
      DateTime? fromDate = AutoFaker.Generate<DateTime?>();
      DateTime? toDate = AutoFaker.Generate<DateTime?>();
      var response = await instance.GetReportAgedPayablesByContactAsync(accessToken, xeroTenantId, contactId, date, fromDate, toDate).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetReportAgedReceivablesByContact
    /// </summary>
    [Fact]
    public async Task GetReportAgedReceivablesByContactTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactId = AutoFaker.Generate<Guid>();
      DateTime? date = AutoFaker.Generate<DateTime?>();
      DateTime? fromDate = AutoFaker.Generate<DateTime?>();
      DateTime? toDate = AutoFaker.Generate<DateTime?>();
      var response = await instance.GetReportAgedReceivablesByContactAsync(accessToken, xeroTenantId, contactId, date, fromDate, toDate).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetReportBalanceSheet
    /// </summary>
    [Fact]
    public async Task GetReportBalanceSheetTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime date = AutoFaker.Generate<DateTime>();
      int? periods = AutoFaker.Generate<int?>();
      string timeframe = AutoFaker.Generate<string>();
      string trackingOptionID1 = AutoFaker.Generate<string>();
      string trackingOptionID2 = AutoFaker.Generate<string>();
      bool? standardLayout = AutoFaker.Generate<bool?>();
      bool? paymentsOnly = AutoFaker.Generate<bool?>();
      var response = await instance.GetReportBalanceSheetAsync(accessToken, xeroTenantId, date, periods, timeframe, trackingOptionID1, trackingOptionID2, standardLayout, paymentsOnly).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetReportBankSummary
    /// </summary>
    [Fact]
    public async Task GetReportBankSummaryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? fromDate = AutoFaker.Generate<DateTime?>();
      DateTime? toDate = AutoFaker.Generate<DateTime?>();
      var response = await instance.GetReportBankSummaryAsync(accessToken, xeroTenantId, fromDate).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetReportBudgetSummary
    /// </summary>
    [Fact]
    public async Task GetReportBudgetSummaryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? date = AutoFaker.Generate<DateTime?>();
      int? period = AutoFaker.Generate<int?>();
      int? timeframe = AutoFaker.Generate<int?>();
      var response = await instance.GetReportBudgetSummaryAsync(accessToken, xeroTenantId, date, period, timeframe).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetReportExecutiveSummary
    /// </summary>
    [Fact]
    public async Task GetReportExecutiveSummaryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? date = AutoFaker.Generate<DateTime?>();
      var response = await instance.GetReportExecutiveSummaryAsync(accessToken, xeroTenantId, date).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetReportProfitAndLoss
    /// </summary>
    [Fact]
    public async Task GetReportProfitAndLossTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? fromDate = AutoFaker.Generate<DateTime?>();
      DateTime? toDate = AutoFaker.Generate<DateTime?>();
      int? periods = AutoFaker.Generate<int?>();
      string timeframe = AutoFaker.Generate<string>();
      string trackingCategoryID = AutoFaker.Generate<string>();
      string trackingCategoryID2 = AutoFaker.Generate<string>();
      string trackingOptionID = AutoFaker.Generate<string>();
      string trackingOptionID2 = AutoFaker.Generate<string>();
      bool? standardLayout = AutoFaker.Generate<bool?>();
      bool? paymentsOnly = AutoFaker.Generate<bool?>();
      var response = await instance.GetReportProfitAndLossAsync(accessToken, xeroTenantId, fromDate, toDate, periods, timeframe, trackingCategoryID, trackingCategoryID2, trackingOptionID, trackingOptionID2, standardLayout, paymentsOnly).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetReportTenNinetyNine
    /// </summary>
    [Fact]
    public async Task GetReportTenNinetyNineTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      string reportYear = AutoFaker.Generate<string>();
      var response = await instance.GetReportTenNinetyNineAsync(accessToken, xeroTenantId, reportYear).ConfigureAwait(false);
      Assert.IsType<Reports>(response);
    }

    /// <summary>
    /// Test GetReportTrialBalance
    /// </summary>
    [Fact]
    public async Task GetReportTrialBalanceTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? date = AutoFaker.Generate<DateTime?>();
      bool? paymentsOnly = AutoFaker.Generate<bool?>();
      var response = await instance.GetReportTrialBalanceAsync(accessToken, xeroTenantId, date, paymentsOnly).ConfigureAwait(false);
      Assert.IsType<ReportWithRows>(response);
    }

    /// <summary>
    /// Test GetTaxRates
    /// </summary>
    [Fact]
    public async Task GetTaxRatesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      string taxType = AutoFaker.Generate<string>();
      var response = await instance.GetTaxRatesAsync(accessToken, xeroTenantId, where, order).ConfigureAwait(false);
      Assert.IsType<TaxRates>(response);
    }

    /// <summary>
    /// Test GetTrackingCategories
    /// </summary>
    [Fact]
    public async Task GetTrackingCategoriesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      bool? includeArchived = AutoFaker.Generate<bool?>();
      var response = await instance.GetTrackingCategoriesAsync(accessToken, xeroTenantId, where, order, includeArchived).ConfigureAwait(false);
      Assert.IsType<TrackingCategories>(response);
    }

    /// <summary>
    /// Test GetTrackingCategory
    /// </summary>
    [Fact]
    public async Task GetTrackingCategoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid trackingCategoryID = AutoFaker.Generate<Guid>();
      var response = await instance.GetTrackingCategoryAsync(accessToken, xeroTenantId, trackingCategoryID).ConfigureAwait(false);
      Assert.IsType<TrackingCategories>(response);
    }

    /// <summary>
    /// Test GetUser
    /// </summary>
    [Fact]
    public async Task GetUserTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid userID = AutoFaker.Generate<Guid>();
      var response = await instance.GetUserAsync(accessToken, xeroTenantId, userID).ConfigureAwait(false);
      Assert.IsType<Users>(response);
    }

    /// <summary>
    /// Test GetUsers
    /// </summary>
    [Fact]
    public async Task GetUsersTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      DateTime? ifModifiedSince = AutoFaker.Generate<DateTime?>();
      string where = AutoFaker.Generate<string>();
      string order = AutoFaker.Generate<string>();
      var response = await instance.GetUsersAsync(accessToken, xeroTenantId, ifModifiedSince, where, order).ConfigureAwait(false);
      Assert.IsType<Users>(response);
    }

    /// <summary>
    /// Test UpdateAccount
    /// </summary>
    [Fact]
    public async Task UpdateAccountTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid accountID = AutoFaker.Generate<Guid>();
      Accounts accounts = new Accounts();
      var response = await instance.UpdateAccountAsync(accessToken, xeroTenantId, accountID, accounts).ConfigureAwait(false);
      Assert.IsType<Accounts>(response);
    }

    // /// <summary>
    // /// Test UpdateAccountAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateAccountAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid accountID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateAccountAttachmentByFileNameAsync(accessToken, xeroTenantId, accountID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test UpdateBankTransaction
    /// </summary>
    [Fact]
    public async Task UpdateBankTransactionTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid bankTransactionID = AutoFaker.Generate<Guid>();
      BankTransactions bankTransactions = new BankTransactions();
      var response = await instance.UpdateBankTransactionAsync(accessToken, xeroTenantId, bankTransactionID, bankTransactions).ConfigureAwait(false);
      Assert.IsType<BankTransactions>(response);
    }

    // /// <summary>
    // /// Test UpdateBankTransactionAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateBankTransactionAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransactionID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateBankTransactionAttachmentByFileNameAsync(accessToken, xeroTenantId, bankTransactionID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    // /// <summary>
    // /// Test UpdateBankTransferAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateBankTransferAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid bankTransferID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateBankTransferAttachmentByFileNameAsync(accessToken, xeroTenantId, bankTransferID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test UpdateContact
    /// </summary>
    [Fact]
    public async Task UpdateContactTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactID = AutoFaker.Generate<Guid>();
      Contacts contacts = new Contacts();
      var response = await instance.UpdateContactAsync(accessToken, xeroTenantId, contactID, contacts).ConfigureAwait(false);
      Assert.IsType<Contacts>(response);
    }

    // /// <summary>
    // /// Test UpdateContactAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateContactAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid contactID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateContactAttachmentByFileNameAsync(accessToken, xeroTenantId, contactID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test UpdateContactGroup
    /// </summary>
    [Fact]
    public async Task UpdateContactGroupTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid contactGroupID = AutoFaker.Generate<Guid>();
      ContactGroups contactGroups = new ContactGroups();
      var response = await instance.UpdateContactGroupAsync(accessToken, xeroTenantId, contactGroupID, contactGroups).ConfigureAwait(false);
      Assert.IsType<ContactGroups>(response);
    }

    /// <summary>
    /// Test UpdateCreditNote
    /// </summary>
    [Fact]
    public async Task UpdateCreditNoteTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid creditNoteID = AutoFaker.Generate<Guid>();
      CreditNotes creditNotes = new CreditNotes();
      var response = await instance.UpdateCreditNoteAsync(accessToken, xeroTenantId, creditNoteID, creditNotes).ConfigureAwait(false);
      Assert.IsType<CreditNotes>(response);
    }

    // /// <summary>
    // /// Test UpdateCreditNoteAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateCreditNoteAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid creditNoteID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateCreditNoteAttachmentByFileNameAsync(accessToken, xeroTenantId, creditNoteID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test UpdateExpenseClaim
    /// </summary>
    [Fact]
    public async Task UpdateExpenseClaimTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid expenseClaimID = AutoFaker.Generate<Guid>();
      ExpenseClaims expenseClaims = new ExpenseClaims();
      var response = await instance.UpdateExpenseClaimAsync(accessToken, xeroTenantId, expenseClaimID, expenseClaims).ConfigureAwait(false);
      Assert.IsType<ExpenseClaims>(response);
    }

    /// <summary>
    /// Test UpdateInvoice
    /// </summary>
    [Fact]
    public async Task UpdateInvoiceTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid invoiceID = AutoFaker.Generate<Guid>();
      Invoices invoices = new Invoices();
      var response = await instance.UpdateInvoiceAsync(accessToken, xeroTenantId, invoiceID, invoices).ConfigureAwait(false);
      Assert.IsType<Invoices>(response);
    }

    // /// <summary>
    // /// Test UpdateInvoiceAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateInvoiceAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid invoiceID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateInvoiceAttachmentByFileNameAsync(accessToken, xeroTenantId, invoiceID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test UpdateItem
    /// </summary>
    [Fact]
    public async Task UpdateItemTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid itemID = AutoFaker.Generate<Guid>();
      Items items = new Items();
      var response = await instance.UpdateItemAsync(accessToken, xeroTenantId, itemID, items).ConfigureAwait(false);
      Assert.IsType<Items>(response);
    }

    /// <summary>
    /// Test UpdateLinkedTransaction
    /// </summary>
    [Fact]
    public async Task UpdateLinkedTransactionTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid linkedTransactionID = AutoFaker.Generate<Guid>();
      LinkedTransactions linkedTransactions = new LinkedTransactions();
      var response = await instance.UpdateLinkedTransactionAsync(accessToken, xeroTenantId, linkedTransactionID, linkedTransactions).ConfigureAwait(false);
      Assert.IsType<LinkedTransactions>(response);
    }

    /// <summary>
    /// Test UpdateManualJournal
    /// </summary>
    [Fact]
    public async Task UpdateManualJournalTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid manualJournalID = AutoFaker.Generate<Guid>();
      ManualJournals manualJournals = new ManualJournals();
      var response = await instance.UpdateManualJournalAsync(accessToken, xeroTenantId, manualJournalID, manualJournals).ConfigureAwait(false);
      Assert.IsType<ManualJournals>(response);
    }

    // /// <summary>
    // /// Test UpdateManualJournalAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateManualJournalAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid manualJournalID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateManualJournalAttachmentByFileNameAsync(accessToken, xeroTenantId, manualJournalID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test UpdateOrCreateBankTransactions
    /// </summary>
    [Fact]
    public async Task UpdateOrCreateBankTransactionsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      BankTransactions bankTransactions = new BankTransactions();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.UpdateOrCreateBankTransactionsAsync(accessToken, xeroTenantId, bankTransactions, summarizeErrors, null, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<BankTransactions>(response);
    }

    /// <summary>
    /// Test UpdateOrCreateContacts
    /// </summary>
    [Fact]
    public async Task UpdateOrCreateContactsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      string idempotencyKey = AutoFaker.Generate<string>();
      Contacts contacts = new Contacts();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.UpdateOrCreateContactsAsync(accessToken, xeroTenantId, contacts, summarizeErrors, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<Contacts>(response);
    }

    /// <summary>
    /// Test UpdateOrCreateCreditNotes
    /// </summary>
    [Fact]
    public async Task UpdateOrCreateCreditNotesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      CreditNotes creditNotes = new CreditNotes();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.UpdateOrCreateCreditNotesAsync(accessToken, xeroTenantId, creditNotes, summarizeErrors, null, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<CreditNotes>(response);
    }

    /// <summary>
    /// Test UpdateOrCreateInvoices
    /// </summary>
    [Fact]
    public async Task UpdateOrCreateInvoicesTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Invoices invoices = new Invoices();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.UpdateOrCreateInvoicesAsync(accessToken, xeroTenantId, invoices, summarizeErrors, null, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<Invoices>(response);
    }

    /// <summary>
    /// Test UpdateOrCreateItems
    /// </summary>
    [Fact]
    public async Task UpdateOrCreateItemsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Items items = new Items();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.UpdateOrCreateItemsAsync(accessToken, xeroTenantId, items, summarizeErrors, null, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<Items>(response);
    }

    /// <summary>
    /// Test UpdateOrCreatePurchaseOrders
    /// </summary>
    [Fact]
    public async Task UpdateOrCreatePurchaseOrdersTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      PurchaseOrders purchaseOrders = new PurchaseOrders();
      string idempotencyKey = AutoFaker.Generate<string>();
      bool? summarizeErrors = AutoFaker.Generate<bool?>();
      var response = await instance.UpdateOrCreatePurchaseOrdersAsync(accessToken, xeroTenantId, purchaseOrders, summarizeErrors, idempotencyKey).ConfigureAwait(false);
      Assert.IsType<PurchaseOrders>(response);
    }

    /// <summary>
    /// Test UpdatePurchaseOrder
    /// </summary>
    [Fact]
    public async Task UpdatePurchaseOrderTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid purchaseOrderID = AutoFaker.Generate<Guid>();
      PurchaseOrders purchaseOrders = new PurchaseOrders();
      var response = await instance.UpdatePurchaseOrderAsync(accessToken, xeroTenantId, purchaseOrderID, purchaseOrders).ConfigureAwait(false);
      Assert.IsType<PurchaseOrders>(response);
    }

    /// <summary>
    /// Test UpdateReceipt
    /// </summary>
    [Fact]
    public async Task UpdateReceiptTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid receiptID = AutoFaker.Generate<Guid>();
      Receipts receipts = new Receipts();
      var response = await instance.UpdateReceiptAsync(accessToken, xeroTenantId, receiptID, receipts).ConfigureAwait(false);
      Assert.IsType<Receipts>(response);
    }

    // /// <summary>
    // /// Test UpdateReceiptAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateReceiptAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid receiptID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateReceiptAttachmentByFileNameAsync(accessToken, xeroTenantId, receiptID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    // /// <summary>
    // /// Test UpdateRepeatingInvoiceAttachmentByFileName
    // /// </summary>
    // [Fact]
    // public async Task UpdateRepeatingInvoiceAttachmentByFileNameTest()
    // {
    //     // TODO uncomment below to test the method and replace null with proper value
    //     string xeroTenantId = AutoFaker.Generate<string>();
    //     Guid repeatingInvoiceID = AutoFaker.Generate<Guid>();
    //     string fileName = AutoFaker.Generate<string>();
    //     byte[] body = AutoFaker.Generate<byte[]>();
    //     var response = await instance.UpdateRepeatingInvoiceAttachmentByFileNameAsync(accessToken, xeroTenantId, repeatingInvoiceID, fileName, body).ConfigureAwait(false);
    //     Assert.IsType<Attachments>(response);
    // }

    /// <summary>
    /// Test UpdateTaxRate
    /// </summary>
    [Fact]
    public async Task UpdateTaxRateTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      TaxRates taxRates = new TaxRates();
      var response = await instance.UpdateTaxRateAsync(accessToken, xeroTenantId, taxRates).ConfigureAwait(false);
      Assert.IsType<TaxRates>(response);
    }

    /// <summary>
    /// Test UpdateTrackingCategory
    /// </summary>
    [Fact]
    public async Task UpdateTrackingCategoryTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid trackingCategoryID = AutoFaker.Generate<Guid>();
      TrackingCategory trackingCategory = new TrackingCategory();
      var response = await instance.UpdateTrackingCategoryAsync(accessToken, xeroTenantId, trackingCategoryID, trackingCategory).ConfigureAwait(false);
      Assert.IsType<TrackingCategories>(response);
    }

    /// <summary>
    /// Test UpdateTrackingOptions
    /// </summary>
    [Fact]
    public async Task UpdateTrackingOptionsTest()
    {
      // TODO uncomment below to test the method and replace null with proper value
      string xeroTenantId = AutoFaker.Generate<string>();
      Guid trackingCategoryID = AutoFaker.Generate<Guid>();
      Guid trackingOptionID = AutoFaker.Generate<Guid>();
      TrackingOption trackingOption = new TrackingOption();
      var response = await instance.UpdateTrackingOptionsAsync(accessToken, xeroTenantId, trackingCategoryID, trackingOptionID, trackingOption).ConfigureAwait(false);
      Assert.IsType<TrackingOptions>(response);
    }

  }

}
